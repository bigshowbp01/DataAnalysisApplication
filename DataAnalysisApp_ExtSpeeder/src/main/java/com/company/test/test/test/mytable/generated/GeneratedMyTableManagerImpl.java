package com.company.test.test.test.mytable.generated;

import com.company.test.test.test.mytable.MyTable;
import com.company.test.test.test.mytable.MyTableImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.plugin.extspeeder.runtime.manager.AbstractExtSpeederSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table test.test.test.myTable.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedMyTableManagerImpl extends AbstractExtSpeederSqlManager<MyTable> implements GeneratedMyTableManager {
    
    private final static Tuple1<Class<Integer>> PRIMARY_KEY_CLASSES = Tuples.of(Integer.class);
    
    protected GeneratedMyTableManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected MyTable newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final MyTable entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setValue(getInt(resultSet, 2));
            entity.setDate(resultSet.getString(3));
            entity.setPerson(resultSet.getString(4));
            entity.setCountry(resultSet.getString(5));
            entity.setCompany(resultSet.getString(6));
            entity.setQuantity(getInt(resultSet, 7));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public MyTable newEmptyEntity() {
        return new MyTableImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(MyTable entity, FieldIdentifier<MyTable> identifier) {
        switch ((MyTable.Identifier) identifier) {
            case ID : return entity.getId();
            case VALUE : return entity.getValue().orElse(null);
            case DATE : return entity.getDate().orElse(null);
            case PERSON : return entity.getPerson().orElse(null);
            case COUNTRY : return entity.getCountry().orElse(null);
            case COMPANY : return entity.getCompany().orElse(null);
            case QUANTITY : return entity.getQuantity().orElse(null);
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(MyTable entity, FieldIdentifier<MyTable> identifier, Object value) {
        switch ((MyTable.Identifier) identifier) {
            case ID : entity.setId((Integer) value); break;
            case VALUE : entity.setValue((Integer) value); break;
            case DATE : entity.setDate((String) value); break;
            case PERSON : entity.setPerson((String) value); break;
            case COUNTRY : entity.setCountry((String) value); break;
            case COMPANY : entity.setCompany((String) value); break;
            case QUANTITY : entity.setQuantity((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            MyTable.ID,
            MyTable.VALUE,
            MyTable.DATE,
            MyTable.PERSON,
            MyTable.COUNTRY,
            MyTable.COMPANY,
            MyTable.QUANTITY
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            MyTable.ID
        );
    }
    
    @Override
    public Tuple1<Class<Integer>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public MyTable newCopyOf(MyTable source) {
        final MyTable copy = new MyTableImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        source.getValue().ifPresent(copy::setValue);
        source.getDate().ifPresent(copy::setDate);
        source.getPerson().ifPresent(copy::setPerson);
        source.getCountry().ifPresent(copy::setCountry);
        source.getCompany().ifPresent(copy::setCompany);
        source.getQuantity().ifPresent(copy::setQuantity);
        
        return copy;
    }
}