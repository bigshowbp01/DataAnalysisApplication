package com.company.test.test.test.socp.generated;

import com.company.test.test.test.socp.Socp;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named socp.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedSocpSerializerImpl extends AbstractEntitySerializer<Socp> {
    
    protected final static long serialVersionUID = -8931638;
    private final static Serializer<String> ID_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> DESCRIPTION_SERIALIZER = SerializerFactory.serializerOf(String.class);
    
    public GeneratedSocpSerializerImpl(Manager<Socp> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Socp socp) throws IOException {
        final long[] bits = new long[1];
        if (!socp.getDescription().isPresent()) BitSetUtil.set(bits, 0);
        out.writeLong(bits[0]);
        out.writeUTF(socp.getId());
        if (socp.getDescription().isPresent()) out.writeUTF(socp.getDescription().get());
    }
    
    @Override
    public Socp deserialize(final DataInput in, final int available) throws IOException {
        final Socp socp = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        socp.setId(in.readUTF());
        if (!BitSetUtil.get0(bits)) socp.setDescription(in.readUTF());
        return socp;
    }
}