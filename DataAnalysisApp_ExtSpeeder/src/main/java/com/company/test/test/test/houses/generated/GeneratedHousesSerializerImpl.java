package com.company.test.test.test.houses.generated;

import com.company.test.test.test.houses.Houses;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named houses.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedHousesSerializerImpl extends AbstractEntitySerializer<Houses> {
    
    protected final static long serialVersionUID = -3035372;
    private final static Serializer<Integer> SERIAL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> STATE_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> BUILDING_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> HOUSING_ADJUSTMENT_CODE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> INCOME_ADJUSMENT_CODE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> CONDO_FEE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NUMBER_OF_ROOMS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MOUNTHLY_RENT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PROPERTY_VALUE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> YEAR_OF_CREATION_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> FAMILY_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GROSS_RENT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GROSS_RENT_AS_PERCENTAGE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HOUSEHOLD_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MOUNTLY_OWNER_COST_AS_PERCENTAGE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MOUNTHLY_OWNER_COST_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> PROPERTY_TAXES_SERIALIZER = SerializerFactory.serializerOf(String.class);
    
    public GeneratedHousesSerializerImpl(Manager<Houses> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Houses houses) throws IOException {
        final long[] bits = new long[1];
        if (!houses.getBuilding().isPresent()) BitSetUtil.set(bits, 0);
        if (!houses.getYearOfCreation().isPresent()) BitSetUtil.set(bits, 1);
        if (!houses.getPropertyTaxes().isPresent()) BitSetUtil.set(bits, 2);
        out.writeLong(bits[0]);
        out.writeInt(houses.getSerial());
        out.writeUTF(houses.getState());
        if (houses.getBuilding().isPresent()) out.writeUTF(houses.getBuilding().get());
        out.writeInt(houses.getHousingAdjustmentCode());
        out.writeInt(houses.getIncomeAdjusmentCode());
        out.writeInt(houses.getCondoFee());
        out.writeInt(houses.getNumberOfRooms());
        out.writeInt(houses.getMounthlyRent());
        out.writeInt(houses.getPropertyValue());
        if (houses.getYearOfCreation().isPresent()) out.writeUTF(houses.getYearOfCreation().get());
        out.writeInt(houses.getFamilyIncome());
        out.writeInt(houses.getGrossRent());
        out.writeInt(houses.getGrossRentAsPercentage());
        out.writeInt(houses.getHouseholdIncome());
        out.writeInt(houses.getMountlyOwnerCostAsPercentage());
        out.writeInt(houses.getMounthlyOwnerCost());
        if (houses.getPropertyTaxes().isPresent()) out.writeUTF(houses.getPropertyTaxes().get());
    }
    
    @Override
    public Houses deserialize(final DataInput in, final int available) throws IOException {
        final Houses houses = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        houses.setSerial(in.readInt());
        houses.setState(in.readUTF());
        if (!BitSetUtil.get0(bits)) houses.setBuilding(in.readUTF());
        houses.setHousingAdjustmentCode(in.readInt());
        houses.setIncomeAdjusmentCode(in.readInt());
        houses.setCondoFee(in.readInt());
        houses.setNumberOfRooms(in.readInt());
        houses.setMounthlyRent(in.readInt());
        houses.setPropertyValue(in.readInt());
        if (!BitSetUtil.get1(bits)) houses.setYearOfCreation(in.readUTF());
        houses.setFamilyIncome(in.readInt());
        houses.setGrossRent(in.readInt());
        houses.setGrossRentAsPercentage(in.readInt());
        houses.setHouseholdIncome(in.readInt());
        houses.setMountlyOwnerCostAsPercentage(in.readInt());
        houses.setMounthlyOwnerCost(in.readInt());
        if (!BitSetUtil.get2(bits)) houses.setPropertyTaxes(in.readUTF());
        return houses;
    }
}