package com.company.test.test.test.ss13pusa.generated;

import com.company.test.test.test.ss13pusa.Ss13pusa;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named ss13pusa.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedSs13pusaSerializerImpl extends AbstractEntitySerializer<Ss13pusa> {
    
    protected final static long serialVersionUID = -1577711338;
    private final static Serializer<Integer> RT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SERIALNO_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SPORDER_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PUMA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ST_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ADJINC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PWGTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> AGEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> CIT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> CITWP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> COW_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DDRS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DEAR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DEYE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DOUT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DPHY_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DRAT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DRATX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DREM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ENG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FER_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GCL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GCM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GCR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS1_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS2_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS3_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS4_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS5_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS6_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINS7_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> INTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> JWMNP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> JWRIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> JWTR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> LANX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MAR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MARHD_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MARHM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MARHT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MARHW_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MARHYP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MIG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MIL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPB_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPCD_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPFG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPH_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPI_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPJ_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MLPK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NWAB_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NWAV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NWLA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NWLK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NWRE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> OIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PAP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RELP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RETP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SCH_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SCHG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SCHL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SEMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SEX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SSIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WAGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WKHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WKL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WKW_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WRK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> YOEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ANC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ANC1_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ANC2_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DECADE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DIS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DRIVESP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ESP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ESR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FOD1_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FOD2_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HICOV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HISP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> INDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> JWAP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> JWDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> LANP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MIGPUMA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MIGSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NAICSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NATIVITY_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NOP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> OC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> OCCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PAOC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PERNP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> POBP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> POVPIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> POWPUMA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> POWSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PRIVCOV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PUBCOV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> QTRBIR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RAC1_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RAC2_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RAC3_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACAIAN_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACASN_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACBLK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACNH_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACNUM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACPI_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACSOR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RACWHT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SCIENGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SCIENGRLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SFN_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SFR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SOCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> VPS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WAOB_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FAGEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FANCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FCITP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FCITWP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FCOWP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDDRSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDEARP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDEYEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDISP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDOUTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDPHYP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDRATP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDRATXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDREMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FENGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FESRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFERP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFODP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FGCLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FGCMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FGCRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS1_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS2_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS3_C_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS3_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS4_C_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS4_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS5_C_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS5_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS6_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINS7_P_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHISP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FINDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FINTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FJWDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FJWMNP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FJWRIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FJWTRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FLANP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FLANXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARHDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARHMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARHTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARHWP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARHYP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMARP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMIGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMIGSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMILPP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMILSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FOCCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FOIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPAP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPERNP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPOBP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPOWSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPRIVCOVP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPUBCOVP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRACP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRELP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRETP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSCHGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSCHLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSCHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSEMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSEXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSSIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWAGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWKHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWKLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWKWP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWRKP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FYOEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    
    public GeneratedSs13pusaSerializerImpl(Manager<Ss13pusa> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Ss13pusa ss13pusa) throws IOException {
        final long[] bits = new long[4];
        if (!ss13pusa.getRt().isPresent()) BitSetUtil.set(bits, 0);
        if (!ss13pusa.getSerialno().isPresent()) BitSetUtil.set(bits, 1);
        if (!ss13pusa.getSporder().isPresent()) BitSetUtil.set(bits, 2);
        if (!ss13pusa.getPuma().isPresent()) BitSetUtil.set(bits, 3);
        if (!ss13pusa.getSt().isPresent()) BitSetUtil.set(bits, 4);
        if (!ss13pusa.getAdjinc().isPresent()) BitSetUtil.set(bits, 5);
        if (!ss13pusa.getPwgtp().isPresent()) BitSetUtil.set(bits, 6);
        if (!ss13pusa.getAgep().isPresent()) BitSetUtil.set(bits, 7);
        if (!ss13pusa.getCit().isPresent()) BitSetUtil.set(bits, 8);
        if (!ss13pusa.getCitwp().isPresent()) BitSetUtil.set(bits, 9);
        if (!ss13pusa.getCow().isPresent()) BitSetUtil.set(bits, 10);
        if (!ss13pusa.getDdrs().isPresent()) BitSetUtil.set(bits, 11);
        if (!ss13pusa.getDear().isPresent()) BitSetUtil.set(bits, 12);
        if (!ss13pusa.getDeye().isPresent()) BitSetUtil.set(bits, 13);
        if (!ss13pusa.getDout().isPresent()) BitSetUtil.set(bits, 14);
        if (!ss13pusa.getDphy().isPresent()) BitSetUtil.set(bits, 15);
        if (!ss13pusa.getDrat().isPresent()) BitSetUtil.set(bits, 16);
        if (!ss13pusa.getDratx().isPresent()) BitSetUtil.set(bits, 17);
        if (!ss13pusa.getDrem().isPresent()) BitSetUtil.set(bits, 18);
        if (!ss13pusa.getEng().isPresent()) BitSetUtil.set(bits, 19);
        if (!ss13pusa.getFer().isPresent()) BitSetUtil.set(bits, 20);
        if (!ss13pusa.getGcl().isPresent()) BitSetUtil.set(bits, 21);
        if (!ss13pusa.getGcm().isPresent()) BitSetUtil.set(bits, 22);
        if (!ss13pusa.getGcr().isPresent()) BitSetUtil.set(bits, 23);
        if (!ss13pusa.getHins1().isPresent()) BitSetUtil.set(bits, 24);
        if (!ss13pusa.getHins2().isPresent()) BitSetUtil.set(bits, 25);
        if (!ss13pusa.getHins3().isPresent()) BitSetUtil.set(bits, 26);
        if (!ss13pusa.getHins4().isPresent()) BitSetUtil.set(bits, 27);
        if (!ss13pusa.getHins5().isPresent()) BitSetUtil.set(bits, 28);
        if (!ss13pusa.getHins6().isPresent()) BitSetUtil.set(bits, 29);
        if (!ss13pusa.getHins7().isPresent()) BitSetUtil.set(bits, 30);
        if (!ss13pusa.getIntp().isPresent()) BitSetUtil.set(bits, 31);
        if (!ss13pusa.getJwmnp().isPresent()) BitSetUtil.set(bits, 32);
        if (!ss13pusa.getJwrip().isPresent()) BitSetUtil.set(bits, 33);
        if (!ss13pusa.getJwtr().isPresent()) BitSetUtil.set(bits, 34);
        if (!ss13pusa.getLanx().isPresent()) BitSetUtil.set(bits, 35);
        if (!ss13pusa.getMar().isPresent()) BitSetUtil.set(bits, 36);
        if (!ss13pusa.getMarhd().isPresent()) BitSetUtil.set(bits, 37);
        if (!ss13pusa.getMarhm().isPresent()) BitSetUtil.set(bits, 38);
        if (!ss13pusa.getMarht().isPresent()) BitSetUtil.set(bits, 39);
        if (!ss13pusa.getMarhw().isPresent()) BitSetUtil.set(bits, 40);
        if (!ss13pusa.getMarhyp().isPresent()) BitSetUtil.set(bits, 41);
        if (!ss13pusa.getMig().isPresent()) BitSetUtil.set(bits, 42);
        if (!ss13pusa.getMil().isPresent()) BitSetUtil.set(bits, 43);
        if (!ss13pusa.getMlpa().isPresent()) BitSetUtil.set(bits, 44);
        if (!ss13pusa.getMlpb().isPresent()) BitSetUtil.set(bits, 45);
        if (!ss13pusa.getMlpcd().isPresent()) BitSetUtil.set(bits, 46);
        if (!ss13pusa.getMlpe().isPresent()) BitSetUtil.set(bits, 47);
        if (!ss13pusa.getMlpfg().isPresent()) BitSetUtil.set(bits, 48);
        if (!ss13pusa.getMlph().isPresent()) BitSetUtil.set(bits, 49);
        if (!ss13pusa.getMlpi().isPresent()) BitSetUtil.set(bits, 50);
        if (!ss13pusa.getMlpj().isPresent()) BitSetUtil.set(bits, 51);
        if (!ss13pusa.getMlpk().isPresent()) BitSetUtil.set(bits, 52);
        if (!ss13pusa.getNwab().isPresent()) BitSetUtil.set(bits, 53);
        if (!ss13pusa.getNwav().isPresent()) BitSetUtil.set(bits, 54);
        if (!ss13pusa.getNwla().isPresent()) BitSetUtil.set(bits, 55);
        if (!ss13pusa.getNwlk().isPresent()) BitSetUtil.set(bits, 56);
        if (!ss13pusa.getNwre().isPresent()) BitSetUtil.set(bits, 57);
        if (!ss13pusa.getOip().isPresent()) BitSetUtil.set(bits, 58);
        if (!ss13pusa.getPap().isPresent()) BitSetUtil.set(bits, 59);
        if (!ss13pusa.getRelp().isPresent()) BitSetUtil.set(bits, 60);
        if (!ss13pusa.getRetp().isPresent()) BitSetUtil.set(bits, 61);
        if (!ss13pusa.getSch().isPresent()) BitSetUtil.set(bits, 62);
        if (!ss13pusa.getSchg().isPresent()) BitSetUtil.set(bits, 63);
        if (!ss13pusa.getSchl().isPresent()) BitSetUtil.set(bits, 64);
        if (!ss13pusa.getSemp().isPresent()) BitSetUtil.set(bits, 65);
        if (!ss13pusa.getSex().isPresent()) BitSetUtil.set(bits, 66);
        if (!ss13pusa.getSsip().isPresent()) BitSetUtil.set(bits, 67);
        if (!ss13pusa.getSsp().isPresent()) BitSetUtil.set(bits, 68);
        if (!ss13pusa.getWagp().isPresent()) BitSetUtil.set(bits, 69);
        if (!ss13pusa.getWkhp().isPresent()) BitSetUtil.set(bits, 70);
        if (!ss13pusa.getWkl().isPresent()) BitSetUtil.set(bits, 71);
        if (!ss13pusa.getWkw().isPresent()) BitSetUtil.set(bits, 72);
        if (!ss13pusa.getWrk().isPresent()) BitSetUtil.set(bits, 73);
        if (!ss13pusa.getYoep().isPresent()) BitSetUtil.set(bits, 74);
        if (!ss13pusa.getAnc().isPresent()) BitSetUtil.set(bits, 75);
        if (!ss13pusa.getAnc1P().isPresent()) BitSetUtil.set(bits, 76);
        if (!ss13pusa.getAnc2P().isPresent()) BitSetUtil.set(bits, 77);
        if (!ss13pusa.getDecade().isPresent()) BitSetUtil.set(bits, 78);
        if (!ss13pusa.getDis().isPresent()) BitSetUtil.set(bits, 79);
        if (!ss13pusa.getDrivesp().isPresent()) BitSetUtil.set(bits, 80);
        if (!ss13pusa.getEsp().isPresent()) BitSetUtil.set(bits, 81);
        if (!ss13pusa.getEsr().isPresent()) BitSetUtil.set(bits, 82);
        if (!ss13pusa.getFod1P().isPresent()) BitSetUtil.set(bits, 83);
        if (!ss13pusa.getFod2P().isPresent()) BitSetUtil.set(bits, 84);
        if (!ss13pusa.getHicov().isPresent()) BitSetUtil.set(bits, 85);
        if (!ss13pusa.getHisp().isPresent()) BitSetUtil.set(bits, 86);
        if (!ss13pusa.getIndp().isPresent()) BitSetUtil.set(bits, 87);
        if (!ss13pusa.getJwap().isPresent()) BitSetUtil.set(bits, 88);
        if (!ss13pusa.getJwdp().isPresent()) BitSetUtil.set(bits, 89);
        if (!ss13pusa.getLanp().isPresent()) BitSetUtil.set(bits, 90);
        if (!ss13pusa.getMigpuma().isPresent()) BitSetUtil.set(bits, 91);
        if (!ss13pusa.getMigsp().isPresent()) BitSetUtil.set(bits, 92);
        if (!ss13pusa.getMsp().isPresent()) BitSetUtil.set(bits, 93);
        if (!ss13pusa.getNaicsp().isPresent()) BitSetUtil.set(bits, 94);
        if (!ss13pusa.getNativity().isPresent()) BitSetUtil.set(bits, 95);
        if (!ss13pusa.getNop().isPresent()) BitSetUtil.set(bits, 96);
        if (!ss13pusa.getOc().isPresent()) BitSetUtil.set(bits, 97);
        if (!ss13pusa.getOccp().isPresent()) BitSetUtil.set(bits, 98);
        if (!ss13pusa.getPaoc().isPresent()) BitSetUtil.set(bits, 99);
        if (!ss13pusa.getPernp().isPresent()) BitSetUtil.set(bits, 100);
        if (!ss13pusa.getPincp().isPresent()) BitSetUtil.set(bits, 101);
        if (!ss13pusa.getPobp().isPresent()) BitSetUtil.set(bits, 102);
        if (!ss13pusa.getPovpip().isPresent()) BitSetUtil.set(bits, 103);
        if (!ss13pusa.getPowpuma().isPresent()) BitSetUtil.set(bits, 104);
        if (!ss13pusa.getPowsp().isPresent()) BitSetUtil.set(bits, 105);
        if (!ss13pusa.getPrivcov().isPresent()) BitSetUtil.set(bits, 106);
        if (!ss13pusa.getPubcov().isPresent()) BitSetUtil.set(bits, 107);
        if (!ss13pusa.getQtrbir().isPresent()) BitSetUtil.set(bits, 108);
        if (!ss13pusa.getRac1P().isPresent()) BitSetUtil.set(bits, 109);
        if (!ss13pusa.getRac2P().isPresent()) BitSetUtil.set(bits, 110);
        if (!ss13pusa.getRac3P().isPresent()) BitSetUtil.set(bits, 111);
        if (!ss13pusa.getRacaian().isPresent()) BitSetUtil.set(bits, 112);
        if (!ss13pusa.getRacasn().isPresent()) BitSetUtil.set(bits, 113);
        if (!ss13pusa.getRacblk().isPresent()) BitSetUtil.set(bits, 114);
        if (!ss13pusa.getRacnh().isPresent()) BitSetUtil.set(bits, 115);
        if (!ss13pusa.getRacnum().isPresent()) BitSetUtil.set(bits, 116);
        if (!ss13pusa.getRacpi().isPresent()) BitSetUtil.set(bits, 117);
        if (!ss13pusa.getRacsor().isPresent()) BitSetUtil.set(bits, 118);
        if (!ss13pusa.getRacwht().isPresent()) BitSetUtil.set(bits, 119);
        if (!ss13pusa.getRc().isPresent()) BitSetUtil.set(bits, 120);
        if (!ss13pusa.getSciengp().isPresent()) BitSetUtil.set(bits, 121);
        if (!ss13pusa.getSciengrlp().isPresent()) BitSetUtil.set(bits, 122);
        if (!ss13pusa.getSfn().isPresent()) BitSetUtil.set(bits, 123);
        if (!ss13pusa.getSfr().isPresent()) BitSetUtil.set(bits, 124);
        if (!ss13pusa.getSocp().isPresent()) BitSetUtil.set(bits, 125);
        if (!ss13pusa.getVps().isPresent()) BitSetUtil.set(bits, 126);
        if (!ss13pusa.getWaob().isPresent()) BitSetUtil.set(bits, 127);
        if (!ss13pusa.getFagep().isPresent()) BitSetUtil.set(bits, 128);
        if (!ss13pusa.getFancp().isPresent()) BitSetUtil.set(bits, 129);
        if (!ss13pusa.getFcitp().isPresent()) BitSetUtil.set(bits, 130);
        if (!ss13pusa.getFcitwp().isPresent()) BitSetUtil.set(bits, 131);
        if (!ss13pusa.getFcowp().isPresent()) BitSetUtil.set(bits, 132);
        if (!ss13pusa.getFddrsp().isPresent()) BitSetUtil.set(bits, 133);
        if (!ss13pusa.getFdearp().isPresent()) BitSetUtil.set(bits, 134);
        if (!ss13pusa.getFdeyep().isPresent()) BitSetUtil.set(bits, 135);
        if (!ss13pusa.getFdisp().isPresent()) BitSetUtil.set(bits, 136);
        if (!ss13pusa.getFdoutp().isPresent()) BitSetUtil.set(bits, 137);
        if (!ss13pusa.getFdphyp().isPresent()) BitSetUtil.set(bits, 138);
        if (!ss13pusa.getFdratp().isPresent()) BitSetUtil.set(bits, 139);
        if (!ss13pusa.getFdratxp().isPresent()) BitSetUtil.set(bits, 140);
        if (!ss13pusa.getFdremp().isPresent()) BitSetUtil.set(bits, 141);
        if (!ss13pusa.getFengp().isPresent()) BitSetUtil.set(bits, 142);
        if (!ss13pusa.getFesrp().isPresent()) BitSetUtil.set(bits, 143);
        if (!ss13pusa.getFferp().isPresent()) BitSetUtil.set(bits, 144);
        if (!ss13pusa.getFfodp().isPresent()) BitSetUtil.set(bits, 145);
        if (!ss13pusa.getFgclp().isPresent()) BitSetUtil.set(bits, 146);
        if (!ss13pusa.getFgcmp().isPresent()) BitSetUtil.set(bits, 147);
        if (!ss13pusa.getFgcrp().isPresent()) BitSetUtil.set(bits, 148);
        if (!ss13pusa.getFhins1P().isPresent()) BitSetUtil.set(bits, 149);
        if (!ss13pusa.getFhins2P().isPresent()) BitSetUtil.set(bits, 150);
        if (!ss13pusa.getFhins3C().isPresent()) BitSetUtil.set(bits, 151);
        if (!ss13pusa.getFhins3P().isPresent()) BitSetUtil.set(bits, 152);
        if (!ss13pusa.getFhins4C().isPresent()) BitSetUtil.set(bits, 153);
        if (!ss13pusa.getFhins4P().isPresent()) BitSetUtil.set(bits, 154);
        if (!ss13pusa.getFhins5C().isPresent()) BitSetUtil.set(bits, 155);
        if (!ss13pusa.getFhins5P().isPresent()) BitSetUtil.set(bits, 156);
        if (!ss13pusa.getFhins6P().isPresent()) BitSetUtil.set(bits, 157);
        if (!ss13pusa.getFhins7P().isPresent()) BitSetUtil.set(bits, 158);
        if (!ss13pusa.getFhisp().isPresent()) BitSetUtil.set(bits, 159);
        if (!ss13pusa.getFindp().isPresent()) BitSetUtil.set(bits, 160);
        if (!ss13pusa.getFintp().isPresent()) BitSetUtil.set(bits, 161);
        if (!ss13pusa.getFjwdp().isPresent()) BitSetUtil.set(bits, 162);
        if (!ss13pusa.getFjwmnp().isPresent()) BitSetUtil.set(bits, 163);
        if (!ss13pusa.getFjwrip().isPresent()) BitSetUtil.set(bits, 164);
        if (!ss13pusa.getFjwtrp().isPresent()) BitSetUtil.set(bits, 165);
        if (!ss13pusa.getFlanp().isPresent()) BitSetUtil.set(bits, 166);
        if (!ss13pusa.getFlanxp().isPresent()) BitSetUtil.set(bits, 167);
        if (!ss13pusa.getFmarhdp().isPresent()) BitSetUtil.set(bits, 168);
        if (!ss13pusa.getFmarhmp().isPresent()) BitSetUtil.set(bits, 169);
        if (!ss13pusa.getFmarhtp().isPresent()) BitSetUtil.set(bits, 170);
        if (!ss13pusa.getFmarhwp().isPresent()) BitSetUtil.set(bits, 171);
        if (!ss13pusa.getFmarhyp().isPresent()) BitSetUtil.set(bits, 172);
        if (!ss13pusa.getFmarp().isPresent()) BitSetUtil.set(bits, 173);
        if (!ss13pusa.getFmigp().isPresent()) BitSetUtil.set(bits, 174);
        if (!ss13pusa.getFmigsp().isPresent()) BitSetUtil.set(bits, 175);
        if (!ss13pusa.getFmilpp().isPresent()) BitSetUtil.set(bits, 176);
        if (!ss13pusa.getFmilsp().isPresent()) BitSetUtil.set(bits, 177);
        if (!ss13pusa.getFoccp().isPresent()) BitSetUtil.set(bits, 178);
        if (!ss13pusa.getFoip().isPresent()) BitSetUtil.set(bits, 179);
        if (!ss13pusa.getFpap().isPresent()) BitSetUtil.set(bits, 180);
        if (!ss13pusa.getFpernp().isPresent()) BitSetUtil.set(bits, 181);
        if (!ss13pusa.getFpincp().isPresent()) BitSetUtil.set(bits, 182);
        if (!ss13pusa.getFpobp().isPresent()) BitSetUtil.set(bits, 183);
        if (!ss13pusa.getFpowsp().isPresent()) BitSetUtil.set(bits, 184);
        if (!ss13pusa.getFprivcovp().isPresent()) BitSetUtil.set(bits, 185);
        if (!ss13pusa.getFpubcovp().isPresent()) BitSetUtil.set(bits, 186);
        if (!ss13pusa.getFracp().isPresent()) BitSetUtil.set(bits, 187);
        if (!ss13pusa.getFrelp().isPresent()) BitSetUtil.set(bits, 188);
        if (!ss13pusa.getFretp().isPresent()) BitSetUtil.set(bits, 189);
        if (!ss13pusa.getFschgp().isPresent()) BitSetUtil.set(bits, 190);
        if (!ss13pusa.getFschlp().isPresent()) BitSetUtil.set(bits, 191);
        if (!ss13pusa.getFschp().isPresent()) BitSetUtil.set(bits, 192);
        if (!ss13pusa.getFsemp().isPresent()) BitSetUtil.set(bits, 193);
        if (!ss13pusa.getFsexp().isPresent()) BitSetUtil.set(bits, 194);
        if (!ss13pusa.getFssip().isPresent()) BitSetUtil.set(bits, 195);
        if (!ss13pusa.getFssp().isPresent()) BitSetUtil.set(bits, 196);
        if (!ss13pusa.getFwagp().isPresent()) BitSetUtil.set(bits, 197);
        if (!ss13pusa.getFwkhp().isPresent()) BitSetUtil.set(bits, 198);
        if (!ss13pusa.getFwklp().isPresent()) BitSetUtil.set(bits, 199);
        if (!ss13pusa.getFwkwp().isPresent()) BitSetUtil.set(bits, 200);
        if (!ss13pusa.getFwrkp().isPresent()) BitSetUtil.set(bits, 201);
        if (!ss13pusa.getFyoep().isPresent()) BitSetUtil.set(bits, 202);
        out.writeLong(bits[0]);
        out.writeLong(bits[1]);
        out.writeLong(bits[2]);
        out.writeLong(bits[3]);
        if (ss13pusa.getRt().isPresent()) out.writeInt(ss13pusa.getRt().get());
        if (ss13pusa.getSerialno().isPresent()) out.writeInt(ss13pusa.getSerialno().get());
        if (ss13pusa.getSporder().isPresent()) out.writeInt(ss13pusa.getSporder().get());
        if (ss13pusa.getPuma().isPresent()) out.writeInt(ss13pusa.getPuma().get());
        if (ss13pusa.getSt().isPresent()) out.writeInt(ss13pusa.getSt().get());
        if (ss13pusa.getAdjinc().isPresent()) out.writeInt(ss13pusa.getAdjinc().get());
        if (ss13pusa.getPwgtp().isPresent()) out.writeInt(ss13pusa.getPwgtp().get());
        if (ss13pusa.getAgep().isPresent()) out.writeInt(ss13pusa.getAgep().get());
        if (ss13pusa.getCit().isPresent()) out.writeInt(ss13pusa.getCit().get());
        if (ss13pusa.getCitwp().isPresent()) out.writeInt(ss13pusa.getCitwp().get());
        if (ss13pusa.getCow().isPresent()) out.writeInt(ss13pusa.getCow().get());
        if (ss13pusa.getDdrs().isPresent()) out.writeInt(ss13pusa.getDdrs().get());
        if (ss13pusa.getDear().isPresent()) out.writeInt(ss13pusa.getDear().get());
        if (ss13pusa.getDeye().isPresent()) out.writeInt(ss13pusa.getDeye().get());
        if (ss13pusa.getDout().isPresent()) out.writeInt(ss13pusa.getDout().get());
        if (ss13pusa.getDphy().isPresent()) out.writeInt(ss13pusa.getDphy().get());
        if (ss13pusa.getDrat().isPresent()) out.writeInt(ss13pusa.getDrat().get());
        if (ss13pusa.getDratx().isPresent()) out.writeInt(ss13pusa.getDratx().get());
        if (ss13pusa.getDrem().isPresent()) out.writeInt(ss13pusa.getDrem().get());
        if (ss13pusa.getEng().isPresent()) out.writeInt(ss13pusa.getEng().get());
        if (ss13pusa.getFer().isPresent()) out.writeInt(ss13pusa.getFer().get());
        if (ss13pusa.getGcl().isPresent()) out.writeInt(ss13pusa.getGcl().get());
        if (ss13pusa.getGcm().isPresent()) out.writeInt(ss13pusa.getGcm().get());
        if (ss13pusa.getGcr().isPresent()) out.writeInt(ss13pusa.getGcr().get());
        if (ss13pusa.getHins1().isPresent()) out.writeInt(ss13pusa.getHins1().get());
        if (ss13pusa.getHins2().isPresent()) out.writeInt(ss13pusa.getHins2().get());
        if (ss13pusa.getHins3().isPresent()) out.writeInt(ss13pusa.getHins3().get());
        if (ss13pusa.getHins4().isPresent()) out.writeInt(ss13pusa.getHins4().get());
        if (ss13pusa.getHins5().isPresent()) out.writeInt(ss13pusa.getHins5().get());
        if (ss13pusa.getHins6().isPresent()) out.writeInt(ss13pusa.getHins6().get());
        if (ss13pusa.getHins7().isPresent()) out.writeInt(ss13pusa.getHins7().get());
        if (ss13pusa.getIntp().isPresent()) out.writeInt(ss13pusa.getIntp().get());
        if (ss13pusa.getJwmnp().isPresent()) out.writeInt(ss13pusa.getJwmnp().get());
        if (ss13pusa.getJwrip().isPresent()) out.writeInt(ss13pusa.getJwrip().get());
        if (ss13pusa.getJwtr().isPresent()) out.writeInt(ss13pusa.getJwtr().get());
        if (ss13pusa.getLanx().isPresent()) out.writeInt(ss13pusa.getLanx().get());
        if (ss13pusa.getMar().isPresent()) out.writeInt(ss13pusa.getMar().get());
        if (ss13pusa.getMarhd().isPresent()) out.writeInt(ss13pusa.getMarhd().get());
        if (ss13pusa.getMarhm().isPresent()) out.writeInt(ss13pusa.getMarhm().get());
        if (ss13pusa.getMarht().isPresent()) out.writeInt(ss13pusa.getMarht().get());
        if (ss13pusa.getMarhw().isPresent()) out.writeInt(ss13pusa.getMarhw().get());
        if (ss13pusa.getMarhyp().isPresent()) out.writeInt(ss13pusa.getMarhyp().get());
        if (ss13pusa.getMig().isPresent()) out.writeInt(ss13pusa.getMig().get());
        if (ss13pusa.getMil().isPresent()) out.writeInt(ss13pusa.getMil().get());
        if (ss13pusa.getMlpa().isPresent()) out.writeInt(ss13pusa.getMlpa().get());
        if (ss13pusa.getMlpb().isPresent()) out.writeInt(ss13pusa.getMlpb().get());
        if (ss13pusa.getMlpcd().isPresent()) out.writeInt(ss13pusa.getMlpcd().get());
        if (ss13pusa.getMlpe().isPresent()) out.writeInt(ss13pusa.getMlpe().get());
        if (ss13pusa.getMlpfg().isPresent()) out.writeInt(ss13pusa.getMlpfg().get());
        if (ss13pusa.getMlph().isPresent()) out.writeInt(ss13pusa.getMlph().get());
        if (ss13pusa.getMlpi().isPresent()) out.writeInt(ss13pusa.getMlpi().get());
        if (ss13pusa.getMlpj().isPresent()) out.writeInt(ss13pusa.getMlpj().get());
        if (ss13pusa.getMlpk().isPresent()) out.writeInt(ss13pusa.getMlpk().get());
        if (ss13pusa.getNwab().isPresent()) out.writeInt(ss13pusa.getNwab().get());
        if (ss13pusa.getNwav().isPresent()) out.writeInt(ss13pusa.getNwav().get());
        if (ss13pusa.getNwla().isPresent()) out.writeInt(ss13pusa.getNwla().get());
        if (ss13pusa.getNwlk().isPresent()) out.writeInt(ss13pusa.getNwlk().get());
        if (ss13pusa.getNwre().isPresent()) out.writeInt(ss13pusa.getNwre().get());
        if (ss13pusa.getOip().isPresent()) out.writeInt(ss13pusa.getOip().get());
        if (ss13pusa.getPap().isPresent()) out.writeInt(ss13pusa.getPap().get());
        if (ss13pusa.getRelp().isPresent()) out.writeInt(ss13pusa.getRelp().get());
        if (ss13pusa.getRetp().isPresent()) out.writeInt(ss13pusa.getRetp().get());
        if (ss13pusa.getSch().isPresent()) out.writeInt(ss13pusa.getSch().get());
        if (ss13pusa.getSchg().isPresent()) out.writeInt(ss13pusa.getSchg().get());
        if (ss13pusa.getSchl().isPresent()) out.writeInt(ss13pusa.getSchl().get());
        if (ss13pusa.getSemp().isPresent()) out.writeInt(ss13pusa.getSemp().get());
        if (ss13pusa.getSex().isPresent()) out.writeInt(ss13pusa.getSex().get());
        if (ss13pusa.getSsip().isPresent()) out.writeInt(ss13pusa.getSsip().get());
        if (ss13pusa.getSsp().isPresent()) out.writeInt(ss13pusa.getSsp().get());
        if (ss13pusa.getWagp().isPresent()) out.writeInt(ss13pusa.getWagp().get());
        if (ss13pusa.getWkhp().isPresent()) out.writeInt(ss13pusa.getWkhp().get());
        if (ss13pusa.getWkl().isPresent()) out.writeInt(ss13pusa.getWkl().get());
        if (ss13pusa.getWkw().isPresent()) out.writeInt(ss13pusa.getWkw().get());
        if (ss13pusa.getWrk().isPresent()) out.writeInt(ss13pusa.getWrk().get());
        if (ss13pusa.getYoep().isPresent()) out.writeInt(ss13pusa.getYoep().get());
        if (ss13pusa.getAnc().isPresent()) out.writeInt(ss13pusa.getAnc().get());
        if (ss13pusa.getAnc1P().isPresent()) out.writeInt(ss13pusa.getAnc1P().get());
        if (ss13pusa.getAnc2P().isPresent()) out.writeInt(ss13pusa.getAnc2P().get());
        if (ss13pusa.getDecade().isPresent()) out.writeInt(ss13pusa.getDecade().get());
        if (ss13pusa.getDis().isPresent()) out.writeInt(ss13pusa.getDis().get());
        if (ss13pusa.getDrivesp().isPresent()) out.writeInt(ss13pusa.getDrivesp().get());
        if (ss13pusa.getEsp().isPresent()) out.writeInt(ss13pusa.getEsp().get());
        if (ss13pusa.getEsr().isPresent()) out.writeInt(ss13pusa.getEsr().get());
        if (ss13pusa.getFod1P().isPresent()) out.writeInt(ss13pusa.getFod1P().get());
        if (ss13pusa.getFod2P().isPresent()) out.writeInt(ss13pusa.getFod2P().get());
        if (ss13pusa.getHicov().isPresent()) out.writeInt(ss13pusa.getHicov().get());
        if (ss13pusa.getHisp().isPresent()) out.writeInt(ss13pusa.getHisp().get());
        if (ss13pusa.getIndp().isPresent()) out.writeInt(ss13pusa.getIndp().get());
        if (ss13pusa.getJwap().isPresent()) out.writeInt(ss13pusa.getJwap().get());
        if (ss13pusa.getJwdp().isPresent()) out.writeInt(ss13pusa.getJwdp().get());
        if (ss13pusa.getLanp().isPresent()) out.writeInt(ss13pusa.getLanp().get());
        if (ss13pusa.getMigpuma().isPresent()) out.writeInt(ss13pusa.getMigpuma().get());
        if (ss13pusa.getMigsp().isPresent()) out.writeInt(ss13pusa.getMigsp().get());
        if (ss13pusa.getMsp().isPresent()) out.writeInt(ss13pusa.getMsp().get());
        if (ss13pusa.getNaicsp().isPresent()) out.writeInt(ss13pusa.getNaicsp().get());
        if (ss13pusa.getNativity().isPresent()) out.writeInt(ss13pusa.getNativity().get());
        if (ss13pusa.getNop().isPresent()) out.writeInt(ss13pusa.getNop().get());
        if (ss13pusa.getOc().isPresent()) out.writeInt(ss13pusa.getOc().get());
        if (ss13pusa.getOccp().isPresent()) out.writeInt(ss13pusa.getOccp().get());
        if (ss13pusa.getPaoc().isPresent()) out.writeInt(ss13pusa.getPaoc().get());
        if (ss13pusa.getPernp().isPresent()) out.writeInt(ss13pusa.getPernp().get());
        if (ss13pusa.getPincp().isPresent()) out.writeInt(ss13pusa.getPincp().get());
        if (ss13pusa.getPobp().isPresent()) out.writeInt(ss13pusa.getPobp().get());
        if (ss13pusa.getPovpip().isPresent()) out.writeInt(ss13pusa.getPovpip().get());
        if (ss13pusa.getPowpuma().isPresent()) out.writeInt(ss13pusa.getPowpuma().get());
        if (ss13pusa.getPowsp().isPresent()) out.writeInt(ss13pusa.getPowsp().get());
        if (ss13pusa.getPrivcov().isPresent()) out.writeInt(ss13pusa.getPrivcov().get());
        if (ss13pusa.getPubcov().isPresent()) out.writeInt(ss13pusa.getPubcov().get());
        if (ss13pusa.getQtrbir().isPresent()) out.writeInt(ss13pusa.getQtrbir().get());
        if (ss13pusa.getRac1P().isPresent()) out.writeInt(ss13pusa.getRac1P().get());
        if (ss13pusa.getRac2P().isPresent()) out.writeInt(ss13pusa.getRac2P().get());
        if (ss13pusa.getRac3P().isPresent()) out.writeInt(ss13pusa.getRac3P().get());
        if (ss13pusa.getRacaian().isPresent()) out.writeInt(ss13pusa.getRacaian().get());
        if (ss13pusa.getRacasn().isPresent()) out.writeInt(ss13pusa.getRacasn().get());
        if (ss13pusa.getRacblk().isPresent()) out.writeInt(ss13pusa.getRacblk().get());
        if (ss13pusa.getRacnh().isPresent()) out.writeInt(ss13pusa.getRacnh().get());
        if (ss13pusa.getRacnum().isPresent()) out.writeInt(ss13pusa.getRacnum().get());
        if (ss13pusa.getRacpi().isPresent()) out.writeInt(ss13pusa.getRacpi().get());
        if (ss13pusa.getRacsor().isPresent()) out.writeInt(ss13pusa.getRacsor().get());
        if (ss13pusa.getRacwht().isPresent()) out.writeInt(ss13pusa.getRacwht().get());
        if (ss13pusa.getRc().isPresent()) out.writeInt(ss13pusa.getRc().get());
        if (ss13pusa.getSciengp().isPresent()) out.writeInt(ss13pusa.getSciengp().get());
        if (ss13pusa.getSciengrlp().isPresent()) out.writeInt(ss13pusa.getSciengrlp().get());
        if (ss13pusa.getSfn().isPresent()) out.writeInt(ss13pusa.getSfn().get());
        if (ss13pusa.getSfr().isPresent()) out.writeInt(ss13pusa.getSfr().get());
        if (ss13pusa.getSocp().isPresent()) out.writeInt(ss13pusa.getSocp().get());
        if (ss13pusa.getVps().isPresent()) out.writeInt(ss13pusa.getVps().get());
        if (ss13pusa.getWaob().isPresent()) out.writeInt(ss13pusa.getWaob().get());
        if (ss13pusa.getFagep().isPresent()) out.writeInt(ss13pusa.getFagep().get());
        if (ss13pusa.getFancp().isPresent()) out.writeInt(ss13pusa.getFancp().get());
        if (ss13pusa.getFcitp().isPresent()) out.writeInt(ss13pusa.getFcitp().get());
        if (ss13pusa.getFcitwp().isPresent()) out.writeInt(ss13pusa.getFcitwp().get());
        if (ss13pusa.getFcowp().isPresent()) out.writeInt(ss13pusa.getFcowp().get());
        if (ss13pusa.getFddrsp().isPresent()) out.writeInt(ss13pusa.getFddrsp().get());
        if (ss13pusa.getFdearp().isPresent()) out.writeInt(ss13pusa.getFdearp().get());
        if (ss13pusa.getFdeyep().isPresent()) out.writeInt(ss13pusa.getFdeyep().get());
        if (ss13pusa.getFdisp().isPresent()) out.writeInt(ss13pusa.getFdisp().get());
        if (ss13pusa.getFdoutp().isPresent()) out.writeInt(ss13pusa.getFdoutp().get());
        if (ss13pusa.getFdphyp().isPresent()) out.writeInt(ss13pusa.getFdphyp().get());
        if (ss13pusa.getFdratp().isPresent()) out.writeInt(ss13pusa.getFdratp().get());
        if (ss13pusa.getFdratxp().isPresent()) out.writeInt(ss13pusa.getFdratxp().get());
        if (ss13pusa.getFdremp().isPresent()) out.writeInt(ss13pusa.getFdremp().get());
        if (ss13pusa.getFengp().isPresent()) out.writeInt(ss13pusa.getFengp().get());
        if (ss13pusa.getFesrp().isPresent()) out.writeInt(ss13pusa.getFesrp().get());
        if (ss13pusa.getFferp().isPresent()) out.writeInt(ss13pusa.getFferp().get());
        if (ss13pusa.getFfodp().isPresent()) out.writeInt(ss13pusa.getFfodp().get());
        if (ss13pusa.getFgclp().isPresent()) out.writeInt(ss13pusa.getFgclp().get());
        if (ss13pusa.getFgcmp().isPresent()) out.writeInt(ss13pusa.getFgcmp().get());
        if (ss13pusa.getFgcrp().isPresent()) out.writeInt(ss13pusa.getFgcrp().get());
        if (ss13pusa.getFhins1P().isPresent()) out.writeInt(ss13pusa.getFhins1P().get());
        if (ss13pusa.getFhins2P().isPresent()) out.writeInt(ss13pusa.getFhins2P().get());
        if (ss13pusa.getFhins3C().isPresent()) out.writeInt(ss13pusa.getFhins3C().get());
        if (ss13pusa.getFhins3P().isPresent()) out.writeInt(ss13pusa.getFhins3P().get());
        if (ss13pusa.getFhins4C().isPresent()) out.writeInt(ss13pusa.getFhins4C().get());
        if (ss13pusa.getFhins4P().isPresent()) out.writeInt(ss13pusa.getFhins4P().get());
        if (ss13pusa.getFhins5C().isPresent()) out.writeInt(ss13pusa.getFhins5C().get());
        if (ss13pusa.getFhins5P().isPresent()) out.writeInt(ss13pusa.getFhins5P().get());
        if (ss13pusa.getFhins6P().isPresent()) out.writeInt(ss13pusa.getFhins6P().get());
        if (ss13pusa.getFhins7P().isPresent()) out.writeInt(ss13pusa.getFhins7P().get());
        if (ss13pusa.getFhisp().isPresent()) out.writeInt(ss13pusa.getFhisp().get());
        if (ss13pusa.getFindp().isPresent()) out.writeInt(ss13pusa.getFindp().get());
        if (ss13pusa.getFintp().isPresent()) out.writeInt(ss13pusa.getFintp().get());
        if (ss13pusa.getFjwdp().isPresent()) out.writeInt(ss13pusa.getFjwdp().get());
        if (ss13pusa.getFjwmnp().isPresent()) out.writeInt(ss13pusa.getFjwmnp().get());
        if (ss13pusa.getFjwrip().isPresent()) out.writeInt(ss13pusa.getFjwrip().get());
        if (ss13pusa.getFjwtrp().isPresent()) out.writeInt(ss13pusa.getFjwtrp().get());
        if (ss13pusa.getFlanp().isPresent()) out.writeInt(ss13pusa.getFlanp().get());
        if (ss13pusa.getFlanxp().isPresent()) out.writeInt(ss13pusa.getFlanxp().get());
        if (ss13pusa.getFmarhdp().isPresent()) out.writeInt(ss13pusa.getFmarhdp().get());
        if (ss13pusa.getFmarhmp().isPresent()) out.writeInt(ss13pusa.getFmarhmp().get());
        if (ss13pusa.getFmarhtp().isPresent()) out.writeInt(ss13pusa.getFmarhtp().get());
        if (ss13pusa.getFmarhwp().isPresent()) out.writeInt(ss13pusa.getFmarhwp().get());
        if (ss13pusa.getFmarhyp().isPresent()) out.writeInt(ss13pusa.getFmarhyp().get());
        if (ss13pusa.getFmarp().isPresent()) out.writeInt(ss13pusa.getFmarp().get());
        if (ss13pusa.getFmigp().isPresent()) out.writeInt(ss13pusa.getFmigp().get());
        if (ss13pusa.getFmigsp().isPresent()) out.writeInt(ss13pusa.getFmigsp().get());
        if (ss13pusa.getFmilpp().isPresent()) out.writeInt(ss13pusa.getFmilpp().get());
        if (ss13pusa.getFmilsp().isPresent()) out.writeInt(ss13pusa.getFmilsp().get());
        if (ss13pusa.getFoccp().isPresent()) out.writeInt(ss13pusa.getFoccp().get());
        if (ss13pusa.getFoip().isPresent()) out.writeInt(ss13pusa.getFoip().get());
        if (ss13pusa.getFpap().isPresent()) out.writeInt(ss13pusa.getFpap().get());
        if (ss13pusa.getFpernp().isPresent()) out.writeInt(ss13pusa.getFpernp().get());
        if (ss13pusa.getFpincp().isPresent()) out.writeInt(ss13pusa.getFpincp().get());
        if (ss13pusa.getFpobp().isPresent()) out.writeInt(ss13pusa.getFpobp().get());
        if (ss13pusa.getFpowsp().isPresent()) out.writeInt(ss13pusa.getFpowsp().get());
        if (ss13pusa.getFprivcovp().isPresent()) out.writeInt(ss13pusa.getFprivcovp().get());
        if (ss13pusa.getFpubcovp().isPresent()) out.writeInt(ss13pusa.getFpubcovp().get());
        if (ss13pusa.getFracp().isPresent()) out.writeInt(ss13pusa.getFracp().get());
        if (ss13pusa.getFrelp().isPresent()) out.writeInt(ss13pusa.getFrelp().get());
        if (ss13pusa.getFretp().isPresent()) out.writeInt(ss13pusa.getFretp().get());
        if (ss13pusa.getFschgp().isPresent()) out.writeInt(ss13pusa.getFschgp().get());
        if (ss13pusa.getFschlp().isPresent()) out.writeInt(ss13pusa.getFschlp().get());
        if (ss13pusa.getFschp().isPresent()) out.writeInt(ss13pusa.getFschp().get());
        if (ss13pusa.getFsemp().isPresent()) out.writeInt(ss13pusa.getFsemp().get());
        if (ss13pusa.getFsexp().isPresent()) out.writeInt(ss13pusa.getFsexp().get());
        if (ss13pusa.getFssip().isPresent()) out.writeInt(ss13pusa.getFssip().get());
        if (ss13pusa.getFssp().isPresent()) out.writeInt(ss13pusa.getFssp().get());
        if (ss13pusa.getFwagp().isPresent()) out.writeInt(ss13pusa.getFwagp().get());
        if (ss13pusa.getFwkhp().isPresent()) out.writeInt(ss13pusa.getFwkhp().get());
        if (ss13pusa.getFwklp().isPresent()) out.writeInt(ss13pusa.getFwklp().get());
        if (ss13pusa.getFwkwp().isPresent()) out.writeInt(ss13pusa.getFwkwp().get());
        if (ss13pusa.getFwrkp().isPresent()) out.writeInt(ss13pusa.getFwrkp().get());
        if (ss13pusa.getFyoep().isPresent()) out.writeInt(ss13pusa.getFyoep().get());
    }
    
    @Override
    public Ss13pusa deserialize(final DataInput in, final int available) throws IOException {
        final Ss13pusa ss13pusa = manager.newEmptyEntity();
        final long[] bits = new long[4];
        bits[0] = in.readLong();
        bits[1] = in.readLong();
        bits[2] = in.readLong();
        bits[3] = in.readLong();
        if (!BitSetUtil.get0(bits)) ss13pusa.setRt(in.readInt());
        if (!BitSetUtil.get1(bits)) ss13pusa.setSerialno(in.readInt());
        if (!BitSetUtil.get2(bits)) ss13pusa.setSporder(in.readInt());
        if (!BitSetUtil.get3(bits)) ss13pusa.setPuma(in.readInt());
        if (!BitSetUtil.get4(bits)) ss13pusa.setSt(in.readInt());
        if (!BitSetUtil.get5(bits)) ss13pusa.setAdjinc(in.readInt());
        if (!BitSetUtil.get6(bits)) ss13pusa.setPwgtp(in.readInt());
        if (!BitSetUtil.get7(bits)) ss13pusa.setAgep(in.readInt());
        if (!BitSetUtil.get8(bits)) ss13pusa.setCit(in.readInt());
        if (!BitSetUtil.get9(bits)) ss13pusa.setCitwp(in.readInt());
        if (!BitSetUtil.get(bits, 10)) ss13pusa.setCow(in.readInt());
        if (!BitSetUtil.get(bits, 11)) ss13pusa.setDdrs(in.readInt());
        if (!BitSetUtil.get(bits, 12)) ss13pusa.setDear(in.readInt());
        if (!BitSetUtil.get(bits, 13)) ss13pusa.setDeye(in.readInt());
        if (!BitSetUtil.get(bits, 14)) ss13pusa.setDout(in.readInt());
        if (!BitSetUtil.get(bits, 15)) ss13pusa.setDphy(in.readInt());
        if (!BitSetUtil.get(bits, 16)) ss13pusa.setDrat(in.readInt());
        if (!BitSetUtil.get(bits, 17)) ss13pusa.setDratx(in.readInt());
        if (!BitSetUtil.get(bits, 18)) ss13pusa.setDrem(in.readInt());
        if (!BitSetUtil.get(bits, 19)) ss13pusa.setEng(in.readInt());
        if (!BitSetUtil.get(bits, 20)) ss13pusa.setFer(in.readInt());
        if (!BitSetUtil.get(bits, 21)) ss13pusa.setGcl(in.readInt());
        if (!BitSetUtil.get(bits, 22)) ss13pusa.setGcm(in.readInt());
        if (!BitSetUtil.get(bits, 23)) ss13pusa.setGcr(in.readInt());
        if (!BitSetUtil.get(bits, 24)) ss13pusa.setHins1(in.readInt());
        if (!BitSetUtil.get(bits, 25)) ss13pusa.setHins2(in.readInt());
        if (!BitSetUtil.get(bits, 26)) ss13pusa.setHins3(in.readInt());
        if (!BitSetUtil.get(bits, 27)) ss13pusa.setHins4(in.readInt());
        if (!BitSetUtil.get(bits, 28)) ss13pusa.setHins5(in.readInt());
        if (!BitSetUtil.get(bits, 29)) ss13pusa.setHins6(in.readInt());
        if (!BitSetUtil.get(bits, 30)) ss13pusa.setHins7(in.readInt());
        if (!BitSetUtil.get(bits, 31)) ss13pusa.setIntp(in.readInt());
        if (!BitSetUtil.get(bits, 32)) ss13pusa.setJwmnp(in.readInt());
        if (!BitSetUtil.get(bits, 33)) ss13pusa.setJwrip(in.readInt());
        if (!BitSetUtil.get(bits, 34)) ss13pusa.setJwtr(in.readInt());
        if (!BitSetUtil.get(bits, 35)) ss13pusa.setLanx(in.readInt());
        if (!BitSetUtil.get(bits, 36)) ss13pusa.setMar(in.readInt());
        if (!BitSetUtil.get(bits, 37)) ss13pusa.setMarhd(in.readInt());
        if (!BitSetUtil.get(bits, 38)) ss13pusa.setMarhm(in.readInt());
        if (!BitSetUtil.get(bits, 39)) ss13pusa.setMarht(in.readInt());
        if (!BitSetUtil.get(bits, 40)) ss13pusa.setMarhw(in.readInt());
        if (!BitSetUtil.get(bits, 41)) ss13pusa.setMarhyp(in.readInt());
        if (!BitSetUtil.get(bits, 42)) ss13pusa.setMig(in.readInt());
        if (!BitSetUtil.get(bits, 43)) ss13pusa.setMil(in.readInt());
        if (!BitSetUtil.get(bits, 44)) ss13pusa.setMlpa(in.readInt());
        if (!BitSetUtil.get(bits, 45)) ss13pusa.setMlpb(in.readInt());
        if (!BitSetUtil.get(bits, 46)) ss13pusa.setMlpcd(in.readInt());
        if (!BitSetUtil.get(bits, 47)) ss13pusa.setMlpe(in.readInt());
        if (!BitSetUtil.get(bits, 48)) ss13pusa.setMlpfg(in.readInt());
        if (!BitSetUtil.get(bits, 49)) ss13pusa.setMlph(in.readInt());
        if (!BitSetUtil.get(bits, 50)) ss13pusa.setMlpi(in.readInt());
        if (!BitSetUtil.get(bits, 51)) ss13pusa.setMlpj(in.readInt());
        if (!BitSetUtil.get(bits, 52)) ss13pusa.setMlpk(in.readInt());
        if (!BitSetUtil.get(bits, 53)) ss13pusa.setNwab(in.readInt());
        if (!BitSetUtil.get(bits, 54)) ss13pusa.setNwav(in.readInt());
        if (!BitSetUtil.get(bits, 55)) ss13pusa.setNwla(in.readInt());
        if (!BitSetUtil.get(bits, 56)) ss13pusa.setNwlk(in.readInt());
        if (!BitSetUtil.get(bits, 57)) ss13pusa.setNwre(in.readInt());
        if (!BitSetUtil.get(bits, 58)) ss13pusa.setOip(in.readInt());
        if (!BitSetUtil.get(bits, 59)) ss13pusa.setPap(in.readInt());
        if (!BitSetUtil.get(bits, 60)) ss13pusa.setRelp(in.readInt());
        if (!BitSetUtil.get(bits, 61)) ss13pusa.setRetp(in.readInt());
        if (!BitSetUtil.get(bits, 62)) ss13pusa.setSch(in.readInt());
        if (!BitSetUtil.get(bits, 63)) ss13pusa.setSchg(in.readInt());
        if (!BitSetUtil.get(bits, 64)) ss13pusa.setSchl(in.readInt());
        if (!BitSetUtil.get(bits, 65)) ss13pusa.setSemp(in.readInt());
        if (!BitSetUtil.get(bits, 66)) ss13pusa.setSex(in.readInt());
        if (!BitSetUtil.get(bits, 67)) ss13pusa.setSsip(in.readInt());
        if (!BitSetUtil.get(bits, 68)) ss13pusa.setSsp(in.readInt());
        if (!BitSetUtil.get(bits, 69)) ss13pusa.setWagp(in.readInt());
        if (!BitSetUtil.get(bits, 70)) ss13pusa.setWkhp(in.readInt());
        if (!BitSetUtil.get(bits, 71)) ss13pusa.setWkl(in.readInt());
        if (!BitSetUtil.get(bits, 72)) ss13pusa.setWkw(in.readInt());
        if (!BitSetUtil.get(bits, 73)) ss13pusa.setWrk(in.readInt());
        if (!BitSetUtil.get(bits, 74)) ss13pusa.setYoep(in.readInt());
        if (!BitSetUtil.get(bits, 75)) ss13pusa.setAnc(in.readInt());
        if (!BitSetUtil.get(bits, 76)) ss13pusa.setAnc1P(in.readInt());
        if (!BitSetUtil.get(bits, 77)) ss13pusa.setAnc2P(in.readInt());
        if (!BitSetUtil.get(bits, 78)) ss13pusa.setDecade(in.readInt());
        if (!BitSetUtil.get(bits, 79)) ss13pusa.setDis(in.readInt());
        if (!BitSetUtil.get(bits, 80)) ss13pusa.setDrivesp(in.readInt());
        if (!BitSetUtil.get(bits, 81)) ss13pusa.setEsp(in.readInt());
        if (!BitSetUtil.get(bits, 82)) ss13pusa.setEsr(in.readInt());
        if (!BitSetUtil.get(bits, 83)) ss13pusa.setFod1P(in.readInt());
        if (!BitSetUtil.get(bits, 84)) ss13pusa.setFod2P(in.readInt());
        if (!BitSetUtil.get(bits, 85)) ss13pusa.setHicov(in.readInt());
        if (!BitSetUtil.get(bits, 86)) ss13pusa.setHisp(in.readInt());
        if (!BitSetUtil.get(bits, 87)) ss13pusa.setIndp(in.readInt());
        if (!BitSetUtil.get(bits, 88)) ss13pusa.setJwap(in.readInt());
        if (!BitSetUtil.get(bits, 89)) ss13pusa.setJwdp(in.readInt());
        if (!BitSetUtil.get(bits, 90)) ss13pusa.setLanp(in.readInt());
        if (!BitSetUtil.get(bits, 91)) ss13pusa.setMigpuma(in.readInt());
        if (!BitSetUtil.get(bits, 92)) ss13pusa.setMigsp(in.readInt());
        if (!BitSetUtil.get(bits, 93)) ss13pusa.setMsp(in.readInt());
        if (!BitSetUtil.get(bits, 94)) ss13pusa.setNaicsp(in.readInt());
        if (!BitSetUtil.get(bits, 95)) ss13pusa.setNativity(in.readInt());
        if (!BitSetUtil.get(bits, 96)) ss13pusa.setNop(in.readInt());
        if (!BitSetUtil.get(bits, 97)) ss13pusa.setOc(in.readInt());
        if (!BitSetUtil.get(bits, 98)) ss13pusa.setOccp(in.readInt());
        if (!BitSetUtil.get(bits, 99)) ss13pusa.setPaoc(in.readInt());
        if (!BitSetUtil.get(bits, 100)) ss13pusa.setPernp(in.readInt());
        if (!BitSetUtil.get(bits, 101)) ss13pusa.setPincp(in.readInt());
        if (!BitSetUtil.get(bits, 102)) ss13pusa.setPobp(in.readInt());
        if (!BitSetUtil.get(bits, 103)) ss13pusa.setPovpip(in.readInt());
        if (!BitSetUtil.get(bits, 104)) ss13pusa.setPowpuma(in.readInt());
        if (!BitSetUtil.get(bits, 105)) ss13pusa.setPowsp(in.readInt());
        if (!BitSetUtil.get(bits, 106)) ss13pusa.setPrivcov(in.readInt());
        if (!BitSetUtil.get(bits, 107)) ss13pusa.setPubcov(in.readInt());
        if (!BitSetUtil.get(bits, 108)) ss13pusa.setQtrbir(in.readInt());
        if (!BitSetUtil.get(bits, 109)) ss13pusa.setRac1P(in.readInt());
        if (!BitSetUtil.get(bits, 110)) ss13pusa.setRac2P(in.readInt());
        if (!BitSetUtil.get(bits, 111)) ss13pusa.setRac3P(in.readInt());
        if (!BitSetUtil.get(bits, 112)) ss13pusa.setRacaian(in.readInt());
        if (!BitSetUtil.get(bits, 113)) ss13pusa.setRacasn(in.readInt());
        if (!BitSetUtil.get(bits, 114)) ss13pusa.setRacblk(in.readInt());
        if (!BitSetUtil.get(bits, 115)) ss13pusa.setRacnh(in.readInt());
        if (!BitSetUtil.get(bits, 116)) ss13pusa.setRacnum(in.readInt());
        if (!BitSetUtil.get(bits, 117)) ss13pusa.setRacpi(in.readInt());
        if (!BitSetUtil.get(bits, 118)) ss13pusa.setRacsor(in.readInt());
        if (!BitSetUtil.get(bits, 119)) ss13pusa.setRacwht(in.readInt());
        if (!BitSetUtil.get(bits, 120)) ss13pusa.setRc(in.readInt());
        if (!BitSetUtil.get(bits, 121)) ss13pusa.setSciengp(in.readInt());
        if (!BitSetUtil.get(bits, 122)) ss13pusa.setSciengrlp(in.readInt());
        if (!BitSetUtil.get(bits, 123)) ss13pusa.setSfn(in.readInt());
        if (!BitSetUtil.get(bits, 124)) ss13pusa.setSfr(in.readInt());
        if (!BitSetUtil.get(bits, 125)) ss13pusa.setSocp(in.readInt());
        if (!BitSetUtil.get(bits, 126)) ss13pusa.setVps(in.readInt());
        if (!BitSetUtil.get(bits, 127)) ss13pusa.setWaob(in.readInt());
        if (!BitSetUtil.get(bits, 128)) ss13pusa.setFagep(in.readInt());
        if (!BitSetUtil.get(bits, 129)) ss13pusa.setFancp(in.readInt());
        if (!BitSetUtil.get(bits, 130)) ss13pusa.setFcitp(in.readInt());
        if (!BitSetUtil.get(bits, 131)) ss13pusa.setFcitwp(in.readInt());
        if (!BitSetUtil.get(bits, 132)) ss13pusa.setFcowp(in.readInt());
        if (!BitSetUtil.get(bits, 133)) ss13pusa.setFddrsp(in.readInt());
        if (!BitSetUtil.get(bits, 134)) ss13pusa.setFdearp(in.readInt());
        if (!BitSetUtil.get(bits, 135)) ss13pusa.setFdeyep(in.readInt());
        if (!BitSetUtil.get(bits, 136)) ss13pusa.setFdisp(in.readInt());
        if (!BitSetUtil.get(bits, 137)) ss13pusa.setFdoutp(in.readInt());
        if (!BitSetUtil.get(bits, 138)) ss13pusa.setFdphyp(in.readInt());
        if (!BitSetUtil.get(bits, 139)) ss13pusa.setFdratp(in.readInt());
        if (!BitSetUtil.get(bits, 140)) ss13pusa.setFdratxp(in.readInt());
        if (!BitSetUtil.get(bits, 141)) ss13pusa.setFdremp(in.readInt());
        if (!BitSetUtil.get(bits, 142)) ss13pusa.setFengp(in.readInt());
        if (!BitSetUtil.get(bits, 143)) ss13pusa.setFesrp(in.readInt());
        if (!BitSetUtil.get(bits, 144)) ss13pusa.setFferp(in.readInt());
        if (!BitSetUtil.get(bits, 145)) ss13pusa.setFfodp(in.readInt());
        if (!BitSetUtil.get(bits, 146)) ss13pusa.setFgclp(in.readInt());
        if (!BitSetUtil.get(bits, 147)) ss13pusa.setFgcmp(in.readInt());
        if (!BitSetUtil.get(bits, 148)) ss13pusa.setFgcrp(in.readInt());
        if (!BitSetUtil.get(bits, 149)) ss13pusa.setFhins1P(in.readInt());
        if (!BitSetUtil.get(bits, 150)) ss13pusa.setFhins2P(in.readInt());
        if (!BitSetUtil.get(bits, 151)) ss13pusa.setFhins3C(in.readInt());
        if (!BitSetUtil.get(bits, 152)) ss13pusa.setFhins3P(in.readInt());
        if (!BitSetUtil.get(bits, 153)) ss13pusa.setFhins4C(in.readInt());
        if (!BitSetUtil.get(bits, 154)) ss13pusa.setFhins4P(in.readInt());
        if (!BitSetUtil.get(bits, 155)) ss13pusa.setFhins5C(in.readInt());
        if (!BitSetUtil.get(bits, 156)) ss13pusa.setFhins5P(in.readInt());
        if (!BitSetUtil.get(bits, 157)) ss13pusa.setFhins6P(in.readInt());
        if (!BitSetUtil.get(bits, 158)) ss13pusa.setFhins7P(in.readInt());
        if (!BitSetUtil.get(bits, 159)) ss13pusa.setFhisp(in.readInt());
        if (!BitSetUtil.get(bits, 160)) ss13pusa.setFindp(in.readInt());
        if (!BitSetUtil.get(bits, 161)) ss13pusa.setFintp(in.readInt());
        if (!BitSetUtil.get(bits, 162)) ss13pusa.setFjwdp(in.readInt());
        if (!BitSetUtil.get(bits, 163)) ss13pusa.setFjwmnp(in.readInt());
        if (!BitSetUtil.get(bits, 164)) ss13pusa.setFjwrip(in.readInt());
        if (!BitSetUtil.get(bits, 165)) ss13pusa.setFjwtrp(in.readInt());
        if (!BitSetUtil.get(bits, 166)) ss13pusa.setFlanp(in.readInt());
        if (!BitSetUtil.get(bits, 167)) ss13pusa.setFlanxp(in.readInt());
        if (!BitSetUtil.get(bits, 168)) ss13pusa.setFmarhdp(in.readInt());
        if (!BitSetUtil.get(bits, 169)) ss13pusa.setFmarhmp(in.readInt());
        if (!BitSetUtil.get(bits, 170)) ss13pusa.setFmarhtp(in.readInt());
        if (!BitSetUtil.get(bits, 171)) ss13pusa.setFmarhwp(in.readInt());
        if (!BitSetUtil.get(bits, 172)) ss13pusa.setFmarhyp(in.readInt());
        if (!BitSetUtil.get(bits, 173)) ss13pusa.setFmarp(in.readInt());
        if (!BitSetUtil.get(bits, 174)) ss13pusa.setFmigp(in.readInt());
        if (!BitSetUtil.get(bits, 175)) ss13pusa.setFmigsp(in.readInt());
        if (!BitSetUtil.get(bits, 176)) ss13pusa.setFmilpp(in.readInt());
        if (!BitSetUtil.get(bits, 177)) ss13pusa.setFmilsp(in.readInt());
        if (!BitSetUtil.get(bits, 178)) ss13pusa.setFoccp(in.readInt());
        if (!BitSetUtil.get(bits, 179)) ss13pusa.setFoip(in.readInt());
        if (!BitSetUtil.get(bits, 180)) ss13pusa.setFpap(in.readInt());
        if (!BitSetUtil.get(bits, 181)) ss13pusa.setFpernp(in.readInt());
        if (!BitSetUtil.get(bits, 182)) ss13pusa.setFpincp(in.readInt());
        if (!BitSetUtil.get(bits, 183)) ss13pusa.setFpobp(in.readInt());
        if (!BitSetUtil.get(bits, 184)) ss13pusa.setFpowsp(in.readInt());
        if (!BitSetUtil.get(bits, 185)) ss13pusa.setFprivcovp(in.readInt());
        if (!BitSetUtil.get(bits, 186)) ss13pusa.setFpubcovp(in.readInt());
        if (!BitSetUtil.get(bits, 187)) ss13pusa.setFracp(in.readInt());
        if (!BitSetUtil.get(bits, 188)) ss13pusa.setFrelp(in.readInt());
        if (!BitSetUtil.get(bits, 189)) ss13pusa.setFretp(in.readInt());
        if (!BitSetUtil.get(bits, 190)) ss13pusa.setFschgp(in.readInt());
        if (!BitSetUtil.get(bits, 191)) ss13pusa.setFschlp(in.readInt());
        if (!BitSetUtil.get(bits, 192)) ss13pusa.setFschp(in.readInt());
        if (!BitSetUtil.get(bits, 193)) ss13pusa.setFsemp(in.readInt());
        if (!BitSetUtil.get(bits, 194)) ss13pusa.setFsexp(in.readInt());
        if (!BitSetUtil.get(bits, 195)) ss13pusa.setFssip(in.readInt());
        if (!BitSetUtil.get(bits, 196)) ss13pusa.setFssp(in.readInt());
        if (!BitSetUtil.get(bits, 197)) ss13pusa.setFwagp(in.readInt());
        if (!BitSetUtil.get(bits, 198)) ss13pusa.setFwkhp(in.readInt());
        if (!BitSetUtil.get(bits, 199)) ss13pusa.setFwklp(in.readInt());
        if (!BitSetUtil.get(bits, 200)) ss13pusa.setFwkwp(in.readInt());
        if (!BitSetUtil.get(bits, 201)) ss13pusa.setFwrkp(in.readInt());
        if (!BitSetUtil.get(bits, 202)) ss13pusa.setFyoep(in.readInt());
        return ss13pusa;
    }
}