package com.company.test.test.test.mytable.generated;

import com.company.test.test.test.mytable.MyTable;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table test.test.test.myTable.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedMyTable extends Entity<MyTable> {
    
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getId()} method.
     */
    final ComparableField<MyTable, Integer, Integer> ID = new ComparableFieldImpl<>(Identifier.ID, MyTable::getId, MyTable::setId, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getValue()} method.
     */
    final ComparableField<MyTable, Integer, Integer> VALUE = new ComparableFieldImpl<>(Identifier.VALUE, o -> o.getValue().orElse(null), MyTable::setValue, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getDate()} method.
     */
    final StringField<MyTable, String> DATE = new StringFieldImpl<>(Identifier.DATE, o -> o.getDate().orElse(null), MyTable::setDate, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getPerson()} method.
     */
    final StringField<MyTable, String> PERSON = new StringFieldImpl<>(Identifier.PERSON, o -> o.getPerson().orElse(null), MyTable::setPerson, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getCountry()} method.
     */
    final StringField<MyTable, String> COUNTRY = new StringFieldImpl<>(Identifier.COUNTRY, o -> o.getCountry().orElse(null), MyTable::setCountry, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getCompany()} method.
     */
    final StringField<MyTable, String> COMPANY = new StringFieldImpl<>(Identifier.COMPANY, o -> o.getCompany().orElse(null), MyTable::setCompany, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link MyTable} field that can be obtained
     * using the {@link MyTable#getQuantity()} method.
     */
    final ComparableField<MyTable, Integer, Integer> QUANTITY = new ComparableFieldImpl<>(Identifier.QUANTITY, o -> o.getQuantity().orElse(null), MyTable::setQuantity, new IntegerIdentityMapper(), false);
    
    /**
     * Returns the id of this MyTable. The id field corresponds to the database
     * column test.test.myTable.id.
     * 
     * @return the id of this MyTable
     */
    Integer getId();
    
    /**
     * Returns the value of this MyTable. The value field corresponds to the
     * database column test.test.myTable.value.
     * 
     * @return the value of this MyTable
     */
    Optional<Integer> getValue();
    
    /**
     * Returns the date of this MyTable. The date field corresponds to the
     * database column test.test.myTable.date.
     * 
     * @return the date of this MyTable
     */
    Optional<String> getDate();
    
    /**
     * Returns the person of this MyTable. The person field corresponds to the
     * database column test.test.myTable.person.
     * 
     * @return the person of this MyTable
     */
    Optional<String> getPerson();
    
    /**
     * Returns the country of this MyTable. The country field corresponds to the
     * database column test.test.myTable.country.
     * 
     * @return the country of this MyTable
     */
    Optional<String> getCountry();
    
    /**
     * Returns the company of this MyTable. The company field corresponds to the
     * database column test.test.myTable.company.
     * 
     * @return the company of this MyTable
     */
    Optional<String> getCompany();
    
    /**
     * Returns the quantity of this MyTable. The quantity field corresponds to
     * the database column test.test.myTable.quantity.
     * 
     * @return the quantity of this MyTable
     */
    Optional<Integer> getQuantity();
    
    /**
     * Sets the id of this MyTable. The id field corresponds to the database
     * column test.test.myTable.id.
     * 
     * @param id to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setId(Integer id);
    
    /**
     * Sets the value of this MyTable. The value field corresponds to the
     * database column test.test.myTable.value.
     * 
     * @param value to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setValue(Integer value);
    
    /**
     * Sets the date of this MyTable. The date field corresponds to the database
     * column test.test.myTable.date.
     * 
     * @param date to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setDate(String date);
    
    /**
     * Sets the person of this MyTable. The person field corresponds to the
     * database column test.test.myTable.person.
     * 
     * @param person to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setPerson(String person);
    
    /**
     * Sets the country of this MyTable. The country field corresponds to the
     * database column test.test.myTable.country.
     * 
     * @param country to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setCountry(String country);
    
    /**
     * Sets the company of this MyTable. The company field corresponds to the
     * database column test.test.myTable.company.
     * 
     * @param company to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setCompany(String company);
    
    /**
     * Sets the quantity of this MyTable. The quantity field corresponds to the
     * database column test.test.myTable.quantity.
     * 
     * @param quantity to set of this MyTable
     * @return this MyTable instance
     */
    MyTable setQuantity(Integer quantity);
    
    enum Identifier implements FieldIdentifier<MyTable> {
        
        ID ("id"),
        VALUE ("value"),
        DATE ("date"),
        PERSON ("person"),
        COUNTRY ("country"),
        COMPANY ("company"),
        QUANTITY ("quantity");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "test";
        }
        
        @Override
        public String schemaName() {
            return "test";
        }
        
        @Override
        public String tableName() {
            return "myTable";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}