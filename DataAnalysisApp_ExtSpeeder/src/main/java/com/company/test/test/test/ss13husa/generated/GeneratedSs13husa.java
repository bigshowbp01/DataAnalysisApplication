package com.company.test.test.test.ss13husa.generated;

import com.company.test.test.test.ss13husa.Ss13husa;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.internal.core.field.ComparableFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table test.test.test.ss13husa.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedSs13husa extends Entity<Ss13husa> {
    
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRt()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RT = new ComparableFieldImpl<>(Identifier.RT, o -> o.getRt().orElse(null), Ss13husa::setRt, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSerialno()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SERIALNO = new ComparableFieldImpl<>(Identifier.SERIALNO, o -> o.getSerialno().orElse(null), Ss13husa::setSerialno, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getDivision()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> DIVISION = new ComparableFieldImpl<>(Identifier.DIVISION, o -> o.getDivision().orElse(null), Ss13husa::setDivision, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getPuma()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> PUMA = new ComparableFieldImpl<>(Identifier.PUMA, o -> o.getPuma().orElse(null), Ss13husa::setPuma, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRegion()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> REGION = new ComparableFieldImpl<>(Identifier.REGION, o -> o.getRegion().orElse(null), Ss13husa::setRegion, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSt()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ST = new ComparableFieldImpl<>(Identifier.ST, o -> o.getSt().orElse(null), Ss13husa::setSt, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getAdjhsg()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ADJHSG = new ComparableFieldImpl<>(Identifier.ADJHSG, o -> o.getAdjhsg().orElse(null), Ss13husa::setAdjhsg, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getAdjinc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ADJINC = new ComparableFieldImpl<>(Identifier.ADJINC, o -> o.getAdjinc().orElse(null), Ss13husa::setAdjinc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getWgtp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> WGTP = new ComparableFieldImpl<>(Identifier.WGTP, o -> o.getWgtp().orElse(null), Ss13husa::setWgtp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NP = new ComparableFieldImpl<>(Identifier.NP, o -> o.getNp().orElse(null), Ss13husa::setNp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getType()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> TYPE = new ComparableFieldImpl<>(Identifier.TYPE, o -> o.getType().orElse(null), Ss13husa::setType, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getAccess()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ACCESS = new ComparableFieldImpl<>(Identifier.ACCESS, o -> o.getAccess().orElse(null), Ss13husa::setAccess, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getAcr()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ACR = new ComparableFieldImpl<>(Identifier.ACR, o -> o.getAcr().orElse(null), Ss13husa::setAcr, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getAgs()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> AGS = new ComparableFieldImpl<>(Identifier.AGS, o -> o.getAgs().orElse(null), Ss13husa::setAgs, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getBath()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> BATH = new ComparableFieldImpl<>(Identifier.BATH, o -> o.getBath().orElse(null), Ss13husa::setBath, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getBdsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> BDSP = new ComparableFieldImpl<>(Identifier.BDSP, o -> o.getBdsp().orElse(null), Ss13husa::setBdsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getBld()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> BLD = new ComparableFieldImpl<>(Identifier.BLD, o -> o.getBld().orElse(null), Ss13husa::setBld, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getBroadbnd()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> BROADBND = new ComparableFieldImpl<>(Identifier.BROADBND, o -> o.getBroadbnd().orElse(null), Ss13husa::setBroadbnd, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getBus()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> BUS = new ComparableFieldImpl<>(Identifier.BUS, o -> o.getBus().orElse(null), Ss13husa::setBus, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getCompothx()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> COMPOTHX = new ComparableFieldImpl<>(Identifier.COMPOTHX, o -> o.getCompothx().orElse(null), Ss13husa::setCompothx, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getConp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> CONP = new ComparableFieldImpl<>(Identifier.CONP, o -> o.getConp().orElse(null), Ss13husa::setConp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getDialup()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> DIALUP = new ComparableFieldImpl<>(Identifier.DIALUP, o -> o.getDialup().orElse(null), Ss13husa::setDialup, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getDsl()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> DSL = new ComparableFieldImpl<>(Identifier.DSL, o -> o.getDsl().orElse(null), Ss13husa::setDsl, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getElep()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> ELEP = new ComparableFieldImpl<>(Identifier.ELEP, o -> o.getElep().orElse(null), Ss13husa::setElep, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFiberop()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FIBEROP = new ComparableFieldImpl<>(Identifier.FIBEROP, o -> o.getFiberop().orElse(null), Ss13husa::setFiberop, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFs()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FS = new ComparableFieldImpl<>(Identifier.FS, o -> o.getFs().orElse(null), Ss13husa::setFs, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFulp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FULP = new ComparableFieldImpl<>(Identifier.FULP, o -> o.getFulp().orElse(null), Ss13husa::setFulp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getGasp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> GASP = new ComparableFieldImpl<>(Identifier.GASP, o -> o.getGasp().orElse(null), Ss13husa::setGasp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHandheld()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HANDHELD = new ComparableFieldImpl<>(Identifier.HANDHELD, o -> o.getHandheld().orElse(null), Ss13husa::setHandheld, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHfl()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HFL = new ComparableFieldImpl<>(Identifier.HFL, o -> o.getHfl().orElse(null), Ss13husa::setHfl, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getInsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> INSP = new ComparableFieldImpl<>(Identifier.INSP, o -> o.getInsp().orElse(null), Ss13husa::setInsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getLaptop()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> LAPTOP = new ComparableFieldImpl<>(Identifier.LAPTOP, o -> o.getLaptop().orElse(null), Ss13husa::setLaptop, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMhp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MHP = new ComparableFieldImpl<>(Identifier.MHP, o -> o.getMhp().orElse(null), Ss13husa::setMhp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getModem()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MODEM = new ComparableFieldImpl<>(Identifier.MODEM, o -> o.getModem().orElse(null), Ss13husa::setModem, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMrgi()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MRGI = new ComparableFieldImpl<>(Identifier.MRGI, o -> o.getMrgi().orElse(null), Ss13husa::setMrgi, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMrgp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MRGP = new ComparableFieldImpl<>(Identifier.MRGP, o -> o.getMrgp().orElse(null), Ss13husa::setMrgp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMrgt()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MRGT = new ComparableFieldImpl<>(Identifier.MRGT, o -> o.getMrgt().orElse(null), Ss13husa::setMrgt, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMrgx()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MRGX = new ComparableFieldImpl<>(Identifier.MRGX, o -> o.getMrgx().orElse(null), Ss13husa::setMrgx, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getOthsvcex()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> OTHSVCEX = new ComparableFieldImpl<>(Identifier.OTHSVCEX, o -> o.getOthsvcex().orElse(null), Ss13husa::setOthsvcex, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRefr()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> REFR = new ComparableFieldImpl<>(Identifier.REFR, o -> o.getRefr().orElse(null), Ss13husa::setRefr, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRmsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RMSP = new ComparableFieldImpl<>(Identifier.RMSP, o -> o.getRmsp().orElse(null), Ss13husa::setRmsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRntm()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RNTM = new ComparableFieldImpl<>(Identifier.RNTM, o -> o.getRntm().orElse(null), Ss13husa::setRntm, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRntp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RNTP = new ComparableFieldImpl<>(Identifier.RNTP, o -> o.getRntp().orElse(null), Ss13husa::setRntp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRwat()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RWAT = new ComparableFieldImpl<>(Identifier.RWAT, o -> o.getRwat().orElse(null), Ss13husa::setRwat, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getRwatpr()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RWATPR = new ComparableFieldImpl<>(Identifier.RWATPR, o -> o.getRwatpr().orElse(null), Ss13husa::setRwatpr, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSatellite()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SATELLITE = new ComparableFieldImpl<>(Identifier.SATELLITE, o -> o.getSatellite().orElse(null), Ss13husa::setSatellite, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSink()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SINK = new ComparableFieldImpl<>(Identifier.SINK, o -> o.getSink().orElse(null), Ss13husa::setSink, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSmp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SMP = new ComparableFieldImpl<>(Identifier.SMP, o -> o.getSmp().orElse(null), Ss13husa::setSmp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getStov()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> STOV = new ComparableFieldImpl<>(Identifier.STOV, o -> o.getStov().orElse(null), Ss13husa::setStov, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getTel()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> TEL = new ComparableFieldImpl<>(Identifier.TEL, o -> o.getTel().orElse(null), Ss13husa::setTel, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getTen()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> TEN = new ComparableFieldImpl<>(Identifier.TEN, o -> o.getTen().orElse(null), Ss13husa::setTen, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getToil()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> TOIL = new ComparableFieldImpl<>(Identifier.TOIL, o -> o.getToil().orElse(null), Ss13husa::setToil, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getVacs()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> VACS = new ComparableFieldImpl<>(Identifier.VACS, o -> o.getVacs().orElse(null), Ss13husa::setVacs, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getValp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> VALP = new ComparableFieldImpl<>(Identifier.VALP, o -> o.getValp().orElse(null), Ss13husa::setValp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getVeh()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> VEH = new ComparableFieldImpl<>(Identifier.VEH, o -> o.getVeh().orElse(null), Ss13husa::setVeh, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getWatp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> WATP = new ComparableFieldImpl<>(Identifier.WATP, o -> o.getWatp().orElse(null), Ss13husa::setWatp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getYbl()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> YBL = new ComparableFieldImpl<>(Identifier.YBL, o -> o.getYbl().orElse(null), Ss13husa::setYbl, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFes()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FES = new ComparableFieldImpl<>(Identifier.FES, o -> o.getFes().orElse(null), Ss13husa::setFes, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFfincp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FFINCP = new ComparableFieldImpl<>(Identifier.FFINCP, o -> o.getFfincp().orElse(null), Ss13husa::setFfincp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFgrntp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FGRNTP = new ComparableFieldImpl<>(Identifier.FGRNTP, o -> o.getFgrntp().orElse(null), Ss13husa::setFgrntp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFhincp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FHINCP = new ComparableFieldImpl<>(Identifier.FHINCP, o -> o.getFhincp().orElse(null), Ss13husa::setFhincp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFincp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FINCP = new ComparableFieldImpl<>(Identifier.FINCP, o -> o.getFincp().orElse(null), Ss13husa::setFincp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFparc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FPARC = new ComparableFieldImpl<>(Identifier.FPARC, o -> o.getFparc().orElse(null), Ss13husa::setFparc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsmocp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSMOCP = new ComparableFieldImpl<>(Identifier.FSMOCP, o -> o.getFsmocp().orElse(null), Ss13husa::setFsmocp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getGrntp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> GRNTP = new ComparableFieldImpl<>(Identifier.GRNTP, o -> o.getGrntp().orElse(null), Ss13husa::setGrntp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getGrpip()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> GRPIP = new ComparableFieldImpl<>(Identifier.GRPIP, o -> o.getGrpip().orElse(null), Ss13husa::setGrpip, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHhl()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HHL = new ComparableFieldImpl<>(Identifier.HHL, o -> o.getHhl().orElse(null), Ss13husa::setHhl, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHht()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HHT = new ComparableFieldImpl<>(Identifier.HHT, o -> o.getHht().orElse(null), Ss13husa::setHht, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHincp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HINCP = new ComparableFieldImpl<>(Identifier.HINCP, o -> o.getHincp().orElse(null), Ss13husa::setHincp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHugcl()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HUGCL = new ComparableFieldImpl<>(Identifier.HUGCL, o -> o.getHugcl().orElse(null), Ss13husa::setHugcl, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHupac()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HUPAC = new ComparableFieldImpl<>(Identifier.HUPAC, o -> o.getHupac().orElse(null), Ss13husa::setHupac, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHupaoc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HUPAOC = new ComparableFieldImpl<>(Identifier.HUPAOC, o -> o.getHupaoc().orElse(null), Ss13husa::setHupaoc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getHuparc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> HUPARC = new ComparableFieldImpl<>(Identifier.HUPARC, o -> o.getHuparc().orElse(null), Ss13husa::setHuparc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getKit()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> KIT = new ComparableFieldImpl<>(Identifier.KIT, o -> o.getKit().orElse(null), Ss13husa::setKit, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getLngi()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> LNGI = new ComparableFieldImpl<>(Identifier.LNGI, o -> o.getLngi().orElse(null), Ss13husa::setLngi, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMultg()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MULTG = new ComparableFieldImpl<>(Identifier.MULTG, o -> o.getMultg().orElse(null), Ss13husa::setMultg, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getMv()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> MV = new ComparableFieldImpl<>(Identifier.MV, o -> o.getMv().orElse(null), Ss13husa::setMv, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNoc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NOC = new ComparableFieldImpl<>(Identifier.NOC, o -> o.getNoc().orElse(null), Ss13husa::setNoc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNpf()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NPF = new ComparableFieldImpl<>(Identifier.NPF, o -> o.getNpf().orElse(null), Ss13husa::setNpf, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNpp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NPP = new ComparableFieldImpl<>(Identifier.NPP, o -> o.getNpp().orElse(null), Ss13husa::setNpp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNr()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NR = new ComparableFieldImpl<>(Identifier.NR, o -> o.getNr().orElse(null), Ss13husa::setNr, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getNrc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> NRC = new ComparableFieldImpl<>(Identifier.NRC, o -> o.getNrc().orElse(null), Ss13husa::setNrc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getOcpip()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> OCPIP = new ComparableFieldImpl<>(Identifier.OCPIP, o -> o.getOcpip().orElse(null), Ss13husa::setOcpip, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getPartner()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> PARTNER = new ComparableFieldImpl<>(Identifier.PARTNER, o -> o.getPartner().orElse(null), Ss13husa::setPartner, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getPlm()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> PLM = new ComparableFieldImpl<>(Identifier.PLM, o -> o.getPlm().orElse(null), Ss13husa::setPlm, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getPsf()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> PSF = new ComparableFieldImpl<>(Identifier.PSF, o -> o.getPsf().orElse(null), Ss13husa::setPsf, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getR18()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> R18 = new ComparableFieldImpl<>(Identifier.R18, o -> o.getR18().orElse(null), Ss13husa::setR18, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getR60()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> R60 = new ComparableFieldImpl<>(Identifier.R60, o -> o.getR60().orElse(null), Ss13husa::setR60, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getR65()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> R65 = new ComparableFieldImpl<>(Identifier.R65, o -> o.getR65().orElse(null), Ss13husa::setR65, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getResmode()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> RESMODE = new ComparableFieldImpl<>(Identifier.RESMODE, o -> o.getResmode().orElse(null), Ss13husa::setResmode, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSmocp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SMOCP = new ComparableFieldImpl<>(Identifier.SMOCP, o -> o.getSmocp().orElse(null), Ss13husa::setSmocp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSmx()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SMX = new ComparableFieldImpl<>(Identifier.SMX, o -> o.getSmx().orElse(null), Ss13husa::setSmx, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSrnt()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SRNT = new ComparableFieldImpl<>(Identifier.SRNT, o -> o.getSrnt().orElse(null), Ss13husa::setSrnt, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSsmc()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SSMC = new ComparableFieldImpl<>(Identifier.SSMC, o -> o.getSsmc().orElse(null), Ss13husa::setSsmc, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getSval()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> SVAL = new ComparableFieldImpl<>(Identifier.SVAL, o -> o.getSval().orElse(null), Ss13husa::setSval, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getTaxp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> TAXP = new ComparableFieldImpl<>(Identifier.TAXP, o -> o.getTaxp().orElse(null), Ss13husa::setTaxp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getWif()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> WIF = new ComparableFieldImpl<>(Identifier.WIF, o -> o.getWif().orElse(null), Ss13husa::setWif, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getWkexrel()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> WKEXREL = new ComparableFieldImpl<>(Identifier.WKEXREL, o -> o.getWkexrel().orElse(null), Ss13husa::setWkexrel, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getWorkstat()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> WORKSTAT = new ComparableFieldImpl<>(Identifier.WORKSTAT, o -> o.getWorkstat().orElse(null), Ss13husa::setWorkstat, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFaccessp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FACCESSP = new ComparableFieldImpl<>(Identifier.FACCESSP, o -> o.getFaccessp().orElse(null), Ss13husa::setFaccessp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFacrp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FACRP = new ComparableFieldImpl<>(Identifier.FACRP, o -> o.getFacrp().orElse(null), Ss13husa::setFacrp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFagsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FAGSP = new ComparableFieldImpl<>(Identifier.FAGSP, o -> o.getFagsp().orElse(null), Ss13husa::setFagsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFbathp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FBATHP = new ComparableFieldImpl<>(Identifier.FBATHP, o -> o.getFbathp().orElse(null), Ss13husa::setFbathp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFbdsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FBDSP = new ComparableFieldImpl<>(Identifier.FBDSP, o -> o.getFbdsp().orElse(null), Ss13husa::setFbdsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFbldp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FBLDP = new ComparableFieldImpl<>(Identifier.FBLDP, o -> o.getFbldp().orElse(null), Ss13husa::setFbldp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFbroadbndp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FBROADBNDP = new ComparableFieldImpl<>(Identifier.FBROADBNDP, o -> o.getFbroadbndp().orElse(null), Ss13husa::setFbroadbndp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFbusp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FBUSP = new ComparableFieldImpl<>(Identifier.FBUSP, o -> o.getFbusp().orElse(null), Ss13husa::setFbusp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFcompothxp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FCOMPOTHXP = new ComparableFieldImpl<>(Identifier.FCOMPOTHXP, o -> o.getFcompothxp().orElse(null), Ss13husa::setFcompothxp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFconp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FCONP = new ComparableFieldImpl<>(Identifier.FCONP, o -> o.getFconp().orElse(null), Ss13husa::setFconp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFdialupp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FDIALUPP = new ComparableFieldImpl<>(Identifier.FDIALUPP, o -> o.getFdialupp().orElse(null), Ss13husa::setFdialupp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFdslp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FDSLP = new ComparableFieldImpl<>(Identifier.FDSLP, o -> o.getFdslp().orElse(null), Ss13husa::setFdslp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFelep()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FELEP = new ComparableFieldImpl<>(Identifier.FELEP, o -> o.getFelep().orElse(null), Ss13husa::setFelep, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFfiberopp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FFIBEROPP = new ComparableFieldImpl<>(Identifier.FFIBEROPP, o -> o.getFfiberopp().orElse(null), Ss13husa::setFfiberopp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFfsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FFSP = new ComparableFieldImpl<>(Identifier.FFSP, o -> o.getFfsp().orElse(null), Ss13husa::setFfsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFfulp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FFULP = new ComparableFieldImpl<>(Identifier.FFULP, o -> o.getFfulp().orElse(null), Ss13husa::setFfulp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFgasp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FGASP = new ComparableFieldImpl<>(Identifier.FGASP, o -> o.getFgasp().orElse(null), Ss13husa::setFgasp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFhandheldp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FHANDHELDP = new ComparableFieldImpl<>(Identifier.FHANDHELDP, o -> o.getFhandheldp().orElse(null), Ss13husa::setFhandheldp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFhflp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FHFLP = new ComparableFieldImpl<>(Identifier.FHFLP, o -> o.getFhflp().orElse(null), Ss13husa::setFhflp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFinsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FINSP = new ComparableFieldImpl<>(Identifier.FINSP, o -> o.getFinsp().orElse(null), Ss13husa::setFinsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFkitp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FKITP = new ComparableFieldImpl<>(Identifier.FKITP, o -> o.getFkitp().orElse(null), Ss13husa::setFkitp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFlaptopp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FLAPTOPP = new ComparableFieldImpl<>(Identifier.FLAPTOPP, o -> o.getFlaptopp().orElse(null), Ss13husa::setFlaptopp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmhp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMHP = new ComparableFieldImpl<>(Identifier.FMHP, o -> o.getFmhp().orElse(null), Ss13husa::setFmhp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmodemp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMODEMP = new ComparableFieldImpl<>(Identifier.FMODEMP, o -> o.getFmodemp().orElse(null), Ss13husa::setFmodemp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmrgip()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMRGIP = new ComparableFieldImpl<>(Identifier.FMRGIP, o -> o.getFmrgip().orElse(null), Ss13husa::setFmrgip, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmrgp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMRGP = new ComparableFieldImpl<>(Identifier.FMRGP, o -> o.getFmrgp().orElse(null), Ss13husa::setFmrgp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmrgtp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMRGTP = new ComparableFieldImpl<>(Identifier.FMRGTP, o -> o.getFmrgtp().orElse(null), Ss13husa::setFmrgtp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmrgxp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMRGXP = new ComparableFieldImpl<>(Identifier.FMRGXP, o -> o.getFmrgxp().orElse(null), Ss13husa::setFmrgxp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFmvp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FMVP = new ComparableFieldImpl<>(Identifier.FMVP, o -> o.getFmvp().orElse(null), Ss13husa::setFmvp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFothsvcexp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FOTHSVCEXP = new ComparableFieldImpl<>(Identifier.FOTHSVCEXP, o -> o.getFothsvcexp().orElse(null), Ss13husa::setFothsvcexp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFplmp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FPLMP = new ComparableFieldImpl<>(Identifier.FPLMP, o -> o.getFplmp().orElse(null), Ss13husa::setFplmp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrefrp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FREFRP = new ComparableFieldImpl<>(Identifier.FREFRP, o -> o.getFrefrp().orElse(null), Ss13husa::setFrefrp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrmsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FRMSP = new ComparableFieldImpl<>(Identifier.FRMSP, o -> o.getFrmsp().orElse(null), Ss13husa::setFrmsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrntmp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FRNTMP = new ComparableFieldImpl<>(Identifier.FRNTMP, o -> o.getFrntmp().orElse(null), Ss13husa::setFrntmp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrntp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FRNTP = new ComparableFieldImpl<>(Identifier.FRNTP, o -> o.getFrntp().orElse(null), Ss13husa::setFrntp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrwatp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FRWATP = new ComparableFieldImpl<>(Identifier.FRWATP, o -> o.getFrwatp().orElse(null), Ss13husa::setFrwatp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFrwatprp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FRWATPRP = new ComparableFieldImpl<>(Identifier.FRWATPRP, o -> o.getFrwatprp().orElse(null), Ss13husa::setFrwatprp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsatellitep()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSATELLITEP = new ComparableFieldImpl<>(Identifier.FSATELLITEP, o -> o.getFsatellitep().orElse(null), Ss13husa::setFsatellitep, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsinkp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSINKP = new ComparableFieldImpl<>(Identifier.FSINKP, o -> o.getFsinkp().orElse(null), Ss13husa::setFsinkp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsmp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSMP = new ComparableFieldImpl<>(Identifier.FSMP, o -> o.getFsmp().orElse(null), Ss13husa::setFsmp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsmxhp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSMXHP = new ComparableFieldImpl<>(Identifier.FSMXHP, o -> o.getFsmxhp().orElse(null), Ss13husa::setFsmxhp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFsmxsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSMXSP = new ComparableFieldImpl<>(Identifier.FSMXSP, o -> o.getFsmxsp().orElse(null), Ss13husa::setFsmxsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFstovp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FSTOVP = new ComparableFieldImpl<>(Identifier.FSTOVP, o -> o.getFstovp().orElse(null), Ss13husa::setFstovp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFtaxp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FTAXP = new ComparableFieldImpl<>(Identifier.FTAXP, o -> o.getFtaxp().orElse(null), Ss13husa::setFtaxp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFtelp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FTELP = new ComparableFieldImpl<>(Identifier.FTELP, o -> o.getFtelp().orElse(null), Ss13husa::setFtelp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFtenp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FTENP = new ComparableFieldImpl<>(Identifier.FTENP, o -> o.getFtenp().orElse(null), Ss13husa::setFtenp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFtoilp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FTOILP = new ComparableFieldImpl<>(Identifier.FTOILP, o -> o.getFtoilp().orElse(null), Ss13husa::setFtoilp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFvacsp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FVACSP = new ComparableFieldImpl<>(Identifier.FVACSP, o -> o.getFvacsp().orElse(null), Ss13husa::setFvacsp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFvalp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FVALP = new ComparableFieldImpl<>(Identifier.FVALP, o -> o.getFvalp().orElse(null), Ss13husa::setFvalp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFvehp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FVEHP = new ComparableFieldImpl<>(Identifier.FVEHP, o -> o.getFvehp().orElse(null), Ss13husa::setFvehp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFwatp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FWATP = new ComparableFieldImpl<>(Identifier.FWATP, o -> o.getFwatp().orElse(null), Ss13husa::setFwatp, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Ss13husa} field that can be obtained
     * using the {@link Ss13husa#getFyblp()} method.
     */
    final ComparableField<Ss13husa, Integer, Integer> FYBLP = new ComparableFieldImpl<>(Identifier.FYBLP, o -> o.getFyblp().orElse(null), Ss13husa::setFyblp, new IntegerIdentityMapper(), false);
    
    /**
     * Returns the rt of this Ss13husa. The rt field corresponds to the database
     * column test.test.ss13husa.RT.
     * 
     * @return the rt of this Ss13husa
     */
    Optional<Integer> getRt();
    
    /**
     * Returns the serialno of this Ss13husa. The serialno field corresponds to
     * the database column test.test.ss13husa.SERIALNO.
     * 
     * @return the serialno of this Ss13husa
     */
    Optional<Integer> getSerialno();
    
    /**
     * Returns the division of this Ss13husa. The division field corresponds to
     * the database column test.test.ss13husa.DIVISION.
     * 
     * @return the division of this Ss13husa
     */
    Optional<Integer> getDivision();
    
    /**
     * Returns the puma of this Ss13husa. The puma field corresponds to the
     * database column test.test.ss13husa.PUMA.
     * 
     * @return the puma of this Ss13husa
     */
    Optional<Integer> getPuma();
    
    /**
     * Returns the region of this Ss13husa. The region field corresponds to the
     * database column test.test.ss13husa.REGION.
     * 
     * @return the region of this Ss13husa
     */
    Optional<Integer> getRegion();
    
    /**
     * Returns the st of this Ss13husa. The st field corresponds to the database
     * column test.test.ss13husa.ST.
     * 
     * @return the st of this Ss13husa
     */
    Optional<Integer> getSt();
    
    /**
     * Returns the adjhsg of this Ss13husa. The adjhsg field corresponds to the
     * database column test.test.ss13husa.ADJHSG.
     * 
     * @return the adjhsg of this Ss13husa
     */
    Optional<Integer> getAdjhsg();
    
    /**
     * Returns the adjinc of this Ss13husa. The adjinc field corresponds to the
     * database column test.test.ss13husa.ADJINC.
     * 
     * @return the adjinc of this Ss13husa
     */
    Optional<Integer> getAdjinc();
    
    /**
     * Returns the wgtp of this Ss13husa. The wgtp field corresponds to the
     * database column test.test.ss13husa.WGTP.
     * 
     * @return the wgtp of this Ss13husa
     */
    Optional<Integer> getWgtp();
    
    /**
     * Returns the np of this Ss13husa. The np field corresponds to the database
     * column test.test.ss13husa.NP.
     * 
     * @return the np of this Ss13husa
     */
    Optional<Integer> getNp();
    
    /**
     * Returns the type of this Ss13husa. The type field corresponds to the
     * database column test.test.ss13husa.TYPE.
     * 
     * @return the type of this Ss13husa
     */
    Optional<Integer> getType();
    
    /**
     * Returns the access of this Ss13husa. The access field corresponds to the
     * database column test.test.ss13husa.ACCESS.
     * 
     * @return the access of this Ss13husa
     */
    Optional<Integer> getAccess();
    
    /**
     * Returns the acr of this Ss13husa. The acr field corresponds to the
     * database column test.test.ss13husa.ACR.
     * 
     * @return the acr of this Ss13husa
     */
    Optional<Integer> getAcr();
    
    /**
     * Returns the ags of this Ss13husa. The ags field corresponds to the
     * database column test.test.ss13husa.AGS.
     * 
     * @return the ags of this Ss13husa
     */
    Optional<Integer> getAgs();
    
    /**
     * Returns the bath of this Ss13husa. The bath field corresponds to the
     * database column test.test.ss13husa.BATH.
     * 
     * @return the bath of this Ss13husa
     */
    Optional<Integer> getBath();
    
    /**
     * Returns the bdsp of this Ss13husa. The bdsp field corresponds to the
     * database column test.test.ss13husa.BDSP.
     * 
     * @return the bdsp of this Ss13husa
     */
    Optional<Integer> getBdsp();
    
    /**
     * Returns the bld of this Ss13husa. The bld field corresponds to the
     * database column test.test.ss13husa.BLD.
     * 
     * @return the bld of this Ss13husa
     */
    Optional<Integer> getBld();
    
    /**
     * Returns the broadbnd of this Ss13husa. The broadbnd field corresponds to
     * the database column test.test.ss13husa.BROADBND.
     * 
     * @return the broadbnd of this Ss13husa
     */
    Optional<Integer> getBroadbnd();
    
    /**
     * Returns the bus of this Ss13husa. The bus field corresponds to the
     * database column test.test.ss13husa.BUS.
     * 
     * @return the bus of this Ss13husa
     */
    Optional<Integer> getBus();
    
    /**
     * Returns the compothx of this Ss13husa. The compothx field corresponds to
     * the database column test.test.ss13husa.COMPOTHX.
     * 
     * @return the compothx of this Ss13husa
     */
    Optional<Integer> getCompothx();
    
    /**
     * Returns the conp of this Ss13husa. The conp field corresponds to the
     * database column test.test.ss13husa.CONP.
     * 
     * @return the conp of this Ss13husa
     */
    Optional<Integer> getConp();
    
    /**
     * Returns the dialup of this Ss13husa. The dialup field corresponds to the
     * database column test.test.ss13husa.DIALUP.
     * 
     * @return the dialup of this Ss13husa
     */
    Optional<Integer> getDialup();
    
    /**
     * Returns the dsl of this Ss13husa. The dsl field corresponds to the
     * database column test.test.ss13husa.DSL.
     * 
     * @return the dsl of this Ss13husa
     */
    Optional<Integer> getDsl();
    
    /**
     * Returns the elep of this Ss13husa. The elep field corresponds to the
     * database column test.test.ss13husa.ELEP.
     * 
     * @return the elep of this Ss13husa
     */
    Optional<Integer> getElep();
    
    /**
     * Returns the fiberop of this Ss13husa. The fiberop field corresponds to the
     * database column test.test.ss13husa.FIBEROP.
     * 
     * @return the fiberop of this Ss13husa
     */
    Optional<Integer> getFiberop();
    
    /**
     * Returns the fs of this Ss13husa. The fs field corresponds to the database
     * column test.test.ss13husa.FS.
     * 
     * @return the fs of this Ss13husa
     */
    Optional<Integer> getFs();
    
    /**
     * Returns the fulp of this Ss13husa. The fulp field corresponds to the
     * database column test.test.ss13husa.FULP.
     * 
     * @return the fulp of this Ss13husa
     */
    Optional<Integer> getFulp();
    
    /**
     * Returns the gasp of this Ss13husa. The gasp field corresponds to the
     * database column test.test.ss13husa.GASP.
     * 
     * @return the gasp of this Ss13husa
     */
    Optional<Integer> getGasp();
    
    /**
     * Returns the handheld of this Ss13husa. The handheld field corresponds to
     * the database column test.test.ss13husa.HANDHELD.
     * 
     * @return the handheld of this Ss13husa
     */
    Optional<Integer> getHandheld();
    
    /**
     * Returns the hfl of this Ss13husa. The hfl field corresponds to the
     * database column test.test.ss13husa.HFL.
     * 
     * @return the hfl of this Ss13husa
     */
    Optional<Integer> getHfl();
    
    /**
     * Returns the insp of this Ss13husa. The insp field corresponds to the
     * database column test.test.ss13husa.INSP.
     * 
     * @return the insp of this Ss13husa
     */
    Optional<Integer> getInsp();
    
    /**
     * Returns the laptop of this Ss13husa. The laptop field corresponds to the
     * database column test.test.ss13husa.LAPTOP.
     * 
     * @return the laptop of this Ss13husa
     */
    Optional<Integer> getLaptop();
    
    /**
     * Returns the mhp of this Ss13husa. The mhp field corresponds to the
     * database column test.test.ss13husa.MHP.
     * 
     * @return the mhp of this Ss13husa
     */
    Optional<Integer> getMhp();
    
    /**
     * Returns the modem of this Ss13husa. The modem field corresponds to the
     * database column test.test.ss13husa.MODEM.
     * 
     * @return the modem of this Ss13husa
     */
    Optional<Integer> getModem();
    
    /**
     * Returns the mrgi of this Ss13husa. The mrgi field corresponds to the
     * database column test.test.ss13husa.MRGI.
     * 
     * @return the mrgi of this Ss13husa
     */
    Optional<Integer> getMrgi();
    
    /**
     * Returns the mrgp of this Ss13husa. The mrgp field corresponds to the
     * database column test.test.ss13husa.MRGP.
     * 
     * @return the mrgp of this Ss13husa
     */
    Optional<Integer> getMrgp();
    
    /**
     * Returns the mrgt of this Ss13husa. The mrgt field corresponds to the
     * database column test.test.ss13husa.MRGT.
     * 
     * @return the mrgt of this Ss13husa
     */
    Optional<Integer> getMrgt();
    
    /**
     * Returns the mrgx of this Ss13husa. The mrgx field corresponds to the
     * database column test.test.ss13husa.MRGX.
     * 
     * @return the mrgx of this Ss13husa
     */
    Optional<Integer> getMrgx();
    
    /**
     * Returns the othsvcex of this Ss13husa. The othsvcex field corresponds to
     * the database column test.test.ss13husa.OTHSVCEX.
     * 
     * @return the othsvcex of this Ss13husa
     */
    Optional<Integer> getOthsvcex();
    
    /**
     * Returns the refr of this Ss13husa. The refr field corresponds to the
     * database column test.test.ss13husa.REFR.
     * 
     * @return the refr of this Ss13husa
     */
    Optional<Integer> getRefr();
    
    /**
     * Returns the rmsp of this Ss13husa. The rmsp field corresponds to the
     * database column test.test.ss13husa.RMSP.
     * 
     * @return the rmsp of this Ss13husa
     */
    Optional<Integer> getRmsp();
    
    /**
     * Returns the rntm of this Ss13husa. The rntm field corresponds to the
     * database column test.test.ss13husa.RNTM.
     * 
     * @return the rntm of this Ss13husa
     */
    Optional<Integer> getRntm();
    
    /**
     * Returns the rntp of this Ss13husa. The rntp field corresponds to the
     * database column test.test.ss13husa.RNTP.
     * 
     * @return the rntp of this Ss13husa
     */
    Optional<Integer> getRntp();
    
    /**
     * Returns the rwat of this Ss13husa. The rwat field corresponds to the
     * database column test.test.ss13husa.RWAT.
     * 
     * @return the rwat of this Ss13husa
     */
    Optional<Integer> getRwat();
    
    /**
     * Returns the rwatpr of this Ss13husa. The rwatpr field corresponds to the
     * database column test.test.ss13husa.RWATPR.
     * 
     * @return the rwatpr of this Ss13husa
     */
    Optional<Integer> getRwatpr();
    
    /**
     * Returns the satellite of this Ss13husa. The satellite field corresponds to
     * the database column test.test.ss13husa.SATELLITE.
     * 
     * @return the satellite of this Ss13husa
     */
    Optional<Integer> getSatellite();
    
    /**
     * Returns the sink of this Ss13husa. The sink field corresponds to the
     * database column test.test.ss13husa.SINK.
     * 
     * @return the sink of this Ss13husa
     */
    Optional<Integer> getSink();
    
    /**
     * Returns the smp of this Ss13husa. The smp field corresponds to the
     * database column test.test.ss13husa.SMP.
     * 
     * @return the smp of this Ss13husa
     */
    Optional<Integer> getSmp();
    
    /**
     * Returns the stov of this Ss13husa. The stov field corresponds to the
     * database column test.test.ss13husa.STOV.
     * 
     * @return the stov of this Ss13husa
     */
    Optional<Integer> getStov();
    
    /**
     * Returns the tel of this Ss13husa. The tel field corresponds to the
     * database column test.test.ss13husa.TEL.
     * 
     * @return the tel of this Ss13husa
     */
    Optional<Integer> getTel();
    
    /**
     * Returns the ten of this Ss13husa. The ten field corresponds to the
     * database column test.test.ss13husa.TEN.
     * 
     * @return the ten of this Ss13husa
     */
    Optional<Integer> getTen();
    
    /**
     * Returns the toil of this Ss13husa. The toil field corresponds to the
     * database column test.test.ss13husa.TOIL.
     * 
     * @return the toil of this Ss13husa
     */
    Optional<Integer> getToil();
    
    /**
     * Returns the vacs of this Ss13husa. The vacs field corresponds to the
     * database column test.test.ss13husa.VACS.
     * 
     * @return the vacs of this Ss13husa
     */
    Optional<Integer> getVacs();
    
    /**
     * Returns the valp of this Ss13husa. The valp field corresponds to the
     * database column test.test.ss13husa.VALP.
     * 
     * @return the valp of this Ss13husa
     */
    Optional<Integer> getValp();
    
    /**
     * Returns the veh of this Ss13husa. The veh field corresponds to the
     * database column test.test.ss13husa.VEH.
     * 
     * @return the veh of this Ss13husa
     */
    Optional<Integer> getVeh();
    
    /**
     * Returns the watp of this Ss13husa. The watp field corresponds to the
     * database column test.test.ss13husa.WATP.
     * 
     * @return the watp of this Ss13husa
     */
    Optional<Integer> getWatp();
    
    /**
     * Returns the ybl of this Ss13husa. The ybl field corresponds to the
     * database column test.test.ss13husa.YBL.
     * 
     * @return the ybl of this Ss13husa
     */
    Optional<Integer> getYbl();
    
    /**
     * Returns the fes of this Ss13husa. The fes field corresponds to the
     * database column test.test.ss13husa.FES.
     * 
     * @return the fes of this Ss13husa
     */
    Optional<Integer> getFes();
    
    /**
     * Returns the ffincp of this Ss13husa. The ffincp field corresponds to the
     * database column test.test.ss13husa.FFINCP.
     * 
     * @return the ffincp of this Ss13husa
     */
    Optional<Integer> getFfincp();
    
    /**
     * Returns the fgrntp of this Ss13husa. The fgrntp field corresponds to the
     * database column test.test.ss13husa.FGRNTP.
     * 
     * @return the fgrntp of this Ss13husa
     */
    Optional<Integer> getFgrntp();
    
    /**
     * Returns the fhincp of this Ss13husa. The fhincp field corresponds to the
     * database column test.test.ss13husa.FHINCP.
     * 
     * @return the fhincp of this Ss13husa
     */
    Optional<Integer> getFhincp();
    
    /**
     * Returns the fincp of this Ss13husa. The fincp field corresponds to the
     * database column test.test.ss13husa.FINCP.
     * 
     * @return the fincp of this Ss13husa
     */
    Optional<Integer> getFincp();
    
    /**
     * Returns the fparc of this Ss13husa. The fparc field corresponds to the
     * database column test.test.ss13husa.FPARC.
     * 
     * @return the fparc of this Ss13husa
     */
    Optional<Integer> getFparc();
    
    /**
     * Returns the fsmocp of this Ss13husa. The fsmocp field corresponds to the
     * database column test.test.ss13husa.FSMOCP.
     * 
     * @return the fsmocp of this Ss13husa
     */
    Optional<Integer> getFsmocp();
    
    /**
     * Returns the grntp of this Ss13husa. The grntp field corresponds to the
     * database column test.test.ss13husa.GRNTP.
     * 
     * @return the grntp of this Ss13husa
     */
    Optional<Integer> getGrntp();
    
    /**
     * Returns the grpip of this Ss13husa. The grpip field corresponds to the
     * database column test.test.ss13husa.GRPIP.
     * 
     * @return the grpip of this Ss13husa
     */
    Optional<Integer> getGrpip();
    
    /**
     * Returns the hhl of this Ss13husa. The hhl field corresponds to the
     * database column test.test.ss13husa.HHL.
     * 
     * @return the hhl of this Ss13husa
     */
    Optional<Integer> getHhl();
    
    /**
     * Returns the hht of this Ss13husa. The hht field corresponds to the
     * database column test.test.ss13husa.HHT.
     * 
     * @return the hht of this Ss13husa
     */
    Optional<Integer> getHht();
    
    /**
     * Returns the hincp of this Ss13husa. The hincp field corresponds to the
     * database column test.test.ss13husa.HINCP.
     * 
     * @return the hincp of this Ss13husa
     */
    Optional<Integer> getHincp();
    
    /**
     * Returns the hugcl of this Ss13husa. The hugcl field corresponds to the
     * database column test.test.ss13husa.HUGCL.
     * 
     * @return the hugcl of this Ss13husa
     */
    Optional<Integer> getHugcl();
    
    /**
     * Returns the hupac of this Ss13husa. The hupac field corresponds to the
     * database column test.test.ss13husa.HUPAC.
     * 
     * @return the hupac of this Ss13husa
     */
    Optional<Integer> getHupac();
    
    /**
     * Returns the hupaoc of this Ss13husa. The hupaoc field corresponds to the
     * database column test.test.ss13husa.HUPAOC.
     * 
     * @return the hupaoc of this Ss13husa
     */
    Optional<Integer> getHupaoc();
    
    /**
     * Returns the huparc of this Ss13husa. The huparc field corresponds to the
     * database column test.test.ss13husa.HUPARC.
     * 
     * @return the huparc of this Ss13husa
     */
    Optional<Integer> getHuparc();
    
    /**
     * Returns the kit of this Ss13husa. The kit field corresponds to the
     * database column test.test.ss13husa.KIT.
     * 
     * @return the kit of this Ss13husa
     */
    Optional<Integer> getKit();
    
    /**
     * Returns the lngi of this Ss13husa. The lngi field corresponds to the
     * database column test.test.ss13husa.LNGI.
     * 
     * @return the lngi of this Ss13husa
     */
    Optional<Integer> getLngi();
    
    /**
     * Returns the multg of this Ss13husa. The multg field corresponds to the
     * database column test.test.ss13husa.MULTG.
     * 
     * @return the multg of this Ss13husa
     */
    Optional<Integer> getMultg();
    
    /**
     * Returns the mv of this Ss13husa. The mv field corresponds to the database
     * column test.test.ss13husa.MV.
     * 
     * @return the mv of this Ss13husa
     */
    Optional<Integer> getMv();
    
    /**
     * Returns the noc of this Ss13husa. The noc field corresponds to the
     * database column test.test.ss13husa.NOC.
     * 
     * @return the noc of this Ss13husa
     */
    Optional<Integer> getNoc();
    
    /**
     * Returns the npf of this Ss13husa. The npf field corresponds to the
     * database column test.test.ss13husa.NPF.
     * 
     * @return the npf of this Ss13husa
     */
    Optional<Integer> getNpf();
    
    /**
     * Returns the npp of this Ss13husa. The npp field corresponds to the
     * database column test.test.ss13husa.NPP.
     * 
     * @return the npp of this Ss13husa
     */
    Optional<Integer> getNpp();
    
    /**
     * Returns the nr of this Ss13husa. The nr field corresponds to the database
     * column test.test.ss13husa.NR.
     * 
     * @return the nr of this Ss13husa
     */
    Optional<Integer> getNr();
    
    /**
     * Returns the nrc of this Ss13husa. The nrc field corresponds to the
     * database column test.test.ss13husa.NRC.
     * 
     * @return the nrc of this Ss13husa
     */
    Optional<Integer> getNrc();
    
    /**
     * Returns the ocpip of this Ss13husa. The ocpip field corresponds to the
     * database column test.test.ss13husa.OCPIP.
     * 
     * @return the ocpip of this Ss13husa
     */
    Optional<Integer> getOcpip();
    
    /**
     * Returns the partner of this Ss13husa. The partner field corresponds to the
     * database column test.test.ss13husa.PARTNER.
     * 
     * @return the partner of this Ss13husa
     */
    Optional<Integer> getPartner();
    
    /**
     * Returns the plm of this Ss13husa. The plm field corresponds to the
     * database column test.test.ss13husa.PLM.
     * 
     * @return the plm of this Ss13husa
     */
    Optional<Integer> getPlm();
    
    /**
     * Returns the psf of this Ss13husa. The psf field corresponds to the
     * database column test.test.ss13husa.PSF.
     * 
     * @return the psf of this Ss13husa
     */
    Optional<Integer> getPsf();
    
    /**
     * Returns the r18 of this Ss13husa. The r18 field corresponds to the
     * database column test.test.ss13husa.R18.
     * 
     * @return the r18 of this Ss13husa
     */
    Optional<Integer> getR18();
    
    /**
     * Returns the r60 of this Ss13husa. The r60 field corresponds to the
     * database column test.test.ss13husa.R60.
     * 
     * @return the r60 of this Ss13husa
     */
    Optional<Integer> getR60();
    
    /**
     * Returns the r65 of this Ss13husa. The r65 field corresponds to the
     * database column test.test.ss13husa.R65.
     * 
     * @return the r65 of this Ss13husa
     */
    Optional<Integer> getR65();
    
    /**
     * Returns the resmode of this Ss13husa. The resmode field corresponds to the
     * database column test.test.ss13husa.RESMODE.
     * 
     * @return the resmode of this Ss13husa
     */
    Optional<Integer> getResmode();
    
    /**
     * Returns the smocp of this Ss13husa. The smocp field corresponds to the
     * database column test.test.ss13husa.SMOCP.
     * 
     * @return the smocp of this Ss13husa
     */
    Optional<Integer> getSmocp();
    
    /**
     * Returns the smx of this Ss13husa. The smx field corresponds to the
     * database column test.test.ss13husa.SMX.
     * 
     * @return the smx of this Ss13husa
     */
    Optional<Integer> getSmx();
    
    /**
     * Returns the srnt of this Ss13husa. The srnt field corresponds to the
     * database column test.test.ss13husa.SRNT.
     * 
     * @return the srnt of this Ss13husa
     */
    Optional<Integer> getSrnt();
    
    /**
     * Returns the ssmc of this Ss13husa. The ssmc field corresponds to the
     * database column test.test.ss13husa.SSMC.
     * 
     * @return the ssmc of this Ss13husa
     */
    Optional<Integer> getSsmc();
    
    /**
     * Returns the sval of this Ss13husa. The sval field corresponds to the
     * database column test.test.ss13husa.SVAL.
     * 
     * @return the sval of this Ss13husa
     */
    Optional<Integer> getSval();
    
    /**
     * Returns the taxp of this Ss13husa. The taxp field corresponds to the
     * database column test.test.ss13husa.TAXP.
     * 
     * @return the taxp of this Ss13husa
     */
    Optional<Integer> getTaxp();
    
    /**
     * Returns the wif of this Ss13husa. The wif field corresponds to the
     * database column test.test.ss13husa.WIF.
     * 
     * @return the wif of this Ss13husa
     */
    Optional<Integer> getWif();
    
    /**
     * Returns the wkexrel of this Ss13husa. The wkexrel field corresponds to the
     * database column test.test.ss13husa.WKEXREL.
     * 
     * @return the wkexrel of this Ss13husa
     */
    Optional<Integer> getWkexrel();
    
    /**
     * Returns the workstat of this Ss13husa. The workstat field corresponds to
     * the database column test.test.ss13husa.WORKSTAT.
     * 
     * @return the workstat of this Ss13husa
     */
    Optional<Integer> getWorkstat();
    
    /**
     * Returns the faccessp of this Ss13husa. The faccessp field corresponds to
     * the database column test.test.ss13husa.FACCESSP.
     * 
     * @return the faccessp of this Ss13husa
     */
    Optional<Integer> getFaccessp();
    
    /**
     * Returns the facrp of this Ss13husa. The facrp field corresponds to the
     * database column test.test.ss13husa.FACRP.
     * 
     * @return the facrp of this Ss13husa
     */
    Optional<Integer> getFacrp();
    
    /**
     * Returns the fagsp of this Ss13husa. The fagsp field corresponds to the
     * database column test.test.ss13husa.FAGSP.
     * 
     * @return the fagsp of this Ss13husa
     */
    Optional<Integer> getFagsp();
    
    /**
     * Returns the fbathp of this Ss13husa. The fbathp field corresponds to the
     * database column test.test.ss13husa.FBATHP.
     * 
     * @return the fbathp of this Ss13husa
     */
    Optional<Integer> getFbathp();
    
    /**
     * Returns the fbdsp of this Ss13husa. The fbdsp field corresponds to the
     * database column test.test.ss13husa.FBDSP.
     * 
     * @return the fbdsp of this Ss13husa
     */
    Optional<Integer> getFbdsp();
    
    /**
     * Returns the fbldp of this Ss13husa. The fbldp field corresponds to the
     * database column test.test.ss13husa.FBLDP.
     * 
     * @return the fbldp of this Ss13husa
     */
    Optional<Integer> getFbldp();
    
    /**
     * Returns the fbroadbndp of this Ss13husa. The fbroadbndp field corresponds
     * to the database column test.test.ss13husa.FBROADBNDP.
     * 
     * @return the fbroadbndp of this Ss13husa
     */
    Optional<Integer> getFbroadbndp();
    
    /**
     * Returns the fbusp of this Ss13husa. The fbusp field corresponds to the
     * database column test.test.ss13husa.FBUSP.
     * 
     * @return the fbusp of this Ss13husa
     */
    Optional<Integer> getFbusp();
    
    /**
     * Returns the fcompothxp of this Ss13husa. The fcompothxp field corresponds
     * to the database column test.test.ss13husa.FCOMPOTHXP.
     * 
     * @return the fcompothxp of this Ss13husa
     */
    Optional<Integer> getFcompothxp();
    
    /**
     * Returns the fconp of this Ss13husa. The fconp field corresponds to the
     * database column test.test.ss13husa.FCONP.
     * 
     * @return the fconp of this Ss13husa
     */
    Optional<Integer> getFconp();
    
    /**
     * Returns the fdialupp of this Ss13husa. The fdialupp field corresponds to
     * the database column test.test.ss13husa.FDIALUPP.
     * 
     * @return the fdialupp of this Ss13husa
     */
    Optional<Integer> getFdialupp();
    
    /**
     * Returns the fdslp of this Ss13husa. The fdslp field corresponds to the
     * database column test.test.ss13husa.FDSLP.
     * 
     * @return the fdslp of this Ss13husa
     */
    Optional<Integer> getFdslp();
    
    /**
     * Returns the felep of this Ss13husa. The felep field corresponds to the
     * database column test.test.ss13husa.FELEP.
     * 
     * @return the felep of this Ss13husa
     */
    Optional<Integer> getFelep();
    
    /**
     * Returns the ffiberopp of this Ss13husa. The ffiberopp field corresponds to
     * the database column test.test.ss13husa.FFIBEROPP.
     * 
     * @return the ffiberopp of this Ss13husa
     */
    Optional<Integer> getFfiberopp();
    
    /**
     * Returns the ffsp of this Ss13husa. The ffsp field corresponds to the
     * database column test.test.ss13husa.FFSP.
     * 
     * @return the ffsp of this Ss13husa
     */
    Optional<Integer> getFfsp();
    
    /**
     * Returns the ffulp of this Ss13husa. The ffulp field corresponds to the
     * database column test.test.ss13husa.FFULP.
     * 
     * @return the ffulp of this Ss13husa
     */
    Optional<Integer> getFfulp();
    
    /**
     * Returns the fgasp of this Ss13husa. The fgasp field corresponds to the
     * database column test.test.ss13husa.FGASP.
     * 
     * @return the fgasp of this Ss13husa
     */
    Optional<Integer> getFgasp();
    
    /**
     * Returns the fhandheldp of this Ss13husa. The fhandheldp field corresponds
     * to the database column test.test.ss13husa.FHANDHELDP.
     * 
     * @return the fhandheldp of this Ss13husa
     */
    Optional<Integer> getFhandheldp();
    
    /**
     * Returns the fhflp of this Ss13husa. The fhflp field corresponds to the
     * database column test.test.ss13husa.FHFLP.
     * 
     * @return the fhflp of this Ss13husa
     */
    Optional<Integer> getFhflp();
    
    /**
     * Returns the finsp of this Ss13husa. The finsp field corresponds to the
     * database column test.test.ss13husa.FINSP.
     * 
     * @return the finsp of this Ss13husa
     */
    Optional<Integer> getFinsp();
    
    /**
     * Returns the fkitp of this Ss13husa. The fkitp field corresponds to the
     * database column test.test.ss13husa.FKITP.
     * 
     * @return the fkitp of this Ss13husa
     */
    Optional<Integer> getFkitp();
    
    /**
     * Returns the flaptopp of this Ss13husa. The flaptopp field corresponds to
     * the database column test.test.ss13husa.FLAPTOPP.
     * 
     * @return the flaptopp of this Ss13husa
     */
    Optional<Integer> getFlaptopp();
    
    /**
     * Returns the fmhp of this Ss13husa. The fmhp field corresponds to the
     * database column test.test.ss13husa.FMHP.
     * 
     * @return the fmhp of this Ss13husa
     */
    Optional<Integer> getFmhp();
    
    /**
     * Returns the fmodemp of this Ss13husa. The fmodemp field corresponds to the
     * database column test.test.ss13husa.FMODEMP.
     * 
     * @return the fmodemp of this Ss13husa
     */
    Optional<Integer> getFmodemp();
    
    /**
     * Returns the fmrgip of this Ss13husa. The fmrgip field corresponds to the
     * database column test.test.ss13husa.FMRGIP.
     * 
     * @return the fmrgip of this Ss13husa
     */
    Optional<Integer> getFmrgip();
    
    /**
     * Returns the fmrgp of this Ss13husa. The fmrgp field corresponds to the
     * database column test.test.ss13husa.FMRGP.
     * 
     * @return the fmrgp of this Ss13husa
     */
    Optional<Integer> getFmrgp();
    
    /**
     * Returns the fmrgtp of this Ss13husa. The fmrgtp field corresponds to the
     * database column test.test.ss13husa.FMRGTP.
     * 
     * @return the fmrgtp of this Ss13husa
     */
    Optional<Integer> getFmrgtp();
    
    /**
     * Returns the fmrgxp of this Ss13husa. The fmrgxp field corresponds to the
     * database column test.test.ss13husa.FMRGXP.
     * 
     * @return the fmrgxp of this Ss13husa
     */
    Optional<Integer> getFmrgxp();
    
    /**
     * Returns the fmvp of this Ss13husa. The fmvp field corresponds to the
     * database column test.test.ss13husa.FMVP.
     * 
     * @return the fmvp of this Ss13husa
     */
    Optional<Integer> getFmvp();
    
    /**
     * Returns the fothsvcexp of this Ss13husa. The fothsvcexp field corresponds
     * to the database column test.test.ss13husa.FOTHSVCEXP.
     * 
     * @return the fothsvcexp of this Ss13husa
     */
    Optional<Integer> getFothsvcexp();
    
    /**
     * Returns the fplmp of this Ss13husa. The fplmp field corresponds to the
     * database column test.test.ss13husa.FPLMP.
     * 
     * @return the fplmp of this Ss13husa
     */
    Optional<Integer> getFplmp();
    
    /**
     * Returns the frefrp of this Ss13husa. The frefrp field corresponds to the
     * database column test.test.ss13husa.FREFRP.
     * 
     * @return the frefrp of this Ss13husa
     */
    Optional<Integer> getFrefrp();
    
    /**
     * Returns the frmsp of this Ss13husa. The frmsp field corresponds to the
     * database column test.test.ss13husa.FRMSP.
     * 
     * @return the frmsp of this Ss13husa
     */
    Optional<Integer> getFrmsp();
    
    /**
     * Returns the frntmp of this Ss13husa. The frntmp field corresponds to the
     * database column test.test.ss13husa.FRNTMP.
     * 
     * @return the frntmp of this Ss13husa
     */
    Optional<Integer> getFrntmp();
    
    /**
     * Returns the frntp of this Ss13husa. The frntp field corresponds to the
     * database column test.test.ss13husa.FRNTP.
     * 
     * @return the frntp of this Ss13husa
     */
    Optional<Integer> getFrntp();
    
    /**
     * Returns the frwatp of this Ss13husa. The frwatp field corresponds to the
     * database column test.test.ss13husa.FRWATP.
     * 
     * @return the frwatp of this Ss13husa
     */
    Optional<Integer> getFrwatp();
    
    /**
     * Returns the frwatprp of this Ss13husa. The frwatprp field corresponds to
     * the database column test.test.ss13husa.FRWATPRP.
     * 
     * @return the frwatprp of this Ss13husa
     */
    Optional<Integer> getFrwatprp();
    
    /**
     * Returns the fsatellitep of this Ss13husa. The fsatellitep field
     * corresponds to the database column test.test.ss13husa.FSATELLITEP.
     * 
     * @return the fsatellitep of this Ss13husa
     */
    Optional<Integer> getFsatellitep();
    
    /**
     * Returns the fsinkp of this Ss13husa. The fsinkp field corresponds to the
     * database column test.test.ss13husa.FSINKP.
     * 
     * @return the fsinkp of this Ss13husa
     */
    Optional<Integer> getFsinkp();
    
    /**
     * Returns the fsmp of this Ss13husa. The fsmp field corresponds to the
     * database column test.test.ss13husa.FSMP.
     * 
     * @return the fsmp of this Ss13husa
     */
    Optional<Integer> getFsmp();
    
    /**
     * Returns the fsmxhp of this Ss13husa. The fsmxhp field corresponds to the
     * database column test.test.ss13husa.FSMXHP.
     * 
     * @return the fsmxhp of this Ss13husa
     */
    Optional<Integer> getFsmxhp();
    
    /**
     * Returns the fsmxsp of this Ss13husa. The fsmxsp field corresponds to the
     * database column test.test.ss13husa.FSMXSP.
     * 
     * @return the fsmxsp of this Ss13husa
     */
    Optional<Integer> getFsmxsp();
    
    /**
     * Returns the fstovp of this Ss13husa. The fstovp field corresponds to the
     * database column test.test.ss13husa.FSTOVP.
     * 
     * @return the fstovp of this Ss13husa
     */
    Optional<Integer> getFstovp();
    
    /**
     * Returns the ftaxp of this Ss13husa. The ftaxp field corresponds to the
     * database column test.test.ss13husa.FTAXP.
     * 
     * @return the ftaxp of this Ss13husa
     */
    Optional<Integer> getFtaxp();
    
    /**
     * Returns the ftelp of this Ss13husa. The ftelp field corresponds to the
     * database column test.test.ss13husa.FTELP.
     * 
     * @return the ftelp of this Ss13husa
     */
    Optional<Integer> getFtelp();
    
    /**
     * Returns the ftenp of this Ss13husa. The ftenp field corresponds to the
     * database column test.test.ss13husa.FTENP.
     * 
     * @return the ftenp of this Ss13husa
     */
    Optional<Integer> getFtenp();
    
    /**
     * Returns the ftoilp of this Ss13husa. The ftoilp field corresponds to the
     * database column test.test.ss13husa.FTOILP.
     * 
     * @return the ftoilp of this Ss13husa
     */
    Optional<Integer> getFtoilp();
    
    /**
     * Returns the fvacsp of this Ss13husa. The fvacsp field corresponds to the
     * database column test.test.ss13husa.FVACSP.
     * 
     * @return the fvacsp of this Ss13husa
     */
    Optional<Integer> getFvacsp();
    
    /**
     * Returns the fvalp of this Ss13husa. The fvalp field corresponds to the
     * database column test.test.ss13husa.FVALP.
     * 
     * @return the fvalp of this Ss13husa
     */
    Optional<Integer> getFvalp();
    
    /**
     * Returns the fvehp of this Ss13husa. The fvehp field corresponds to the
     * database column test.test.ss13husa.FVEHP.
     * 
     * @return the fvehp of this Ss13husa
     */
    Optional<Integer> getFvehp();
    
    /**
     * Returns the fwatp of this Ss13husa. The fwatp field corresponds to the
     * database column test.test.ss13husa.FWATP.
     * 
     * @return the fwatp of this Ss13husa
     */
    Optional<Integer> getFwatp();
    
    /**
     * Returns the fyblp of this Ss13husa. The fyblp field corresponds to the
     * database column test.test.ss13husa.FYBLP.
     * 
     * @return the fyblp of this Ss13husa
     */
    Optional<Integer> getFyblp();
    
    /**
     * Sets the rt of this Ss13husa. The rt field corresponds to the database
     * column test.test.ss13husa.RT.
     * 
     * @param rt to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRt(Integer rt);
    
    /**
     * Sets the serialno of this Ss13husa. The serialno field corresponds to the
     * database column test.test.ss13husa.SERIALNO.
     * 
     * @param serialno to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSerialno(Integer serialno);
    
    /**
     * Sets the division of this Ss13husa. The division field corresponds to the
     * database column test.test.ss13husa.DIVISION.
     * 
     * @param division to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setDivision(Integer division);
    
    /**
     * Sets the puma of this Ss13husa. The puma field corresponds to the database
     * column test.test.ss13husa.PUMA.
     * 
     * @param puma to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setPuma(Integer puma);
    
    /**
     * Sets the region of this Ss13husa. The region field corresponds to the
     * database column test.test.ss13husa.REGION.
     * 
     * @param region to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRegion(Integer region);
    
    /**
     * Sets the st of this Ss13husa. The st field corresponds to the database
     * column test.test.ss13husa.ST.
     * 
     * @param st to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSt(Integer st);
    
    /**
     * Sets the adjhsg of this Ss13husa. The adjhsg field corresponds to the
     * database column test.test.ss13husa.ADJHSG.
     * 
     * @param adjhsg to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setAdjhsg(Integer adjhsg);
    
    /**
     * Sets the adjinc of this Ss13husa. The adjinc field corresponds to the
     * database column test.test.ss13husa.ADJINC.
     * 
     * @param adjinc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setAdjinc(Integer adjinc);
    
    /**
     * Sets the wgtp of this Ss13husa. The wgtp field corresponds to the database
     * column test.test.ss13husa.WGTP.
     * 
     * @param wgtp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setWgtp(Integer wgtp);
    
    /**
     * Sets the np of this Ss13husa. The np field corresponds to the database
     * column test.test.ss13husa.NP.
     * 
     * @param np to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNp(Integer np);
    
    /**
     * Sets the type of this Ss13husa. The type field corresponds to the database
     * column test.test.ss13husa.TYPE.
     * 
     * @param type to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setType(Integer type);
    
    /**
     * Sets the access of this Ss13husa. The access field corresponds to the
     * database column test.test.ss13husa.ACCESS.
     * 
     * @param access to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setAccess(Integer access);
    
    /**
     * Sets the acr of this Ss13husa. The acr field corresponds to the database
     * column test.test.ss13husa.ACR.
     * 
     * @param acr to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setAcr(Integer acr);
    
    /**
     * Sets the ags of this Ss13husa. The ags field corresponds to the database
     * column test.test.ss13husa.AGS.
     * 
     * @param ags to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setAgs(Integer ags);
    
    /**
     * Sets the bath of this Ss13husa. The bath field corresponds to the database
     * column test.test.ss13husa.BATH.
     * 
     * @param bath to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setBath(Integer bath);
    
    /**
     * Sets the bdsp of this Ss13husa. The bdsp field corresponds to the database
     * column test.test.ss13husa.BDSP.
     * 
     * @param bdsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setBdsp(Integer bdsp);
    
    /**
     * Sets the bld of this Ss13husa. The bld field corresponds to the database
     * column test.test.ss13husa.BLD.
     * 
     * @param bld to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setBld(Integer bld);
    
    /**
     * Sets the broadbnd of this Ss13husa. The broadbnd field corresponds to the
     * database column test.test.ss13husa.BROADBND.
     * 
     * @param broadbnd to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setBroadbnd(Integer broadbnd);
    
    /**
     * Sets the bus of this Ss13husa. The bus field corresponds to the database
     * column test.test.ss13husa.BUS.
     * 
     * @param bus to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setBus(Integer bus);
    
    /**
     * Sets the compothx of this Ss13husa. The compothx field corresponds to the
     * database column test.test.ss13husa.COMPOTHX.
     * 
     * @param compothx to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setCompothx(Integer compothx);
    
    /**
     * Sets the conp of this Ss13husa. The conp field corresponds to the database
     * column test.test.ss13husa.CONP.
     * 
     * @param conp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setConp(Integer conp);
    
    /**
     * Sets the dialup of this Ss13husa. The dialup field corresponds to the
     * database column test.test.ss13husa.DIALUP.
     * 
     * @param dialup to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setDialup(Integer dialup);
    
    /**
     * Sets the dsl of this Ss13husa. The dsl field corresponds to the database
     * column test.test.ss13husa.DSL.
     * 
     * @param dsl to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setDsl(Integer dsl);
    
    /**
     * Sets the elep of this Ss13husa. The elep field corresponds to the database
     * column test.test.ss13husa.ELEP.
     * 
     * @param elep to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setElep(Integer elep);
    
    /**
     * Sets the fiberop of this Ss13husa. The fiberop field corresponds to the
     * database column test.test.ss13husa.FIBEROP.
     * 
     * @param fiberop to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFiberop(Integer fiberop);
    
    /**
     * Sets the fs of this Ss13husa. The fs field corresponds to the database
     * column test.test.ss13husa.FS.
     * 
     * @param fs to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFs(Integer fs);
    
    /**
     * Sets the fulp of this Ss13husa. The fulp field corresponds to the database
     * column test.test.ss13husa.FULP.
     * 
     * @param fulp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFulp(Integer fulp);
    
    /**
     * Sets the gasp of this Ss13husa. The gasp field corresponds to the database
     * column test.test.ss13husa.GASP.
     * 
     * @param gasp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setGasp(Integer gasp);
    
    /**
     * Sets the handheld of this Ss13husa. The handheld field corresponds to the
     * database column test.test.ss13husa.HANDHELD.
     * 
     * @param handheld to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHandheld(Integer handheld);
    
    /**
     * Sets the hfl of this Ss13husa. The hfl field corresponds to the database
     * column test.test.ss13husa.HFL.
     * 
     * @param hfl to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHfl(Integer hfl);
    
    /**
     * Sets the insp of this Ss13husa. The insp field corresponds to the database
     * column test.test.ss13husa.INSP.
     * 
     * @param insp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setInsp(Integer insp);
    
    /**
     * Sets the laptop of this Ss13husa. The laptop field corresponds to the
     * database column test.test.ss13husa.LAPTOP.
     * 
     * @param laptop to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setLaptop(Integer laptop);
    
    /**
     * Sets the mhp of this Ss13husa. The mhp field corresponds to the database
     * column test.test.ss13husa.MHP.
     * 
     * @param mhp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMhp(Integer mhp);
    
    /**
     * Sets the modem of this Ss13husa. The modem field corresponds to the
     * database column test.test.ss13husa.MODEM.
     * 
     * @param modem to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setModem(Integer modem);
    
    /**
     * Sets the mrgi of this Ss13husa. The mrgi field corresponds to the database
     * column test.test.ss13husa.MRGI.
     * 
     * @param mrgi to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMrgi(Integer mrgi);
    
    /**
     * Sets the mrgp of this Ss13husa. The mrgp field corresponds to the database
     * column test.test.ss13husa.MRGP.
     * 
     * @param mrgp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMrgp(Integer mrgp);
    
    /**
     * Sets the mrgt of this Ss13husa. The mrgt field corresponds to the database
     * column test.test.ss13husa.MRGT.
     * 
     * @param mrgt to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMrgt(Integer mrgt);
    
    /**
     * Sets the mrgx of this Ss13husa. The mrgx field corresponds to the database
     * column test.test.ss13husa.MRGX.
     * 
     * @param mrgx to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMrgx(Integer mrgx);
    
    /**
     * Sets the othsvcex of this Ss13husa. The othsvcex field corresponds to the
     * database column test.test.ss13husa.OTHSVCEX.
     * 
     * @param othsvcex to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setOthsvcex(Integer othsvcex);
    
    /**
     * Sets the refr of this Ss13husa. The refr field corresponds to the database
     * column test.test.ss13husa.REFR.
     * 
     * @param refr to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRefr(Integer refr);
    
    /**
     * Sets the rmsp of this Ss13husa. The rmsp field corresponds to the database
     * column test.test.ss13husa.RMSP.
     * 
     * @param rmsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRmsp(Integer rmsp);
    
    /**
     * Sets the rntm of this Ss13husa. The rntm field corresponds to the database
     * column test.test.ss13husa.RNTM.
     * 
     * @param rntm to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRntm(Integer rntm);
    
    /**
     * Sets the rntp of this Ss13husa. The rntp field corresponds to the database
     * column test.test.ss13husa.RNTP.
     * 
     * @param rntp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRntp(Integer rntp);
    
    /**
     * Sets the rwat of this Ss13husa. The rwat field corresponds to the database
     * column test.test.ss13husa.RWAT.
     * 
     * @param rwat to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRwat(Integer rwat);
    
    /**
     * Sets the rwatpr of this Ss13husa. The rwatpr field corresponds to the
     * database column test.test.ss13husa.RWATPR.
     * 
     * @param rwatpr to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setRwatpr(Integer rwatpr);
    
    /**
     * Sets the satellite of this Ss13husa. The satellite field corresponds to
     * the database column test.test.ss13husa.SATELLITE.
     * 
     * @param satellite to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSatellite(Integer satellite);
    
    /**
     * Sets the sink of this Ss13husa. The sink field corresponds to the database
     * column test.test.ss13husa.SINK.
     * 
     * @param sink to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSink(Integer sink);
    
    /**
     * Sets the smp of this Ss13husa. The smp field corresponds to the database
     * column test.test.ss13husa.SMP.
     * 
     * @param smp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSmp(Integer smp);
    
    /**
     * Sets the stov of this Ss13husa. The stov field corresponds to the database
     * column test.test.ss13husa.STOV.
     * 
     * @param stov to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setStov(Integer stov);
    
    /**
     * Sets the tel of this Ss13husa. The tel field corresponds to the database
     * column test.test.ss13husa.TEL.
     * 
     * @param tel to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setTel(Integer tel);
    
    /**
     * Sets the ten of this Ss13husa. The ten field corresponds to the database
     * column test.test.ss13husa.TEN.
     * 
     * @param ten to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setTen(Integer ten);
    
    /**
     * Sets the toil of this Ss13husa. The toil field corresponds to the database
     * column test.test.ss13husa.TOIL.
     * 
     * @param toil to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setToil(Integer toil);
    
    /**
     * Sets the vacs of this Ss13husa. The vacs field corresponds to the database
     * column test.test.ss13husa.VACS.
     * 
     * @param vacs to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setVacs(Integer vacs);
    
    /**
     * Sets the valp of this Ss13husa. The valp field corresponds to the database
     * column test.test.ss13husa.VALP.
     * 
     * @param valp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setValp(Integer valp);
    
    /**
     * Sets the veh of this Ss13husa. The veh field corresponds to the database
     * column test.test.ss13husa.VEH.
     * 
     * @param veh to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setVeh(Integer veh);
    
    /**
     * Sets the watp of this Ss13husa. The watp field corresponds to the database
     * column test.test.ss13husa.WATP.
     * 
     * @param watp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setWatp(Integer watp);
    
    /**
     * Sets the ybl of this Ss13husa. The ybl field corresponds to the database
     * column test.test.ss13husa.YBL.
     * 
     * @param ybl to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setYbl(Integer ybl);
    
    /**
     * Sets the fes of this Ss13husa. The fes field corresponds to the database
     * column test.test.ss13husa.FES.
     * 
     * @param fes to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFes(Integer fes);
    
    /**
     * Sets the ffincp of this Ss13husa. The ffincp field corresponds to the
     * database column test.test.ss13husa.FFINCP.
     * 
     * @param ffincp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFfincp(Integer ffincp);
    
    /**
     * Sets the fgrntp of this Ss13husa. The fgrntp field corresponds to the
     * database column test.test.ss13husa.FGRNTP.
     * 
     * @param fgrntp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFgrntp(Integer fgrntp);
    
    /**
     * Sets the fhincp of this Ss13husa. The fhincp field corresponds to the
     * database column test.test.ss13husa.FHINCP.
     * 
     * @param fhincp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFhincp(Integer fhincp);
    
    /**
     * Sets the fincp of this Ss13husa. The fincp field corresponds to the
     * database column test.test.ss13husa.FINCP.
     * 
     * @param fincp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFincp(Integer fincp);
    
    /**
     * Sets the fparc of this Ss13husa. The fparc field corresponds to the
     * database column test.test.ss13husa.FPARC.
     * 
     * @param fparc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFparc(Integer fparc);
    
    /**
     * Sets the fsmocp of this Ss13husa. The fsmocp field corresponds to the
     * database column test.test.ss13husa.FSMOCP.
     * 
     * @param fsmocp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsmocp(Integer fsmocp);
    
    /**
     * Sets the grntp of this Ss13husa. The grntp field corresponds to the
     * database column test.test.ss13husa.GRNTP.
     * 
     * @param grntp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setGrntp(Integer grntp);
    
    /**
     * Sets the grpip of this Ss13husa. The grpip field corresponds to the
     * database column test.test.ss13husa.GRPIP.
     * 
     * @param grpip to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setGrpip(Integer grpip);
    
    /**
     * Sets the hhl of this Ss13husa. The hhl field corresponds to the database
     * column test.test.ss13husa.HHL.
     * 
     * @param hhl to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHhl(Integer hhl);
    
    /**
     * Sets the hht of this Ss13husa. The hht field corresponds to the database
     * column test.test.ss13husa.HHT.
     * 
     * @param hht to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHht(Integer hht);
    
    /**
     * Sets the hincp of this Ss13husa. The hincp field corresponds to the
     * database column test.test.ss13husa.HINCP.
     * 
     * @param hincp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHincp(Integer hincp);
    
    /**
     * Sets the hugcl of this Ss13husa. The hugcl field corresponds to the
     * database column test.test.ss13husa.HUGCL.
     * 
     * @param hugcl to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHugcl(Integer hugcl);
    
    /**
     * Sets the hupac of this Ss13husa. The hupac field corresponds to the
     * database column test.test.ss13husa.HUPAC.
     * 
     * @param hupac to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHupac(Integer hupac);
    
    /**
     * Sets the hupaoc of this Ss13husa. The hupaoc field corresponds to the
     * database column test.test.ss13husa.HUPAOC.
     * 
     * @param hupaoc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHupaoc(Integer hupaoc);
    
    /**
     * Sets the huparc of this Ss13husa. The huparc field corresponds to the
     * database column test.test.ss13husa.HUPARC.
     * 
     * @param huparc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setHuparc(Integer huparc);
    
    /**
     * Sets the kit of this Ss13husa. The kit field corresponds to the database
     * column test.test.ss13husa.KIT.
     * 
     * @param kit to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setKit(Integer kit);
    
    /**
     * Sets the lngi of this Ss13husa. The lngi field corresponds to the database
     * column test.test.ss13husa.LNGI.
     * 
     * @param lngi to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setLngi(Integer lngi);
    
    /**
     * Sets the multg of this Ss13husa. The multg field corresponds to the
     * database column test.test.ss13husa.MULTG.
     * 
     * @param multg to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMultg(Integer multg);
    
    /**
     * Sets the mv of this Ss13husa. The mv field corresponds to the database
     * column test.test.ss13husa.MV.
     * 
     * @param mv to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setMv(Integer mv);
    
    /**
     * Sets the noc of this Ss13husa. The noc field corresponds to the database
     * column test.test.ss13husa.NOC.
     * 
     * @param noc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNoc(Integer noc);
    
    /**
     * Sets the npf of this Ss13husa. The npf field corresponds to the database
     * column test.test.ss13husa.NPF.
     * 
     * @param npf to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNpf(Integer npf);
    
    /**
     * Sets the npp of this Ss13husa. The npp field corresponds to the database
     * column test.test.ss13husa.NPP.
     * 
     * @param npp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNpp(Integer npp);
    
    /**
     * Sets the nr of this Ss13husa. The nr field corresponds to the database
     * column test.test.ss13husa.NR.
     * 
     * @param nr to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNr(Integer nr);
    
    /**
     * Sets the nrc of this Ss13husa. The nrc field corresponds to the database
     * column test.test.ss13husa.NRC.
     * 
     * @param nrc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setNrc(Integer nrc);
    
    /**
     * Sets the ocpip of this Ss13husa. The ocpip field corresponds to the
     * database column test.test.ss13husa.OCPIP.
     * 
     * @param ocpip to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setOcpip(Integer ocpip);
    
    /**
     * Sets the partner of this Ss13husa. The partner field corresponds to the
     * database column test.test.ss13husa.PARTNER.
     * 
     * @param partner to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setPartner(Integer partner);
    
    /**
     * Sets the plm of this Ss13husa. The plm field corresponds to the database
     * column test.test.ss13husa.PLM.
     * 
     * @param plm to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setPlm(Integer plm);
    
    /**
     * Sets the psf of this Ss13husa. The psf field corresponds to the database
     * column test.test.ss13husa.PSF.
     * 
     * @param psf to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setPsf(Integer psf);
    
    /**
     * Sets the r18 of this Ss13husa. The r18 field corresponds to the database
     * column test.test.ss13husa.R18.
     * 
     * @param r18 to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setR18(Integer r18);
    
    /**
     * Sets the r60 of this Ss13husa. The r60 field corresponds to the database
     * column test.test.ss13husa.R60.
     * 
     * @param r60 to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setR60(Integer r60);
    
    /**
     * Sets the r65 of this Ss13husa. The r65 field corresponds to the database
     * column test.test.ss13husa.R65.
     * 
     * @param r65 to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setR65(Integer r65);
    
    /**
     * Sets the resmode of this Ss13husa. The resmode field corresponds to the
     * database column test.test.ss13husa.RESMODE.
     * 
     * @param resmode to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setResmode(Integer resmode);
    
    /**
     * Sets the smocp of this Ss13husa. The smocp field corresponds to the
     * database column test.test.ss13husa.SMOCP.
     * 
     * @param smocp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSmocp(Integer smocp);
    
    /**
     * Sets the smx of this Ss13husa. The smx field corresponds to the database
     * column test.test.ss13husa.SMX.
     * 
     * @param smx to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSmx(Integer smx);
    
    /**
     * Sets the srnt of this Ss13husa. The srnt field corresponds to the database
     * column test.test.ss13husa.SRNT.
     * 
     * @param srnt to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSrnt(Integer srnt);
    
    /**
     * Sets the ssmc of this Ss13husa. The ssmc field corresponds to the database
     * column test.test.ss13husa.SSMC.
     * 
     * @param ssmc to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSsmc(Integer ssmc);
    
    /**
     * Sets the sval of this Ss13husa. The sval field corresponds to the database
     * column test.test.ss13husa.SVAL.
     * 
     * @param sval to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setSval(Integer sval);
    
    /**
     * Sets the taxp of this Ss13husa. The taxp field corresponds to the database
     * column test.test.ss13husa.TAXP.
     * 
     * @param taxp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setTaxp(Integer taxp);
    
    /**
     * Sets the wif of this Ss13husa. The wif field corresponds to the database
     * column test.test.ss13husa.WIF.
     * 
     * @param wif to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setWif(Integer wif);
    
    /**
     * Sets the wkexrel of this Ss13husa. The wkexrel field corresponds to the
     * database column test.test.ss13husa.WKEXREL.
     * 
     * @param wkexrel to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setWkexrel(Integer wkexrel);
    
    /**
     * Sets the workstat of this Ss13husa. The workstat field corresponds to the
     * database column test.test.ss13husa.WORKSTAT.
     * 
     * @param workstat to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setWorkstat(Integer workstat);
    
    /**
     * Sets the faccessp of this Ss13husa. The faccessp field corresponds to the
     * database column test.test.ss13husa.FACCESSP.
     * 
     * @param faccessp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFaccessp(Integer faccessp);
    
    /**
     * Sets the facrp of this Ss13husa. The facrp field corresponds to the
     * database column test.test.ss13husa.FACRP.
     * 
     * @param facrp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFacrp(Integer facrp);
    
    /**
     * Sets the fagsp of this Ss13husa. The fagsp field corresponds to the
     * database column test.test.ss13husa.FAGSP.
     * 
     * @param fagsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFagsp(Integer fagsp);
    
    /**
     * Sets the fbathp of this Ss13husa. The fbathp field corresponds to the
     * database column test.test.ss13husa.FBATHP.
     * 
     * @param fbathp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFbathp(Integer fbathp);
    
    /**
     * Sets the fbdsp of this Ss13husa. The fbdsp field corresponds to the
     * database column test.test.ss13husa.FBDSP.
     * 
     * @param fbdsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFbdsp(Integer fbdsp);
    
    /**
     * Sets the fbldp of this Ss13husa. The fbldp field corresponds to the
     * database column test.test.ss13husa.FBLDP.
     * 
     * @param fbldp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFbldp(Integer fbldp);
    
    /**
     * Sets the fbroadbndp of this Ss13husa. The fbroadbndp field corresponds to
     * the database column test.test.ss13husa.FBROADBNDP.
     * 
     * @param fbroadbndp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFbroadbndp(Integer fbroadbndp);
    
    /**
     * Sets the fbusp of this Ss13husa. The fbusp field corresponds to the
     * database column test.test.ss13husa.FBUSP.
     * 
     * @param fbusp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFbusp(Integer fbusp);
    
    /**
     * Sets the fcompothxp of this Ss13husa. The fcompothxp field corresponds to
     * the database column test.test.ss13husa.FCOMPOTHXP.
     * 
     * @param fcompothxp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFcompothxp(Integer fcompothxp);
    
    /**
     * Sets the fconp of this Ss13husa. The fconp field corresponds to the
     * database column test.test.ss13husa.FCONP.
     * 
     * @param fconp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFconp(Integer fconp);
    
    /**
     * Sets the fdialupp of this Ss13husa. The fdialupp field corresponds to the
     * database column test.test.ss13husa.FDIALUPP.
     * 
     * @param fdialupp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFdialupp(Integer fdialupp);
    
    /**
     * Sets the fdslp of this Ss13husa. The fdslp field corresponds to the
     * database column test.test.ss13husa.FDSLP.
     * 
     * @param fdslp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFdslp(Integer fdslp);
    
    /**
     * Sets the felep of this Ss13husa. The felep field corresponds to the
     * database column test.test.ss13husa.FELEP.
     * 
     * @param felep to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFelep(Integer felep);
    
    /**
     * Sets the ffiberopp of this Ss13husa. The ffiberopp field corresponds to
     * the database column test.test.ss13husa.FFIBEROPP.
     * 
     * @param ffiberopp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFfiberopp(Integer ffiberopp);
    
    /**
     * Sets the ffsp of this Ss13husa. The ffsp field corresponds to the database
     * column test.test.ss13husa.FFSP.
     * 
     * @param ffsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFfsp(Integer ffsp);
    
    /**
     * Sets the ffulp of this Ss13husa. The ffulp field corresponds to the
     * database column test.test.ss13husa.FFULP.
     * 
     * @param ffulp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFfulp(Integer ffulp);
    
    /**
     * Sets the fgasp of this Ss13husa. The fgasp field corresponds to the
     * database column test.test.ss13husa.FGASP.
     * 
     * @param fgasp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFgasp(Integer fgasp);
    
    /**
     * Sets the fhandheldp of this Ss13husa. The fhandheldp field corresponds to
     * the database column test.test.ss13husa.FHANDHELDP.
     * 
     * @param fhandheldp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFhandheldp(Integer fhandheldp);
    
    /**
     * Sets the fhflp of this Ss13husa. The fhflp field corresponds to the
     * database column test.test.ss13husa.FHFLP.
     * 
     * @param fhflp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFhflp(Integer fhflp);
    
    /**
     * Sets the finsp of this Ss13husa. The finsp field corresponds to the
     * database column test.test.ss13husa.FINSP.
     * 
     * @param finsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFinsp(Integer finsp);
    
    /**
     * Sets the fkitp of this Ss13husa. The fkitp field corresponds to the
     * database column test.test.ss13husa.FKITP.
     * 
     * @param fkitp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFkitp(Integer fkitp);
    
    /**
     * Sets the flaptopp of this Ss13husa. The flaptopp field corresponds to the
     * database column test.test.ss13husa.FLAPTOPP.
     * 
     * @param flaptopp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFlaptopp(Integer flaptopp);
    
    /**
     * Sets the fmhp of this Ss13husa. The fmhp field corresponds to the database
     * column test.test.ss13husa.FMHP.
     * 
     * @param fmhp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmhp(Integer fmhp);
    
    /**
     * Sets the fmodemp of this Ss13husa. The fmodemp field corresponds to the
     * database column test.test.ss13husa.FMODEMP.
     * 
     * @param fmodemp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmodemp(Integer fmodemp);
    
    /**
     * Sets the fmrgip of this Ss13husa. The fmrgip field corresponds to the
     * database column test.test.ss13husa.FMRGIP.
     * 
     * @param fmrgip to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmrgip(Integer fmrgip);
    
    /**
     * Sets the fmrgp of this Ss13husa. The fmrgp field corresponds to the
     * database column test.test.ss13husa.FMRGP.
     * 
     * @param fmrgp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmrgp(Integer fmrgp);
    
    /**
     * Sets the fmrgtp of this Ss13husa. The fmrgtp field corresponds to the
     * database column test.test.ss13husa.FMRGTP.
     * 
     * @param fmrgtp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmrgtp(Integer fmrgtp);
    
    /**
     * Sets the fmrgxp of this Ss13husa. The fmrgxp field corresponds to the
     * database column test.test.ss13husa.FMRGXP.
     * 
     * @param fmrgxp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmrgxp(Integer fmrgxp);
    
    /**
     * Sets the fmvp of this Ss13husa. The fmvp field corresponds to the database
     * column test.test.ss13husa.FMVP.
     * 
     * @param fmvp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFmvp(Integer fmvp);
    
    /**
     * Sets the fothsvcexp of this Ss13husa. The fothsvcexp field corresponds to
     * the database column test.test.ss13husa.FOTHSVCEXP.
     * 
     * @param fothsvcexp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFothsvcexp(Integer fothsvcexp);
    
    /**
     * Sets the fplmp of this Ss13husa. The fplmp field corresponds to the
     * database column test.test.ss13husa.FPLMP.
     * 
     * @param fplmp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFplmp(Integer fplmp);
    
    /**
     * Sets the frefrp of this Ss13husa. The frefrp field corresponds to the
     * database column test.test.ss13husa.FREFRP.
     * 
     * @param frefrp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrefrp(Integer frefrp);
    
    /**
     * Sets the frmsp of this Ss13husa. The frmsp field corresponds to the
     * database column test.test.ss13husa.FRMSP.
     * 
     * @param frmsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrmsp(Integer frmsp);
    
    /**
     * Sets the frntmp of this Ss13husa. The frntmp field corresponds to the
     * database column test.test.ss13husa.FRNTMP.
     * 
     * @param frntmp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrntmp(Integer frntmp);
    
    /**
     * Sets the frntp of this Ss13husa. The frntp field corresponds to the
     * database column test.test.ss13husa.FRNTP.
     * 
     * @param frntp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrntp(Integer frntp);
    
    /**
     * Sets the frwatp of this Ss13husa. The frwatp field corresponds to the
     * database column test.test.ss13husa.FRWATP.
     * 
     * @param frwatp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrwatp(Integer frwatp);
    
    /**
     * Sets the frwatprp of this Ss13husa. The frwatprp field corresponds to the
     * database column test.test.ss13husa.FRWATPRP.
     * 
     * @param frwatprp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFrwatprp(Integer frwatprp);
    
    /**
     * Sets the fsatellitep of this Ss13husa. The fsatellitep field corresponds
     * to the database column test.test.ss13husa.FSATELLITEP.
     * 
     * @param fsatellitep to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsatellitep(Integer fsatellitep);
    
    /**
     * Sets the fsinkp of this Ss13husa. The fsinkp field corresponds to the
     * database column test.test.ss13husa.FSINKP.
     * 
     * @param fsinkp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsinkp(Integer fsinkp);
    
    /**
     * Sets the fsmp of this Ss13husa. The fsmp field corresponds to the database
     * column test.test.ss13husa.FSMP.
     * 
     * @param fsmp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsmp(Integer fsmp);
    
    /**
     * Sets the fsmxhp of this Ss13husa. The fsmxhp field corresponds to the
     * database column test.test.ss13husa.FSMXHP.
     * 
     * @param fsmxhp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsmxhp(Integer fsmxhp);
    
    /**
     * Sets the fsmxsp of this Ss13husa. The fsmxsp field corresponds to the
     * database column test.test.ss13husa.FSMXSP.
     * 
     * @param fsmxsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFsmxsp(Integer fsmxsp);
    
    /**
     * Sets the fstovp of this Ss13husa. The fstovp field corresponds to the
     * database column test.test.ss13husa.FSTOVP.
     * 
     * @param fstovp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFstovp(Integer fstovp);
    
    /**
     * Sets the ftaxp of this Ss13husa. The ftaxp field corresponds to the
     * database column test.test.ss13husa.FTAXP.
     * 
     * @param ftaxp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFtaxp(Integer ftaxp);
    
    /**
     * Sets the ftelp of this Ss13husa. The ftelp field corresponds to the
     * database column test.test.ss13husa.FTELP.
     * 
     * @param ftelp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFtelp(Integer ftelp);
    
    /**
     * Sets the ftenp of this Ss13husa. The ftenp field corresponds to the
     * database column test.test.ss13husa.FTENP.
     * 
     * @param ftenp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFtenp(Integer ftenp);
    
    /**
     * Sets the ftoilp of this Ss13husa. The ftoilp field corresponds to the
     * database column test.test.ss13husa.FTOILP.
     * 
     * @param ftoilp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFtoilp(Integer ftoilp);
    
    /**
     * Sets the fvacsp of this Ss13husa. The fvacsp field corresponds to the
     * database column test.test.ss13husa.FVACSP.
     * 
     * @param fvacsp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFvacsp(Integer fvacsp);
    
    /**
     * Sets the fvalp of this Ss13husa. The fvalp field corresponds to the
     * database column test.test.ss13husa.FVALP.
     * 
     * @param fvalp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFvalp(Integer fvalp);
    
    /**
     * Sets the fvehp of this Ss13husa. The fvehp field corresponds to the
     * database column test.test.ss13husa.FVEHP.
     * 
     * @param fvehp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFvehp(Integer fvehp);
    
    /**
     * Sets the fwatp of this Ss13husa. The fwatp field corresponds to the
     * database column test.test.ss13husa.FWATP.
     * 
     * @param fwatp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFwatp(Integer fwatp);
    
    /**
     * Sets the fyblp of this Ss13husa. The fyblp field corresponds to the
     * database column test.test.ss13husa.FYBLP.
     * 
     * @param fyblp to set of this Ss13husa
     * @return this Ss13husa instance
     */
    Ss13husa setFyblp(Integer fyblp);
    
    enum Identifier implements FieldIdentifier<Ss13husa> {
        
        RT ("RT"),
        SERIALNO ("SERIALNO"),
        DIVISION ("DIVISION"),
        PUMA ("PUMA"),
        REGION ("REGION"),
        ST ("ST"),
        ADJHSG ("ADJHSG"),
        ADJINC ("ADJINC"),
        WGTP ("WGTP"),
        NP ("NP"),
        TYPE ("TYPE"),
        ACCESS ("ACCESS"),
        ACR ("ACR"),
        AGS ("AGS"),
        BATH ("BATH"),
        BDSP ("BDSP"),
        BLD ("BLD"),
        BROADBND ("BROADBND"),
        BUS ("BUS"),
        COMPOTHX ("COMPOTHX"),
        CONP ("CONP"),
        DIALUP ("DIALUP"),
        DSL ("DSL"),
        ELEP ("ELEP"),
        FIBEROP ("FIBEROP"),
        FS ("FS"),
        FULP ("FULP"),
        GASP ("GASP"),
        HANDHELD ("HANDHELD"),
        HFL ("HFL"),
        INSP ("INSP"),
        LAPTOP ("LAPTOP"),
        MHP ("MHP"),
        MODEM ("MODEM"),
        MRGI ("MRGI"),
        MRGP ("MRGP"),
        MRGT ("MRGT"),
        MRGX ("MRGX"),
        OTHSVCEX ("OTHSVCEX"),
        REFR ("REFR"),
        RMSP ("RMSP"),
        RNTM ("RNTM"),
        RNTP ("RNTP"),
        RWAT ("RWAT"),
        RWATPR ("RWATPR"),
        SATELLITE ("SATELLITE"),
        SINK ("SINK"),
        SMP ("SMP"),
        STOV ("STOV"),
        TEL ("TEL"),
        TEN ("TEN"),
        TOIL ("TOIL"),
        VACS ("VACS"),
        VALP ("VALP"),
        VEH ("VEH"),
        WATP ("WATP"),
        YBL ("YBL"),
        FES ("FES"),
        FFINCP ("FFINCP"),
        FGRNTP ("FGRNTP"),
        FHINCP ("FHINCP"),
        FINCP ("FINCP"),
        FPARC ("FPARC"),
        FSMOCP ("FSMOCP"),
        GRNTP ("GRNTP"),
        GRPIP ("GRPIP"),
        HHL ("HHL"),
        HHT ("HHT"),
        HINCP ("HINCP"),
        HUGCL ("HUGCL"),
        HUPAC ("HUPAC"),
        HUPAOC ("HUPAOC"),
        HUPARC ("HUPARC"),
        KIT ("KIT"),
        LNGI ("LNGI"),
        MULTG ("MULTG"),
        MV ("MV"),
        NOC ("NOC"),
        NPF ("NPF"),
        NPP ("NPP"),
        NR ("NR"),
        NRC ("NRC"),
        OCPIP ("OCPIP"),
        PARTNER ("PARTNER"),
        PLM ("PLM"),
        PSF ("PSF"),
        R18 ("R18"),
        R60 ("R60"),
        R65 ("R65"),
        RESMODE ("RESMODE"),
        SMOCP ("SMOCP"),
        SMX ("SMX"),
        SRNT ("SRNT"),
        SSMC ("SSMC"),
        SVAL ("SVAL"),
        TAXP ("TAXP"),
        WIF ("WIF"),
        WKEXREL ("WKEXREL"),
        WORKSTAT ("WORKSTAT"),
        FACCESSP ("FACCESSP"),
        FACRP ("FACRP"),
        FAGSP ("FAGSP"),
        FBATHP ("FBATHP"),
        FBDSP ("FBDSP"),
        FBLDP ("FBLDP"),
        FBROADBNDP ("FBROADBNDP"),
        FBUSP ("FBUSP"),
        FCOMPOTHXP ("FCOMPOTHXP"),
        FCONP ("FCONP"),
        FDIALUPP ("FDIALUPP"),
        FDSLP ("FDSLP"),
        FELEP ("FELEP"),
        FFIBEROPP ("FFIBEROPP"),
        FFSP ("FFSP"),
        FFULP ("FFULP"),
        FGASP ("FGASP"),
        FHANDHELDP ("FHANDHELDP"),
        FHFLP ("FHFLP"),
        FINSP ("FINSP"),
        FKITP ("FKITP"),
        FLAPTOPP ("FLAPTOPP"),
        FMHP ("FMHP"),
        FMODEMP ("FMODEMP"),
        FMRGIP ("FMRGIP"),
        FMRGP ("FMRGP"),
        FMRGTP ("FMRGTP"),
        FMRGXP ("FMRGXP"),
        FMVP ("FMVP"),
        FOTHSVCEXP ("FOTHSVCEXP"),
        FPLMP ("FPLMP"),
        FREFRP ("FREFRP"),
        FRMSP ("FRMSP"),
        FRNTMP ("FRNTMP"),
        FRNTP ("FRNTP"),
        FRWATP ("FRWATP"),
        FRWATPRP ("FRWATPRP"),
        FSATELLITEP ("FSATELLITEP"),
        FSINKP ("FSINKP"),
        FSMP ("FSMP"),
        FSMXHP ("FSMXHP"),
        FSMXSP ("FSMXSP"),
        FSTOVP ("FSTOVP"),
        FTAXP ("FTAXP"),
        FTELP ("FTELP"),
        FTENP ("FTENP"),
        FTOILP ("FTOILP"),
        FVACSP ("FVACSP"),
        FVALP ("FVALP"),
        FVEHP ("FVEHP"),
        FWATP ("FWATP"),
        FYBLP ("FYBLP");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "test";
        }
        
        @Override
        public String schemaName() {
            return "test";
        }
        
        @Override
        public String tableName() {
            return "ss13husa";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}