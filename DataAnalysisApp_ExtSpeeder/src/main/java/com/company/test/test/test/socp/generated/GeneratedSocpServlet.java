package com.company.test.test.test.socp.generated;

import com.company.test.test.test.socp.Socp;
import com.speedment.plugin.extspeeder.runtime.FieldMapper;
import com.speedment.plugin.extspeeder.runtime.servlet.ExtSpeederHttpServlet;
import javax.annotation.Generated;
import static com.speedment.encoder.JsonEncoder.jsonValue;

/**
 * The generated servlet representing an entity (for example, a row) in the
 * Table test.test.test.socp.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public class GeneratedSocpServlet extends ExtSpeederHttpServlet<Socp> {
    
    private final static long serialVersionUID = 2006237488;
    public static FieldMapper<Socp> FIELD_MAPPER = columnName -> {
            switch (columnName) {
                case "id" : return Socp.ID;
                case "description" : return Socp.DESCRIPTION;
                default : return null;
            }
    };
    
    @Override
    public Class<Socp> entityClass() {
        return Socp.class;
    }
    
    @Override
    public FieldMapper<Socp> fieldMapper() {
        return FIELD_MAPPER;
    }
    
    @Override
    public String toJson(Socp entity) {
        return entity == null ? "null" : new StringBuilder()
            .append('{')
            .append("\"id\":").append(jsonValue(entity.getId())).append(", ")
            .append("\"description\":").append(jsonValue(entity.getDescription()))
            .append('}')
        .toString();
    }
    
    @Override
    public String getServletInfo() {
        return "Servlet for the socp table in the test schema.";
    }
}