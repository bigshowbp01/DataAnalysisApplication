package com.company.test.test.test.bld.generated;

import com.company.test.test.test.bld.Bld;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named bld.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedBldSerializerImpl extends AbstractEntitySerializer<Bld> {
    
    protected final static long serialVersionUID = 1270073629;
    private final static Serializer<Integer> ID_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> DESCRIPTION_SERIALIZER = SerializerFactory.serializerOf(String.class);
    
    public GeneratedBldSerializerImpl(Manager<Bld> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Bld bld) throws IOException {
        final long[] bits = new long[1];
        if (!bld.getDescription().isPresent()) BitSetUtil.set(bits, 0);
        out.writeLong(bits[0]);
        out.writeInt(bld.getId());
        if (bld.getDescription().isPresent()) out.writeUTF(bld.getDescription().get());
    }
    
    @Override
    public Bld deserialize(final DataInput in, final int available) throws IOException {
        final Bld bld = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        bld.setId(in.readInt());
        if (!BitSetUtil.get0(bits)) bld.setDescription(in.readUTF());
        return bld;
    }
}