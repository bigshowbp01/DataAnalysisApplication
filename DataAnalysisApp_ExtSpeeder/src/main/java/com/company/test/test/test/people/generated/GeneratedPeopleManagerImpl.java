package com.company.test.test.test.people.generated;

import com.company.test.test.test.people.People;
import com.company.test.test.test.people.PeopleImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.plugin.extspeeder.runtime.manager.AbstractExtSpeederSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table test.test.test.people.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public abstract class GeneratedPeopleManagerImpl extends AbstractExtSpeederSqlManager<People> implements GeneratedPeopleManager {
    
    private final static Tuple1<Class<Integer>> PRIMARY_KEY_CLASSES = Tuples.of(Integer.class);
    
    protected GeneratedPeopleManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected People newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final People entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setSerialno(resultSet.getInt(2));
            entity.setState(resultSet.getString(3));
            entity.setIncomeAdjustmentCode(resultSet.getInt(4));
            entity.setClassOfWorker(resultSet.getString(5));
            entity.setDividents(resultSet.getInt(6));
            entity.setAllOtherIncomes(resultSet.getInt(7));
            entity.setPublicAssistanceIncome(resultSet.getInt(8));
            entity.setRetirementIncome(resultSet.getInt(9));
            entity.setEducationalAttainment(resultSet.getString(10));
            entity.setSelfEmploymentIncome(resultSet.getInt(11));
            entity.setSupplementarySecurityIncome(resultSet.getInt(12));
            entity.setSocialSecurityIncome(resultSet.getInt(13));
            entity.setSalaryIncome(resultSet.getInt(14));
            entity.setSex(resultSet.getString(15));
            entity.setWorkedHoursPerWeek(resultSet.getInt(16));
            entity.setIndustryRecord(resultSet.getString(17));
            entity.setNaicsIndustryRecord(resultSet.getString(18));
            entity.setOccupation(resultSet.getString(19));
            entity.setTotalPersonEarnings(resultSet.getInt(20));
            entity.setTotalPersonIncome(resultSet.getInt(21));
            entity.setIncomeToPovertyRatio(resultSet.getInt(22));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public People newEmptyEntity() {
        return new PeopleImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(People entity, FieldIdentifier<People> identifier) {
        switch ((People.Identifier) identifier) {
            case ID : return entity.getId();
            case SERIALNO : return entity.getSerialno();
            case STATE : return entity.getState();
            case INCOME_ADJUSTMENT_CODE : return entity.getIncomeAdjustmentCode();
            case CLASS_OF_WORKER : return entity.getClassOfWorker().orElse(null);
            case DIVIDENTS : return entity.getDividents();
            case ALL_OTHER_INCOMES : return entity.getAllOtherIncomes();
            case PUBLIC_ASSISTANCE_INCOME : return entity.getPublicAssistanceIncome();
            case RETIREMENT_INCOME : return entity.getRetirementIncome();
            case EDUCATIONAL_ATTAINMENT : return entity.getEducationalAttainment().orElse(null);
            case SELF_EMPLOYMENT_INCOME : return entity.getSelfEmploymentIncome();
            case SUPPLEMENTARY_SECURITY_INCOME : return entity.getSupplementarySecurityIncome();
            case SOCIAL_SECURITY_INCOME : return entity.getSocialSecurityIncome();
            case SALARY_INCOME : return entity.getSalaryIncome();
            case SEX : return entity.getSex().orElse(null);
            case WORKED_HOURS_PER_WEEK : return entity.getWorkedHoursPerWeek();
            case INDUSTRY_RECORD : return entity.getIndustryRecord().orElse(null);
            case NAICS_INDUSTRY_RECORD : return entity.getNaicsIndustryRecord().orElse(null);
            case OCCUPATION : return entity.getOccupation().orElse(null);
            case TOTAL_PERSON_EARNINGS : return entity.getTotalPersonEarnings();
            case TOTAL_PERSON_INCOME : return entity.getTotalPersonIncome();
            case INCOME_TO_POVERTY_RATIO : return entity.getIncomeToPovertyRatio();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(People entity, FieldIdentifier<People> identifier, Object value) {
        switch ((People.Identifier) identifier) {
            case ID : entity.setId((Integer) value); break;
            case SERIALNO : entity.setSerialno((Integer) value); break;
            case STATE : entity.setState((String) value); break;
            case INCOME_ADJUSTMENT_CODE : entity.setIncomeAdjustmentCode((Integer) value); break;
            case CLASS_OF_WORKER : entity.setClassOfWorker((String) value); break;
            case DIVIDENTS : entity.setDividents((Integer) value); break;
            case ALL_OTHER_INCOMES : entity.setAllOtherIncomes((Integer) value); break;
            case PUBLIC_ASSISTANCE_INCOME : entity.setPublicAssistanceIncome((Integer) value); break;
            case RETIREMENT_INCOME : entity.setRetirementIncome((Integer) value); break;
            case EDUCATIONAL_ATTAINMENT : entity.setEducationalAttainment((String) value); break;
            case SELF_EMPLOYMENT_INCOME : entity.setSelfEmploymentIncome((Integer) value); break;
            case SUPPLEMENTARY_SECURITY_INCOME : entity.setSupplementarySecurityIncome((Integer) value); break;
            case SOCIAL_SECURITY_INCOME : entity.setSocialSecurityIncome((Integer) value); break;
            case SALARY_INCOME : entity.setSalaryIncome((Integer) value); break;
            case SEX : entity.setSex((String) value); break;
            case WORKED_HOURS_PER_WEEK : entity.setWorkedHoursPerWeek((Integer) value); break;
            case INDUSTRY_RECORD : entity.setIndustryRecord((String) value); break;
            case NAICS_INDUSTRY_RECORD : entity.setNaicsIndustryRecord((String) value); break;
            case OCCUPATION : entity.setOccupation((String) value); break;
            case TOTAL_PERSON_EARNINGS : entity.setTotalPersonEarnings((Integer) value); break;
            case TOTAL_PERSON_INCOME : entity.setTotalPersonIncome((Integer) value); break;
            case INCOME_TO_POVERTY_RATIO : entity.setIncomeToPovertyRatio((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            People.ID,
            People.SERIALNO,
            People.STATE,
            People.INCOME_ADJUSTMENT_CODE,
            People.CLASS_OF_WORKER,
            People.DIVIDENTS,
            People.ALL_OTHER_INCOMES,
            People.PUBLIC_ASSISTANCE_INCOME,
            People.RETIREMENT_INCOME,
            People.EDUCATIONAL_ATTAINMENT,
            People.SELF_EMPLOYMENT_INCOME,
            People.SUPPLEMENTARY_SECURITY_INCOME,
            People.SOCIAL_SECURITY_INCOME,
            People.SALARY_INCOME,
            People.SEX,
            People.WORKED_HOURS_PER_WEEK,
            People.INDUSTRY_RECORD,
            People.NAICS_INDUSTRY_RECORD,
            People.OCCUPATION,
            People.TOTAL_PERSON_EARNINGS,
            People.TOTAL_PERSON_INCOME,
            People.INCOME_TO_POVERTY_RATIO
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            People.ID
        );
    }
    
    @Override
    public Tuple1<Class<Integer>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public People newCopyOf(People source) {
        final People copy = new PeopleImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        copy.setSerialno(source.getSerialno());
        copy.setState(source.getState());
        copy.setIncomeAdjustmentCode(source.getIncomeAdjustmentCode());
        source.getClassOfWorker().ifPresent(copy::setClassOfWorker);
        copy.setDividents(source.getDividents());
        copy.setAllOtherIncomes(source.getAllOtherIncomes());
        copy.setPublicAssistanceIncome(source.getPublicAssistanceIncome());
        copy.setRetirementIncome(source.getRetirementIncome());
        source.getEducationalAttainment().ifPresent(copy::setEducationalAttainment);
        copy.setSelfEmploymentIncome(source.getSelfEmploymentIncome());
        copy.setSupplementarySecurityIncome(source.getSupplementarySecurityIncome());
        copy.setSocialSecurityIncome(source.getSocialSecurityIncome());
        copy.setSalaryIncome(source.getSalaryIncome());
        source.getSex().ifPresent(copy::setSex);
        copy.setWorkedHoursPerWeek(source.getWorkedHoursPerWeek());
        source.getIndustryRecord().ifPresent(copy::setIndustryRecord);
        source.getNaicsIndustryRecord().ifPresent(copy::setNaicsIndustryRecord);
        source.getOccupation().ifPresent(copy::setOccupation);
        copy.setTotalPersonEarnings(source.getTotalPersonEarnings());
        copy.setTotalPersonIncome(source.getTotalPersonIncome());
        copy.setIncomeToPovertyRatio(source.getIncomeToPovertyRatio());
        
        return copy;
    }
}