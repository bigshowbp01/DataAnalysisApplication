package com.company.test.test.test.people.generated;

import com.company.test.test.test.people.People;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named people.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedPeopleSerializerImpl extends AbstractEntitySerializer<People> {
    
    protected final static long serialVersionUID = -406000816;
    private final static Serializer<Integer> ID_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SERIALNO_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> STATE_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> INCOME_ADJUSTMENT_CODE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> CLASS_OF_WORKER_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> DIVIDENTS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ALL_OTHER_INCOMES_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PUBLIC_ASSISTANCE_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RETIREMENT_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> EDUCATIONAL_ATTAINMENT_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> SELF_EMPLOYMENT_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SUPPLEMENTARY_SECURITY_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SOCIAL_SECURITY_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SALARY_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> SEX_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> WORKED_HOURS_PER_WEEK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> INDUSTRY_RECORD_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> NAICS_INDUSTRY_RECORD_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> OCCUPATION_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> TOTAL_PERSON_EARNINGS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TOTAL_PERSON_INCOME_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> INCOME_TO_POVERTY_RATIO_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    
    public GeneratedPeopleSerializerImpl(Manager<People> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final People people) throws IOException {
        final long[] bits = new long[1];
        if (!people.getClassOfWorker().isPresent()) BitSetUtil.set(bits, 0);
        if (!people.getEducationalAttainment().isPresent()) BitSetUtil.set(bits, 1);
        if (!people.getSex().isPresent()) BitSetUtil.set(bits, 2);
        if (!people.getIndustryRecord().isPresent()) BitSetUtil.set(bits, 3);
        if (!people.getNaicsIndustryRecord().isPresent()) BitSetUtil.set(bits, 4);
        if (!people.getOccupation().isPresent()) BitSetUtil.set(bits, 5);
        out.writeLong(bits[0]);
        out.writeInt(people.getId());
        out.writeInt(people.getSerialno());
        out.writeUTF(people.getState());
        out.writeInt(people.getIncomeAdjustmentCode());
        if (people.getClassOfWorker().isPresent()) out.writeUTF(people.getClassOfWorker().get());
        out.writeInt(people.getDividents());
        out.writeInt(people.getAllOtherIncomes());
        out.writeInt(people.getPublicAssistanceIncome());
        out.writeInt(people.getRetirementIncome());
        if (people.getEducationalAttainment().isPresent()) out.writeUTF(people.getEducationalAttainment().get());
        out.writeInt(people.getSelfEmploymentIncome());
        out.writeInt(people.getSupplementarySecurityIncome());
        out.writeInt(people.getSocialSecurityIncome());
        out.writeInt(people.getSalaryIncome());
        if (people.getSex().isPresent()) out.writeUTF(people.getSex().get());
        out.writeInt(people.getWorkedHoursPerWeek());
        if (people.getIndustryRecord().isPresent()) out.writeUTF(people.getIndustryRecord().get());
        if (people.getNaicsIndustryRecord().isPresent()) out.writeUTF(people.getNaicsIndustryRecord().get());
        if (people.getOccupation().isPresent()) out.writeUTF(people.getOccupation().get());
        out.writeInt(people.getTotalPersonEarnings());
        out.writeInt(people.getTotalPersonIncome());
        out.writeInt(people.getIncomeToPovertyRatio());
    }
    
    @Override
    public People deserialize(final DataInput in, final int available) throws IOException {
        final People people = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        people.setId(in.readInt());
        people.setSerialno(in.readInt());
        people.setState(in.readUTF());
        people.setIncomeAdjustmentCode(in.readInt());
        if (!BitSetUtil.get0(bits)) people.setClassOfWorker(in.readUTF());
        people.setDividents(in.readInt());
        people.setAllOtherIncomes(in.readInt());
        people.setPublicAssistanceIncome(in.readInt());
        people.setRetirementIncome(in.readInt());
        if (!BitSetUtil.get1(bits)) people.setEducationalAttainment(in.readUTF());
        people.setSelfEmploymentIncome(in.readInt());
        people.setSupplementarySecurityIncome(in.readInt());
        people.setSocialSecurityIncome(in.readInt());
        people.setSalaryIncome(in.readInt());
        if (!BitSetUtil.get2(bits)) people.setSex(in.readUTF());
        people.setWorkedHoursPerWeek(in.readInt());
        if (!BitSetUtil.get3(bits)) people.setIndustryRecord(in.readUTF());
        if (!BitSetUtil.get4(bits)) people.setNaicsIndustryRecord(in.readUTF());
        if (!BitSetUtil.get5(bits)) people.setOccupation(in.readUTF());
        people.setTotalPersonEarnings(in.readInt());
        people.setTotalPersonIncome(in.readInt());
        people.setIncomeToPovertyRatio(in.readInt());
        return people;
    }
}