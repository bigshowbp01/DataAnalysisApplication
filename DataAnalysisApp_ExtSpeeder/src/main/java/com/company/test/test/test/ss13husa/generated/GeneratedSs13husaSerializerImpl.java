package com.company.test.test.test.ss13husa.generated;

import com.company.test.test.test.ss13husa.Ss13husa;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named ss13husa.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedSs13husaSerializerImpl extends AbstractEntitySerializer<Ss13husa> {
    
    protected final static long serialVersionUID = 2103900190;
    private final static Serializer<Integer> RT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SERIALNO_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DIVISION_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PUMA_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> REGION_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ST_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ADJHSG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ADJINC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WGTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TYPE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ACCESS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ACR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> AGS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> BATH_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> BDSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> BLD_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> BROADBND_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> BUS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> COMPOTHX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> CONP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DIALUP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> DSL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> ELEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FIBEROP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FULP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GASP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HANDHELD_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HFL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> INSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> LAPTOP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MODEM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MRGI_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MRGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MRGT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MRGX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> OTHSVCEX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> REFR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RMSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RNTM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RNTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RWAT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RWATPR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SATELLITE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SINK_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> STOV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TEL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TEN_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TOIL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> VACS_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> VALP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> VEH_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WATP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> YBL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FES_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FGRNTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPARC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSMOCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GRNTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> GRPIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HHL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HHT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HINCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HUGCL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HUPAC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HUPAOC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> HUPARC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> KIT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> LNGI_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MULTG_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> MV_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NOC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NPF_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NPP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NR_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> NRC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> OCPIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PARTNER_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PLM_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> PSF_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> R18_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> R60_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> R65_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> RESMODE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SMOCP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SMX_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SRNT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SSMC_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> SVAL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> TAXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WIF_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WKEXREL_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> WORKSTAT_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FACCESSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FACRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FAGSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FBATHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FBDSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FBLDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FBROADBNDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FBUSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FCOMPOTHXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FCONP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDIALUPP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FDSLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FELEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFIBEROPP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FFULP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FGASP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHANDHELDP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FHFLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FINSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FKITP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FLAPTOPP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMODEMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMRGIP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMRGP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMRGTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMRGXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FMVP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FOTHSVCEXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FPLMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FREFRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRMSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRNTMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRNTP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRWATP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FRWATPRP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSATELLITEP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSINKP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSMP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSMXHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSMXSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FSTOVP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FTAXP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FTELP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FTENP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FTOILP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FVACSP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FVALP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FVEHP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FWATP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> FYBLP_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    
    public GeneratedSs13husaSerializerImpl(Manager<Ss13husa> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final Ss13husa ss13husa) throws IOException {
        final long[] bits = new long[3];
        if (!ss13husa.getRt().isPresent()) BitSetUtil.set(bits, 0);
        if (!ss13husa.getSerialno().isPresent()) BitSetUtil.set(bits, 1);
        if (!ss13husa.getDivision().isPresent()) BitSetUtil.set(bits, 2);
        if (!ss13husa.getPuma().isPresent()) BitSetUtil.set(bits, 3);
        if (!ss13husa.getRegion().isPresent()) BitSetUtil.set(bits, 4);
        if (!ss13husa.getSt().isPresent()) BitSetUtil.set(bits, 5);
        if (!ss13husa.getAdjhsg().isPresent()) BitSetUtil.set(bits, 6);
        if (!ss13husa.getAdjinc().isPresent()) BitSetUtil.set(bits, 7);
        if (!ss13husa.getWgtp().isPresent()) BitSetUtil.set(bits, 8);
        if (!ss13husa.getNp().isPresent()) BitSetUtil.set(bits, 9);
        if (!ss13husa.getType().isPresent()) BitSetUtil.set(bits, 10);
        if (!ss13husa.getAccess().isPresent()) BitSetUtil.set(bits, 11);
        if (!ss13husa.getAcr().isPresent()) BitSetUtil.set(bits, 12);
        if (!ss13husa.getAgs().isPresent()) BitSetUtil.set(bits, 13);
        if (!ss13husa.getBath().isPresent()) BitSetUtil.set(bits, 14);
        if (!ss13husa.getBdsp().isPresent()) BitSetUtil.set(bits, 15);
        if (!ss13husa.getBld().isPresent()) BitSetUtil.set(bits, 16);
        if (!ss13husa.getBroadbnd().isPresent()) BitSetUtil.set(bits, 17);
        if (!ss13husa.getBus().isPresent()) BitSetUtil.set(bits, 18);
        if (!ss13husa.getCompothx().isPresent()) BitSetUtil.set(bits, 19);
        if (!ss13husa.getConp().isPresent()) BitSetUtil.set(bits, 20);
        if (!ss13husa.getDialup().isPresent()) BitSetUtil.set(bits, 21);
        if (!ss13husa.getDsl().isPresent()) BitSetUtil.set(bits, 22);
        if (!ss13husa.getElep().isPresent()) BitSetUtil.set(bits, 23);
        if (!ss13husa.getFiberop().isPresent()) BitSetUtil.set(bits, 24);
        if (!ss13husa.getFs().isPresent()) BitSetUtil.set(bits, 25);
        if (!ss13husa.getFulp().isPresent()) BitSetUtil.set(bits, 26);
        if (!ss13husa.getGasp().isPresent()) BitSetUtil.set(bits, 27);
        if (!ss13husa.getHandheld().isPresent()) BitSetUtil.set(bits, 28);
        if (!ss13husa.getHfl().isPresent()) BitSetUtil.set(bits, 29);
        if (!ss13husa.getInsp().isPresent()) BitSetUtil.set(bits, 30);
        if (!ss13husa.getLaptop().isPresent()) BitSetUtil.set(bits, 31);
        if (!ss13husa.getMhp().isPresent()) BitSetUtil.set(bits, 32);
        if (!ss13husa.getModem().isPresent()) BitSetUtil.set(bits, 33);
        if (!ss13husa.getMrgi().isPresent()) BitSetUtil.set(bits, 34);
        if (!ss13husa.getMrgp().isPresent()) BitSetUtil.set(bits, 35);
        if (!ss13husa.getMrgt().isPresent()) BitSetUtil.set(bits, 36);
        if (!ss13husa.getMrgx().isPresent()) BitSetUtil.set(bits, 37);
        if (!ss13husa.getOthsvcex().isPresent()) BitSetUtil.set(bits, 38);
        if (!ss13husa.getRefr().isPresent()) BitSetUtil.set(bits, 39);
        if (!ss13husa.getRmsp().isPresent()) BitSetUtil.set(bits, 40);
        if (!ss13husa.getRntm().isPresent()) BitSetUtil.set(bits, 41);
        if (!ss13husa.getRntp().isPresent()) BitSetUtil.set(bits, 42);
        if (!ss13husa.getRwat().isPresent()) BitSetUtil.set(bits, 43);
        if (!ss13husa.getRwatpr().isPresent()) BitSetUtil.set(bits, 44);
        if (!ss13husa.getSatellite().isPresent()) BitSetUtil.set(bits, 45);
        if (!ss13husa.getSink().isPresent()) BitSetUtil.set(bits, 46);
        if (!ss13husa.getSmp().isPresent()) BitSetUtil.set(bits, 47);
        if (!ss13husa.getStov().isPresent()) BitSetUtil.set(bits, 48);
        if (!ss13husa.getTel().isPresent()) BitSetUtil.set(bits, 49);
        if (!ss13husa.getTen().isPresent()) BitSetUtil.set(bits, 50);
        if (!ss13husa.getToil().isPresent()) BitSetUtil.set(bits, 51);
        if (!ss13husa.getVacs().isPresent()) BitSetUtil.set(bits, 52);
        if (!ss13husa.getValp().isPresent()) BitSetUtil.set(bits, 53);
        if (!ss13husa.getVeh().isPresent()) BitSetUtil.set(bits, 54);
        if (!ss13husa.getWatp().isPresent()) BitSetUtil.set(bits, 55);
        if (!ss13husa.getYbl().isPresent()) BitSetUtil.set(bits, 56);
        if (!ss13husa.getFes().isPresent()) BitSetUtil.set(bits, 57);
        if (!ss13husa.getFfincp().isPresent()) BitSetUtil.set(bits, 58);
        if (!ss13husa.getFgrntp().isPresent()) BitSetUtil.set(bits, 59);
        if (!ss13husa.getFhincp().isPresent()) BitSetUtil.set(bits, 60);
        if (!ss13husa.getFincp().isPresent()) BitSetUtil.set(bits, 61);
        if (!ss13husa.getFparc().isPresent()) BitSetUtil.set(bits, 62);
        if (!ss13husa.getFsmocp().isPresent()) BitSetUtil.set(bits, 63);
        if (!ss13husa.getGrntp().isPresent()) BitSetUtil.set(bits, 64);
        if (!ss13husa.getGrpip().isPresent()) BitSetUtil.set(bits, 65);
        if (!ss13husa.getHhl().isPresent()) BitSetUtil.set(bits, 66);
        if (!ss13husa.getHht().isPresent()) BitSetUtil.set(bits, 67);
        if (!ss13husa.getHincp().isPresent()) BitSetUtil.set(bits, 68);
        if (!ss13husa.getHugcl().isPresent()) BitSetUtil.set(bits, 69);
        if (!ss13husa.getHupac().isPresent()) BitSetUtil.set(bits, 70);
        if (!ss13husa.getHupaoc().isPresent()) BitSetUtil.set(bits, 71);
        if (!ss13husa.getHuparc().isPresent()) BitSetUtil.set(bits, 72);
        if (!ss13husa.getKit().isPresent()) BitSetUtil.set(bits, 73);
        if (!ss13husa.getLngi().isPresent()) BitSetUtil.set(bits, 74);
        if (!ss13husa.getMultg().isPresent()) BitSetUtil.set(bits, 75);
        if (!ss13husa.getMv().isPresent()) BitSetUtil.set(bits, 76);
        if (!ss13husa.getNoc().isPresent()) BitSetUtil.set(bits, 77);
        if (!ss13husa.getNpf().isPresent()) BitSetUtil.set(bits, 78);
        if (!ss13husa.getNpp().isPresent()) BitSetUtil.set(bits, 79);
        if (!ss13husa.getNr().isPresent()) BitSetUtil.set(bits, 80);
        if (!ss13husa.getNrc().isPresent()) BitSetUtil.set(bits, 81);
        if (!ss13husa.getOcpip().isPresent()) BitSetUtil.set(bits, 82);
        if (!ss13husa.getPartner().isPresent()) BitSetUtil.set(bits, 83);
        if (!ss13husa.getPlm().isPresent()) BitSetUtil.set(bits, 84);
        if (!ss13husa.getPsf().isPresent()) BitSetUtil.set(bits, 85);
        if (!ss13husa.getR18().isPresent()) BitSetUtil.set(bits, 86);
        if (!ss13husa.getR60().isPresent()) BitSetUtil.set(bits, 87);
        if (!ss13husa.getR65().isPresent()) BitSetUtil.set(bits, 88);
        if (!ss13husa.getResmode().isPresent()) BitSetUtil.set(bits, 89);
        if (!ss13husa.getSmocp().isPresent()) BitSetUtil.set(bits, 90);
        if (!ss13husa.getSmx().isPresent()) BitSetUtil.set(bits, 91);
        if (!ss13husa.getSrnt().isPresent()) BitSetUtil.set(bits, 92);
        if (!ss13husa.getSsmc().isPresent()) BitSetUtil.set(bits, 93);
        if (!ss13husa.getSval().isPresent()) BitSetUtil.set(bits, 94);
        if (!ss13husa.getTaxp().isPresent()) BitSetUtil.set(bits, 95);
        if (!ss13husa.getWif().isPresent()) BitSetUtil.set(bits, 96);
        if (!ss13husa.getWkexrel().isPresent()) BitSetUtil.set(bits, 97);
        if (!ss13husa.getWorkstat().isPresent()) BitSetUtil.set(bits, 98);
        if (!ss13husa.getFaccessp().isPresent()) BitSetUtil.set(bits, 99);
        if (!ss13husa.getFacrp().isPresent()) BitSetUtil.set(bits, 100);
        if (!ss13husa.getFagsp().isPresent()) BitSetUtil.set(bits, 101);
        if (!ss13husa.getFbathp().isPresent()) BitSetUtil.set(bits, 102);
        if (!ss13husa.getFbdsp().isPresent()) BitSetUtil.set(bits, 103);
        if (!ss13husa.getFbldp().isPresent()) BitSetUtil.set(bits, 104);
        if (!ss13husa.getFbroadbndp().isPresent()) BitSetUtil.set(bits, 105);
        if (!ss13husa.getFbusp().isPresent()) BitSetUtil.set(bits, 106);
        if (!ss13husa.getFcompothxp().isPresent()) BitSetUtil.set(bits, 107);
        if (!ss13husa.getFconp().isPresent()) BitSetUtil.set(bits, 108);
        if (!ss13husa.getFdialupp().isPresent()) BitSetUtil.set(bits, 109);
        if (!ss13husa.getFdslp().isPresent()) BitSetUtil.set(bits, 110);
        if (!ss13husa.getFelep().isPresent()) BitSetUtil.set(bits, 111);
        if (!ss13husa.getFfiberopp().isPresent()) BitSetUtil.set(bits, 112);
        if (!ss13husa.getFfsp().isPresent()) BitSetUtil.set(bits, 113);
        if (!ss13husa.getFfulp().isPresent()) BitSetUtil.set(bits, 114);
        if (!ss13husa.getFgasp().isPresent()) BitSetUtil.set(bits, 115);
        if (!ss13husa.getFhandheldp().isPresent()) BitSetUtil.set(bits, 116);
        if (!ss13husa.getFhflp().isPresent()) BitSetUtil.set(bits, 117);
        if (!ss13husa.getFinsp().isPresent()) BitSetUtil.set(bits, 118);
        if (!ss13husa.getFkitp().isPresent()) BitSetUtil.set(bits, 119);
        if (!ss13husa.getFlaptopp().isPresent()) BitSetUtil.set(bits, 120);
        if (!ss13husa.getFmhp().isPresent()) BitSetUtil.set(bits, 121);
        if (!ss13husa.getFmodemp().isPresent()) BitSetUtil.set(bits, 122);
        if (!ss13husa.getFmrgip().isPresent()) BitSetUtil.set(bits, 123);
        if (!ss13husa.getFmrgp().isPresent()) BitSetUtil.set(bits, 124);
        if (!ss13husa.getFmrgtp().isPresent()) BitSetUtil.set(bits, 125);
        if (!ss13husa.getFmrgxp().isPresent()) BitSetUtil.set(bits, 126);
        if (!ss13husa.getFmvp().isPresent()) BitSetUtil.set(bits, 127);
        if (!ss13husa.getFothsvcexp().isPresent()) BitSetUtil.set(bits, 128);
        if (!ss13husa.getFplmp().isPresent()) BitSetUtil.set(bits, 129);
        if (!ss13husa.getFrefrp().isPresent()) BitSetUtil.set(bits, 130);
        if (!ss13husa.getFrmsp().isPresent()) BitSetUtil.set(bits, 131);
        if (!ss13husa.getFrntmp().isPresent()) BitSetUtil.set(bits, 132);
        if (!ss13husa.getFrntp().isPresent()) BitSetUtil.set(bits, 133);
        if (!ss13husa.getFrwatp().isPresent()) BitSetUtil.set(bits, 134);
        if (!ss13husa.getFrwatprp().isPresent()) BitSetUtil.set(bits, 135);
        if (!ss13husa.getFsatellitep().isPresent()) BitSetUtil.set(bits, 136);
        if (!ss13husa.getFsinkp().isPresent()) BitSetUtil.set(bits, 137);
        if (!ss13husa.getFsmp().isPresent()) BitSetUtil.set(bits, 138);
        if (!ss13husa.getFsmxhp().isPresent()) BitSetUtil.set(bits, 139);
        if (!ss13husa.getFsmxsp().isPresent()) BitSetUtil.set(bits, 140);
        if (!ss13husa.getFstovp().isPresent()) BitSetUtil.set(bits, 141);
        if (!ss13husa.getFtaxp().isPresent()) BitSetUtil.set(bits, 142);
        if (!ss13husa.getFtelp().isPresent()) BitSetUtil.set(bits, 143);
        if (!ss13husa.getFtenp().isPresent()) BitSetUtil.set(bits, 144);
        if (!ss13husa.getFtoilp().isPresent()) BitSetUtil.set(bits, 145);
        if (!ss13husa.getFvacsp().isPresent()) BitSetUtil.set(bits, 146);
        if (!ss13husa.getFvalp().isPresent()) BitSetUtil.set(bits, 147);
        if (!ss13husa.getFvehp().isPresent()) BitSetUtil.set(bits, 148);
        if (!ss13husa.getFwatp().isPresent()) BitSetUtil.set(bits, 149);
        if (!ss13husa.getFyblp().isPresent()) BitSetUtil.set(bits, 150);
        out.writeLong(bits[0]);
        out.writeLong(bits[1]);
        out.writeLong(bits[2]);
        if (ss13husa.getRt().isPresent()) out.writeInt(ss13husa.getRt().get());
        if (ss13husa.getSerialno().isPresent()) out.writeInt(ss13husa.getSerialno().get());
        if (ss13husa.getDivision().isPresent()) out.writeInt(ss13husa.getDivision().get());
        if (ss13husa.getPuma().isPresent()) out.writeInt(ss13husa.getPuma().get());
        if (ss13husa.getRegion().isPresent()) out.writeInt(ss13husa.getRegion().get());
        if (ss13husa.getSt().isPresent()) out.writeInt(ss13husa.getSt().get());
        if (ss13husa.getAdjhsg().isPresent()) out.writeInt(ss13husa.getAdjhsg().get());
        if (ss13husa.getAdjinc().isPresent()) out.writeInt(ss13husa.getAdjinc().get());
        if (ss13husa.getWgtp().isPresent()) out.writeInt(ss13husa.getWgtp().get());
        if (ss13husa.getNp().isPresent()) out.writeInt(ss13husa.getNp().get());
        if (ss13husa.getType().isPresent()) out.writeInt(ss13husa.getType().get());
        if (ss13husa.getAccess().isPresent()) out.writeInt(ss13husa.getAccess().get());
        if (ss13husa.getAcr().isPresent()) out.writeInt(ss13husa.getAcr().get());
        if (ss13husa.getAgs().isPresent()) out.writeInt(ss13husa.getAgs().get());
        if (ss13husa.getBath().isPresent()) out.writeInt(ss13husa.getBath().get());
        if (ss13husa.getBdsp().isPresent()) out.writeInt(ss13husa.getBdsp().get());
        if (ss13husa.getBld().isPresent()) out.writeInt(ss13husa.getBld().get());
        if (ss13husa.getBroadbnd().isPresent()) out.writeInt(ss13husa.getBroadbnd().get());
        if (ss13husa.getBus().isPresent()) out.writeInt(ss13husa.getBus().get());
        if (ss13husa.getCompothx().isPresent()) out.writeInt(ss13husa.getCompothx().get());
        if (ss13husa.getConp().isPresent()) out.writeInt(ss13husa.getConp().get());
        if (ss13husa.getDialup().isPresent()) out.writeInt(ss13husa.getDialup().get());
        if (ss13husa.getDsl().isPresent()) out.writeInt(ss13husa.getDsl().get());
        if (ss13husa.getElep().isPresent()) out.writeInt(ss13husa.getElep().get());
        if (ss13husa.getFiberop().isPresent()) out.writeInt(ss13husa.getFiberop().get());
        if (ss13husa.getFs().isPresent()) out.writeInt(ss13husa.getFs().get());
        if (ss13husa.getFulp().isPresent()) out.writeInt(ss13husa.getFulp().get());
        if (ss13husa.getGasp().isPresent()) out.writeInt(ss13husa.getGasp().get());
        if (ss13husa.getHandheld().isPresent()) out.writeInt(ss13husa.getHandheld().get());
        if (ss13husa.getHfl().isPresent()) out.writeInt(ss13husa.getHfl().get());
        if (ss13husa.getInsp().isPresent()) out.writeInt(ss13husa.getInsp().get());
        if (ss13husa.getLaptop().isPresent()) out.writeInt(ss13husa.getLaptop().get());
        if (ss13husa.getMhp().isPresent()) out.writeInt(ss13husa.getMhp().get());
        if (ss13husa.getModem().isPresent()) out.writeInt(ss13husa.getModem().get());
        if (ss13husa.getMrgi().isPresent()) out.writeInt(ss13husa.getMrgi().get());
        if (ss13husa.getMrgp().isPresent()) out.writeInt(ss13husa.getMrgp().get());
        if (ss13husa.getMrgt().isPresent()) out.writeInt(ss13husa.getMrgt().get());
        if (ss13husa.getMrgx().isPresent()) out.writeInt(ss13husa.getMrgx().get());
        if (ss13husa.getOthsvcex().isPresent()) out.writeInt(ss13husa.getOthsvcex().get());
        if (ss13husa.getRefr().isPresent()) out.writeInt(ss13husa.getRefr().get());
        if (ss13husa.getRmsp().isPresent()) out.writeInt(ss13husa.getRmsp().get());
        if (ss13husa.getRntm().isPresent()) out.writeInt(ss13husa.getRntm().get());
        if (ss13husa.getRntp().isPresent()) out.writeInt(ss13husa.getRntp().get());
        if (ss13husa.getRwat().isPresent()) out.writeInt(ss13husa.getRwat().get());
        if (ss13husa.getRwatpr().isPresent()) out.writeInt(ss13husa.getRwatpr().get());
        if (ss13husa.getSatellite().isPresent()) out.writeInt(ss13husa.getSatellite().get());
        if (ss13husa.getSink().isPresent()) out.writeInt(ss13husa.getSink().get());
        if (ss13husa.getSmp().isPresent()) out.writeInt(ss13husa.getSmp().get());
        if (ss13husa.getStov().isPresent()) out.writeInt(ss13husa.getStov().get());
        if (ss13husa.getTel().isPresent()) out.writeInt(ss13husa.getTel().get());
        if (ss13husa.getTen().isPresent()) out.writeInt(ss13husa.getTen().get());
        if (ss13husa.getToil().isPresent()) out.writeInt(ss13husa.getToil().get());
        if (ss13husa.getVacs().isPresent()) out.writeInt(ss13husa.getVacs().get());
        if (ss13husa.getValp().isPresent()) out.writeInt(ss13husa.getValp().get());
        if (ss13husa.getVeh().isPresent()) out.writeInt(ss13husa.getVeh().get());
        if (ss13husa.getWatp().isPresent()) out.writeInt(ss13husa.getWatp().get());
        if (ss13husa.getYbl().isPresent()) out.writeInt(ss13husa.getYbl().get());
        if (ss13husa.getFes().isPresent()) out.writeInt(ss13husa.getFes().get());
        if (ss13husa.getFfincp().isPresent()) out.writeInt(ss13husa.getFfincp().get());
        if (ss13husa.getFgrntp().isPresent()) out.writeInt(ss13husa.getFgrntp().get());
        if (ss13husa.getFhincp().isPresent()) out.writeInt(ss13husa.getFhincp().get());
        if (ss13husa.getFincp().isPresent()) out.writeInt(ss13husa.getFincp().get());
        if (ss13husa.getFparc().isPresent()) out.writeInt(ss13husa.getFparc().get());
        if (ss13husa.getFsmocp().isPresent()) out.writeInt(ss13husa.getFsmocp().get());
        if (ss13husa.getGrntp().isPresent()) out.writeInt(ss13husa.getGrntp().get());
        if (ss13husa.getGrpip().isPresent()) out.writeInt(ss13husa.getGrpip().get());
        if (ss13husa.getHhl().isPresent()) out.writeInt(ss13husa.getHhl().get());
        if (ss13husa.getHht().isPresent()) out.writeInt(ss13husa.getHht().get());
        if (ss13husa.getHincp().isPresent()) out.writeInt(ss13husa.getHincp().get());
        if (ss13husa.getHugcl().isPresent()) out.writeInt(ss13husa.getHugcl().get());
        if (ss13husa.getHupac().isPresent()) out.writeInt(ss13husa.getHupac().get());
        if (ss13husa.getHupaoc().isPresent()) out.writeInt(ss13husa.getHupaoc().get());
        if (ss13husa.getHuparc().isPresent()) out.writeInt(ss13husa.getHuparc().get());
        if (ss13husa.getKit().isPresent()) out.writeInt(ss13husa.getKit().get());
        if (ss13husa.getLngi().isPresent()) out.writeInt(ss13husa.getLngi().get());
        if (ss13husa.getMultg().isPresent()) out.writeInt(ss13husa.getMultg().get());
        if (ss13husa.getMv().isPresent()) out.writeInt(ss13husa.getMv().get());
        if (ss13husa.getNoc().isPresent()) out.writeInt(ss13husa.getNoc().get());
        if (ss13husa.getNpf().isPresent()) out.writeInt(ss13husa.getNpf().get());
        if (ss13husa.getNpp().isPresent()) out.writeInt(ss13husa.getNpp().get());
        if (ss13husa.getNr().isPresent()) out.writeInt(ss13husa.getNr().get());
        if (ss13husa.getNrc().isPresent()) out.writeInt(ss13husa.getNrc().get());
        if (ss13husa.getOcpip().isPresent()) out.writeInt(ss13husa.getOcpip().get());
        if (ss13husa.getPartner().isPresent()) out.writeInt(ss13husa.getPartner().get());
        if (ss13husa.getPlm().isPresent()) out.writeInt(ss13husa.getPlm().get());
        if (ss13husa.getPsf().isPresent()) out.writeInt(ss13husa.getPsf().get());
        if (ss13husa.getR18().isPresent()) out.writeInt(ss13husa.getR18().get());
        if (ss13husa.getR60().isPresent()) out.writeInt(ss13husa.getR60().get());
        if (ss13husa.getR65().isPresent()) out.writeInt(ss13husa.getR65().get());
        if (ss13husa.getResmode().isPresent()) out.writeInt(ss13husa.getResmode().get());
        if (ss13husa.getSmocp().isPresent()) out.writeInt(ss13husa.getSmocp().get());
        if (ss13husa.getSmx().isPresent()) out.writeInt(ss13husa.getSmx().get());
        if (ss13husa.getSrnt().isPresent()) out.writeInt(ss13husa.getSrnt().get());
        if (ss13husa.getSsmc().isPresent()) out.writeInt(ss13husa.getSsmc().get());
        if (ss13husa.getSval().isPresent()) out.writeInt(ss13husa.getSval().get());
        if (ss13husa.getTaxp().isPresent()) out.writeInt(ss13husa.getTaxp().get());
        if (ss13husa.getWif().isPresent()) out.writeInt(ss13husa.getWif().get());
        if (ss13husa.getWkexrel().isPresent()) out.writeInt(ss13husa.getWkexrel().get());
        if (ss13husa.getWorkstat().isPresent()) out.writeInt(ss13husa.getWorkstat().get());
        if (ss13husa.getFaccessp().isPresent()) out.writeInt(ss13husa.getFaccessp().get());
        if (ss13husa.getFacrp().isPresent()) out.writeInt(ss13husa.getFacrp().get());
        if (ss13husa.getFagsp().isPresent()) out.writeInt(ss13husa.getFagsp().get());
        if (ss13husa.getFbathp().isPresent()) out.writeInt(ss13husa.getFbathp().get());
        if (ss13husa.getFbdsp().isPresent()) out.writeInt(ss13husa.getFbdsp().get());
        if (ss13husa.getFbldp().isPresent()) out.writeInt(ss13husa.getFbldp().get());
        if (ss13husa.getFbroadbndp().isPresent()) out.writeInt(ss13husa.getFbroadbndp().get());
        if (ss13husa.getFbusp().isPresent()) out.writeInt(ss13husa.getFbusp().get());
        if (ss13husa.getFcompothxp().isPresent()) out.writeInt(ss13husa.getFcompothxp().get());
        if (ss13husa.getFconp().isPresent()) out.writeInt(ss13husa.getFconp().get());
        if (ss13husa.getFdialupp().isPresent()) out.writeInt(ss13husa.getFdialupp().get());
        if (ss13husa.getFdslp().isPresent()) out.writeInt(ss13husa.getFdslp().get());
        if (ss13husa.getFelep().isPresent()) out.writeInt(ss13husa.getFelep().get());
        if (ss13husa.getFfiberopp().isPresent()) out.writeInt(ss13husa.getFfiberopp().get());
        if (ss13husa.getFfsp().isPresent()) out.writeInt(ss13husa.getFfsp().get());
        if (ss13husa.getFfulp().isPresent()) out.writeInt(ss13husa.getFfulp().get());
        if (ss13husa.getFgasp().isPresent()) out.writeInt(ss13husa.getFgasp().get());
        if (ss13husa.getFhandheldp().isPresent()) out.writeInt(ss13husa.getFhandheldp().get());
        if (ss13husa.getFhflp().isPresent()) out.writeInt(ss13husa.getFhflp().get());
        if (ss13husa.getFinsp().isPresent()) out.writeInt(ss13husa.getFinsp().get());
        if (ss13husa.getFkitp().isPresent()) out.writeInt(ss13husa.getFkitp().get());
        if (ss13husa.getFlaptopp().isPresent()) out.writeInt(ss13husa.getFlaptopp().get());
        if (ss13husa.getFmhp().isPresent()) out.writeInt(ss13husa.getFmhp().get());
        if (ss13husa.getFmodemp().isPresent()) out.writeInt(ss13husa.getFmodemp().get());
        if (ss13husa.getFmrgip().isPresent()) out.writeInt(ss13husa.getFmrgip().get());
        if (ss13husa.getFmrgp().isPresent()) out.writeInt(ss13husa.getFmrgp().get());
        if (ss13husa.getFmrgtp().isPresent()) out.writeInt(ss13husa.getFmrgtp().get());
        if (ss13husa.getFmrgxp().isPresent()) out.writeInt(ss13husa.getFmrgxp().get());
        if (ss13husa.getFmvp().isPresent()) out.writeInt(ss13husa.getFmvp().get());
        if (ss13husa.getFothsvcexp().isPresent()) out.writeInt(ss13husa.getFothsvcexp().get());
        if (ss13husa.getFplmp().isPresent()) out.writeInt(ss13husa.getFplmp().get());
        if (ss13husa.getFrefrp().isPresent()) out.writeInt(ss13husa.getFrefrp().get());
        if (ss13husa.getFrmsp().isPresent()) out.writeInt(ss13husa.getFrmsp().get());
        if (ss13husa.getFrntmp().isPresent()) out.writeInt(ss13husa.getFrntmp().get());
        if (ss13husa.getFrntp().isPresent()) out.writeInt(ss13husa.getFrntp().get());
        if (ss13husa.getFrwatp().isPresent()) out.writeInt(ss13husa.getFrwatp().get());
        if (ss13husa.getFrwatprp().isPresent()) out.writeInt(ss13husa.getFrwatprp().get());
        if (ss13husa.getFsatellitep().isPresent()) out.writeInt(ss13husa.getFsatellitep().get());
        if (ss13husa.getFsinkp().isPresent()) out.writeInt(ss13husa.getFsinkp().get());
        if (ss13husa.getFsmp().isPresent()) out.writeInt(ss13husa.getFsmp().get());
        if (ss13husa.getFsmxhp().isPresent()) out.writeInt(ss13husa.getFsmxhp().get());
        if (ss13husa.getFsmxsp().isPresent()) out.writeInt(ss13husa.getFsmxsp().get());
        if (ss13husa.getFstovp().isPresent()) out.writeInt(ss13husa.getFstovp().get());
        if (ss13husa.getFtaxp().isPresent()) out.writeInt(ss13husa.getFtaxp().get());
        if (ss13husa.getFtelp().isPresent()) out.writeInt(ss13husa.getFtelp().get());
        if (ss13husa.getFtenp().isPresent()) out.writeInt(ss13husa.getFtenp().get());
        if (ss13husa.getFtoilp().isPresent()) out.writeInt(ss13husa.getFtoilp().get());
        if (ss13husa.getFvacsp().isPresent()) out.writeInt(ss13husa.getFvacsp().get());
        if (ss13husa.getFvalp().isPresent()) out.writeInt(ss13husa.getFvalp().get());
        if (ss13husa.getFvehp().isPresent()) out.writeInt(ss13husa.getFvehp().get());
        if (ss13husa.getFwatp().isPresent()) out.writeInt(ss13husa.getFwatp().get());
        if (ss13husa.getFyblp().isPresent()) out.writeInt(ss13husa.getFyblp().get());
    }
    
    @Override
    public Ss13husa deserialize(final DataInput in, final int available) throws IOException {
        final Ss13husa ss13husa = manager.newEmptyEntity();
        final long[] bits = new long[3];
        bits[0] = in.readLong();
        bits[1] = in.readLong();
        bits[2] = in.readLong();
        if (!BitSetUtil.get0(bits)) ss13husa.setRt(in.readInt());
        if (!BitSetUtil.get1(bits)) ss13husa.setSerialno(in.readInt());
        if (!BitSetUtil.get2(bits)) ss13husa.setDivision(in.readInt());
        if (!BitSetUtil.get3(bits)) ss13husa.setPuma(in.readInt());
        if (!BitSetUtil.get4(bits)) ss13husa.setRegion(in.readInt());
        if (!BitSetUtil.get5(bits)) ss13husa.setSt(in.readInt());
        if (!BitSetUtil.get6(bits)) ss13husa.setAdjhsg(in.readInt());
        if (!BitSetUtil.get7(bits)) ss13husa.setAdjinc(in.readInt());
        if (!BitSetUtil.get8(bits)) ss13husa.setWgtp(in.readInt());
        if (!BitSetUtil.get9(bits)) ss13husa.setNp(in.readInt());
        if (!BitSetUtil.get(bits, 10)) ss13husa.setType(in.readInt());
        if (!BitSetUtil.get(bits, 11)) ss13husa.setAccess(in.readInt());
        if (!BitSetUtil.get(bits, 12)) ss13husa.setAcr(in.readInt());
        if (!BitSetUtil.get(bits, 13)) ss13husa.setAgs(in.readInt());
        if (!BitSetUtil.get(bits, 14)) ss13husa.setBath(in.readInt());
        if (!BitSetUtil.get(bits, 15)) ss13husa.setBdsp(in.readInt());
        if (!BitSetUtil.get(bits, 16)) ss13husa.setBld(in.readInt());
        if (!BitSetUtil.get(bits, 17)) ss13husa.setBroadbnd(in.readInt());
        if (!BitSetUtil.get(bits, 18)) ss13husa.setBus(in.readInt());
        if (!BitSetUtil.get(bits, 19)) ss13husa.setCompothx(in.readInt());
        if (!BitSetUtil.get(bits, 20)) ss13husa.setConp(in.readInt());
        if (!BitSetUtil.get(bits, 21)) ss13husa.setDialup(in.readInt());
        if (!BitSetUtil.get(bits, 22)) ss13husa.setDsl(in.readInt());
        if (!BitSetUtil.get(bits, 23)) ss13husa.setElep(in.readInt());
        if (!BitSetUtil.get(bits, 24)) ss13husa.setFiberop(in.readInt());
        if (!BitSetUtil.get(bits, 25)) ss13husa.setFs(in.readInt());
        if (!BitSetUtil.get(bits, 26)) ss13husa.setFulp(in.readInt());
        if (!BitSetUtil.get(bits, 27)) ss13husa.setGasp(in.readInt());
        if (!BitSetUtil.get(bits, 28)) ss13husa.setHandheld(in.readInt());
        if (!BitSetUtil.get(bits, 29)) ss13husa.setHfl(in.readInt());
        if (!BitSetUtil.get(bits, 30)) ss13husa.setInsp(in.readInt());
        if (!BitSetUtil.get(bits, 31)) ss13husa.setLaptop(in.readInt());
        if (!BitSetUtil.get(bits, 32)) ss13husa.setMhp(in.readInt());
        if (!BitSetUtil.get(bits, 33)) ss13husa.setModem(in.readInt());
        if (!BitSetUtil.get(bits, 34)) ss13husa.setMrgi(in.readInt());
        if (!BitSetUtil.get(bits, 35)) ss13husa.setMrgp(in.readInt());
        if (!BitSetUtil.get(bits, 36)) ss13husa.setMrgt(in.readInt());
        if (!BitSetUtil.get(bits, 37)) ss13husa.setMrgx(in.readInt());
        if (!BitSetUtil.get(bits, 38)) ss13husa.setOthsvcex(in.readInt());
        if (!BitSetUtil.get(bits, 39)) ss13husa.setRefr(in.readInt());
        if (!BitSetUtil.get(bits, 40)) ss13husa.setRmsp(in.readInt());
        if (!BitSetUtil.get(bits, 41)) ss13husa.setRntm(in.readInt());
        if (!BitSetUtil.get(bits, 42)) ss13husa.setRntp(in.readInt());
        if (!BitSetUtil.get(bits, 43)) ss13husa.setRwat(in.readInt());
        if (!BitSetUtil.get(bits, 44)) ss13husa.setRwatpr(in.readInt());
        if (!BitSetUtil.get(bits, 45)) ss13husa.setSatellite(in.readInt());
        if (!BitSetUtil.get(bits, 46)) ss13husa.setSink(in.readInt());
        if (!BitSetUtil.get(bits, 47)) ss13husa.setSmp(in.readInt());
        if (!BitSetUtil.get(bits, 48)) ss13husa.setStov(in.readInt());
        if (!BitSetUtil.get(bits, 49)) ss13husa.setTel(in.readInt());
        if (!BitSetUtil.get(bits, 50)) ss13husa.setTen(in.readInt());
        if (!BitSetUtil.get(bits, 51)) ss13husa.setToil(in.readInt());
        if (!BitSetUtil.get(bits, 52)) ss13husa.setVacs(in.readInt());
        if (!BitSetUtil.get(bits, 53)) ss13husa.setValp(in.readInt());
        if (!BitSetUtil.get(bits, 54)) ss13husa.setVeh(in.readInt());
        if (!BitSetUtil.get(bits, 55)) ss13husa.setWatp(in.readInt());
        if (!BitSetUtil.get(bits, 56)) ss13husa.setYbl(in.readInt());
        if (!BitSetUtil.get(bits, 57)) ss13husa.setFes(in.readInt());
        if (!BitSetUtil.get(bits, 58)) ss13husa.setFfincp(in.readInt());
        if (!BitSetUtil.get(bits, 59)) ss13husa.setFgrntp(in.readInt());
        if (!BitSetUtil.get(bits, 60)) ss13husa.setFhincp(in.readInt());
        if (!BitSetUtil.get(bits, 61)) ss13husa.setFincp(in.readInt());
        if (!BitSetUtil.get(bits, 62)) ss13husa.setFparc(in.readInt());
        if (!BitSetUtil.get(bits, 63)) ss13husa.setFsmocp(in.readInt());
        if (!BitSetUtil.get(bits, 64)) ss13husa.setGrntp(in.readInt());
        if (!BitSetUtil.get(bits, 65)) ss13husa.setGrpip(in.readInt());
        if (!BitSetUtil.get(bits, 66)) ss13husa.setHhl(in.readInt());
        if (!BitSetUtil.get(bits, 67)) ss13husa.setHht(in.readInt());
        if (!BitSetUtil.get(bits, 68)) ss13husa.setHincp(in.readInt());
        if (!BitSetUtil.get(bits, 69)) ss13husa.setHugcl(in.readInt());
        if (!BitSetUtil.get(bits, 70)) ss13husa.setHupac(in.readInt());
        if (!BitSetUtil.get(bits, 71)) ss13husa.setHupaoc(in.readInt());
        if (!BitSetUtil.get(bits, 72)) ss13husa.setHuparc(in.readInt());
        if (!BitSetUtil.get(bits, 73)) ss13husa.setKit(in.readInt());
        if (!BitSetUtil.get(bits, 74)) ss13husa.setLngi(in.readInt());
        if (!BitSetUtil.get(bits, 75)) ss13husa.setMultg(in.readInt());
        if (!BitSetUtil.get(bits, 76)) ss13husa.setMv(in.readInt());
        if (!BitSetUtil.get(bits, 77)) ss13husa.setNoc(in.readInt());
        if (!BitSetUtil.get(bits, 78)) ss13husa.setNpf(in.readInt());
        if (!BitSetUtil.get(bits, 79)) ss13husa.setNpp(in.readInt());
        if (!BitSetUtil.get(bits, 80)) ss13husa.setNr(in.readInt());
        if (!BitSetUtil.get(bits, 81)) ss13husa.setNrc(in.readInt());
        if (!BitSetUtil.get(bits, 82)) ss13husa.setOcpip(in.readInt());
        if (!BitSetUtil.get(bits, 83)) ss13husa.setPartner(in.readInt());
        if (!BitSetUtil.get(bits, 84)) ss13husa.setPlm(in.readInt());
        if (!BitSetUtil.get(bits, 85)) ss13husa.setPsf(in.readInt());
        if (!BitSetUtil.get(bits, 86)) ss13husa.setR18(in.readInt());
        if (!BitSetUtil.get(bits, 87)) ss13husa.setR60(in.readInt());
        if (!BitSetUtil.get(bits, 88)) ss13husa.setR65(in.readInt());
        if (!BitSetUtil.get(bits, 89)) ss13husa.setResmode(in.readInt());
        if (!BitSetUtil.get(bits, 90)) ss13husa.setSmocp(in.readInt());
        if (!BitSetUtil.get(bits, 91)) ss13husa.setSmx(in.readInt());
        if (!BitSetUtil.get(bits, 92)) ss13husa.setSrnt(in.readInt());
        if (!BitSetUtil.get(bits, 93)) ss13husa.setSsmc(in.readInt());
        if (!BitSetUtil.get(bits, 94)) ss13husa.setSval(in.readInt());
        if (!BitSetUtil.get(bits, 95)) ss13husa.setTaxp(in.readInt());
        if (!BitSetUtil.get(bits, 96)) ss13husa.setWif(in.readInt());
        if (!BitSetUtil.get(bits, 97)) ss13husa.setWkexrel(in.readInt());
        if (!BitSetUtil.get(bits, 98)) ss13husa.setWorkstat(in.readInt());
        if (!BitSetUtil.get(bits, 99)) ss13husa.setFaccessp(in.readInt());
        if (!BitSetUtil.get(bits, 100)) ss13husa.setFacrp(in.readInt());
        if (!BitSetUtil.get(bits, 101)) ss13husa.setFagsp(in.readInt());
        if (!BitSetUtil.get(bits, 102)) ss13husa.setFbathp(in.readInt());
        if (!BitSetUtil.get(bits, 103)) ss13husa.setFbdsp(in.readInt());
        if (!BitSetUtil.get(bits, 104)) ss13husa.setFbldp(in.readInt());
        if (!BitSetUtil.get(bits, 105)) ss13husa.setFbroadbndp(in.readInt());
        if (!BitSetUtil.get(bits, 106)) ss13husa.setFbusp(in.readInt());
        if (!BitSetUtil.get(bits, 107)) ss13husa.setFcompothxp(in.readInt());
        if (!BitSetUtil.get(bits, 108)) ss13husa.setFconp(in.readInt());
        if (!BitSetUtil.get(bits, 109)) ss13husa.setFdialupp(in.readInt());
        if (!BitSetUtil.get(bits, 110)) ss13husa.setFdslp(in.readInt());
        if (!BitSetUtil.get(bits, 111)) ss13husa.setFelep(in.readInt());
        if (!BitSetUtil.get(bits, 112)) ss13husa.setFfiberopp(in.readInt());
        if (!BitSetUtil.get(bits, 113)) ss13husa.setFfsp(in.readInt());
        if (!BitSetUtil.get(bits, 114)) ss13husa.setFfulp(in.readInt());
        if (!BitSetUtil.get(bits, 115)) ss13husa.setFgasp(in.readInt());
        if (!BitSetUtil.get(bits, 116)) ss13husa.setFhandheldp(in.readInt());
        if (!BitSetUtil.get(bits, 117)) ss13husa.setFhflp(in.readInt());
        if (!BitSetUtil.get(bits, 118)) ss13husa.setFinsp(in.readInt());
        if (!BitSetUtil.get(bits, 119)) ss13husa.setFkitp(in.readInt());
        if (!BitSetUtil.get(bits, 120)) ss13husa.setFlaptopp(in.readInt());
        if (!BitSetUtil.get(bits, 121)) ss13husa.setFmhp(in.readInt());
        if (!BitSetUtil.get(bits, 122)) ss13husa.setFmodemp(in.readInt());
        if (!BitSetUtil.get(bits, 123)) ss13husa.setFmrgip(in.readInt());
        if (!BitSetUtil.get(bits, 124)) ss13husa.setFmrgp(in.readInt());
        if (!BitSetUtil.get(bits, 125)) ss13husa.setFmrgtp(in.readInt());
        if (!BitSetUtil.get(bits, 126)) ss13husa.setFmrgxp(in.readInt());
        if (!BitSetUtil.get(bits, 127)) ss13husa.setFmvp(in.readInt());
        if (!BitSetUtil.get(bits, 128)) ss13husa.setFothsvcexp(in.readInt());
        if (!BitSetUtil.get(bits, 129)) ss13husa.setFplmp(in.readInt());
        if (!BitSetUtil.get(bits, 130)) ss13husa.setFrefrp(in.readInt());
        if (!BitSetUtil.get(bits, 131)) ss13husa.setFrmsp(in.readInt());
        if (!BitSetUtil.get(bits, 132)) ss13husa.setFrntmp(in.readInt());
        if (!BitSetUtil.get(bits, 133)) ss13husa.setFrntp(in.readInt());
        if (!BitSetUtil.get(bits, 134)) ss13husa.setFrwatp(in.readInt());
        if (!BitSetUtil.get(bits, 135)) ss13husa.setFrwatprp(in.readInt());
        if (!BitSetUtil.get(bits, 136)) ss13husa.setFsatellitep(in.readInt());
        if (!BitSetUtil.get(bits, 137)) ss13husa.setFsinkp(in.readInt());
        if (!BitSetUtil.get(bits, 138)) ss13husa.setFsmp(in.readInt());
        if (!BitSetUtil.get(bits, 139)) ss13husa.setFsmxhp(in.readInt());
        if (!BitSetUtil.get(bits, 140)) ss13husa.setFsmxsp(in.readInt());
        if (!BitSetUtil.get(bits, 141)) ss13husa.setFstovp(in.readInt());
        if (!BitSetUtil.get(bits, 142)) ss13husa.setFtaxp(in.readInt());
        if (!BitSetUtil.get(bits, 143)) ss13husa.setFtelp(in.readInt());
        if (!BitSetUtil.get(bits, 144)) ss13husa.setFtenp(in.readInt());
        if (!BitSetUtil.get(bits, 145)) ss13husa.setFtoilp(in.readInt());
        if (!BitSetUtil.get(bits, 146)) ss13husa.setFvacsp(in.readInt());
        if (!BitSetUtil.get(bits, 147)) ss13husa.setFvalp(in.readInt());
        if (!BitSetUtil.get(bits, 148)) ss13husa.setFvehp(in.readInt());
        if (!BitSetUtil.get(bits, 149)) ss13husa.setFwatp(in.readInt());
        if (!BitSetUtil.get(bits, 150)) ss13husa.setFyblp(in.readInt());
        return ss13husa;
    }
}