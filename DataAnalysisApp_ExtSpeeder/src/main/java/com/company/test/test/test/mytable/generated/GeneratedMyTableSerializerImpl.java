package com.company.test.test.test.mytable.generated;

import com.company.test.test.test.mytable.MyTable;
import com.speedment.enterprise.core.util.BitSetUtil;
import com.speedment.enterprise.offheapreadonlycache.entity.AbstractEntitySerializer;
import com.speedment.enterprise.offheapreadonlycache.internal.serializer.SerializerFactory;
import com.speedment.manager.Manager;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import javax.annotation.Generated;
import org.mapdb.Serializer;

/**
 * A {@link org.mapdb.Serializer} class for table {@link
 * com.speedment.config.db.Table} named myTable.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Ext Speeder")
public class GeneratedMyTableSerializerImpl extends AbstractEntitySerializer<MyTable> {
    
    protected final static long serialVersionUID = -1381417275;
    private final static Serializer<Integer> ID_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<Integer> VALUE_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    private final static Serializer<String> DATE_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> PERSON_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> COUNTRY_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<String> COMPANY_SERIALIZER = SerializerFactory.serializerOf(String.class);
    private final static Serializer<Integer> QUANTITY_SERIALIZER = SerializerFactory.serializerOf(Integer.class);
    
    public GeneratedMyTableSerializerImpl(Manager<MyTable> manager) {
        super(manager);
    }
    
    @Override
    public void serialize(final DataOutput out, final MyTable myTable) throws IOException {
        final long[] bits = new long[1];
        if (!myTable.getValue().isPresent()) BitSetUtil.set(bits, 0);
        if (!myTable.getDate().isPresent()) BitSetUtil.set(bits, 1);
        if (!myTable.getPerson().isPresent()) BitSetUtil.set(bits, 2);
        if (!myTable.getCountry().isPresent()) BitSetUtil.set(bits, 3);
        if (!myTable.getCompany().isPresent()) BitSetUtil.set(bits, 4);
        if (!myTable.getQuantity().isPresent()) BitSetUtil.set(bits, 5);
        out.writeLong(bits[0]);
        out.writeInt(myTable.getId());
        if (myTable.getValue().isPresent()) out.writeInt(myTable.getValue().get());
        if (myTable.getDate().isPresent()) out.writeUTF(myTable.getDate().get());
        if (myTable.getPerson().isPresent()) out.writeUTF(myTable.getPerson().get());
        if (myTable.getCountry().isPresent()) out.writeUTF(myTable.getCountry().get());
        if (myTable.getCompany().isPresent()) out.writeUTF(myTable.getCompany().get());
        if (myTable.getQuantity().isPresent()) out.writeInt(myTable.getQuantity().get());
    }
    
    @Override
    public MyTable deserialize(final DataInput in, final int available) throws IOException {
        final MyTable myTable = manager.newEmptyEntity();
        final long[] bits = new long[1];
        bits[0] = in.readLong();
        myTable.setId(in.readInt());
        if (!BitSetUtil.get0(bits)) myTable.setValue(in.readInt());
        if (!BitSetUtil.get1(bits)) myTable.setDate(in.readUTF());
        if (!BitSetUtil.get2(bits)) myTable.setPerson(in.readUTF());
        if (!BitSetUtil.get3(bits)) myTable.setCountry(in.readUTF());
        if (!BitSetUtil.get4(bits)) myTable.setCompany(in.readUTF());
        if (!BitSetUtil.get5(bits)) myTable.setQuantity(in.readInt());
        return myTable;
    }
}