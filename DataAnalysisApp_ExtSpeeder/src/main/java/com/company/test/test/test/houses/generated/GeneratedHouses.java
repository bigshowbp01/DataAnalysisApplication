package com.company.test.test.test.houses.generated;

import com.company.test.test.test.houses.Houses;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table test.test.test.houses.
 * <p>
 * This file has been automatically generated by Ext Speeder. Any changes
 * made to it will be overwritten.
 * 
 * @author Ext Speeder
 */
@Generated("Ext Speeder")
public interface GeneratedHouses extends Entity<Houses> {
    
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getSerial()} method.
     */
    final ComparableField<Houses, Integer, Integer> SERIAL = new ComparableFieldImpl<>(Identifier.SERIAL, Houses::getSerial, Houses::setSerial, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getState()} method.
     */
    final StringField<Houses, String> STATE = new StringFieldImpl<>(Identifier.STATE, Houses::getState, Houses::setState, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getBuilding()} method.
     */
    final StringField<Houses, String> BUILDING = new StringFieldImpl<>(Identifier.BUILDING, o -> o.getBuilding().orElse(null), Houses::setBuilding, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getHousingAdjustmentCode()} method.
     */
    final ComparableField<Houses, Integer, Integer> HOUSING_ADJUSTMENT_CODE = new ComparableFieldImpl<>(Identifier.HOUSING_ADJUSTMENT_CODE, Houses::getHousingAdjustmentCode, Houses::setHousingAdjustmentCode, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getIncomeAdjusmentCode()} method.
     */
    final ComparableField<Houses, Integer, Integer> INCOME_ADJUSMENT_CODE = new ComparableFieldImpl<>(Identifier.INCOME_ADJUSMENT_CODE, Houses::getIncomeAdjusmentCode, Houses::setIncomeAdjusmentCode, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getCondoFee()} method.
     */
    final ComparableField<Houses, Integer, Integer> CONDO_FEE = new ComparableFieldImpl<>(Identifier.CONDO_FEE, Houses::getCondoFee, Houses::setCondoFee, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getNumberOfRooms()} method.
     */
    final ComparableField<Houses, Integer, Integer> NUMBER_OF_ROOMS = new ComparableFieldImpl<>(Identifier.NUMBER_OF_ROOMS, Houses::getNumberOfRooms, Houses::setNumberOfRooms, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getMounthlyRent()} method.
     */
    final ComparableField<Houses, Integer, Integer> MOUNTHLY_RENT = new ComparableFieldImpl<>(Identifier.MOUNTHLY_RENT, Houses::getMounthlyRent, Houses::setMounthlyRent, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getPropertyValue()} method.
     */
    final ComparableField<Houses, Integer, Integer> PROPERTY_VALUE = new ComparableFieldImpl<>(Identifier.PROPERTY_VALUE, Houses::getPropertyValue, Houses::setPropertyValue, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getYearOfCreation()} method.
     */
    final StringField<Houses, String> YEAR_OF_CREATION = new StringFieldImpl<>(Identifier.YEAR_OF_CREATION, o -> o.getYearOfCreation().orElse(null), Houses::setYearOfCreation, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getFamilyIncome()} method.
     */
    final ComparableField<Houses, Integer, Integer> FAMILY_INCOME = new ComparableFieldImpl<>(Identifier.FAMILY_INCOME, Houses::getFamilyIncome, Houses::setFamilyIncome, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getGrossRent()} method.
     */
    final ComparableField<Houses, Integer, Integer> GROSS_RENT = new ComparableFieldImpl<>(Identifier.GROSS_RENT, Houses::getGrossRent, Houses::setGrossRent, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getGrossRentAsPercentage()} method.
     */
    final ComparableField<Houses, Integer, Integer> GROSS_RENT_AS_PERCENTAGE = new ComparableFieldImpl<>(Identifier.GROSS_RENT_AS_PERCENTAGE, Houses::getGrossRentAsPercentage, Houses::setGrossRentAsPercentage, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getHouseholdIncome()} method.
     */
    final ComparableField<Houses, Integer, Integer> HOUSEHOLD_INCOME = new ComparableFieldImpl<>(Identifier.HOUSEHOLD_INCOME, Houses::getHouseholdIncome, Houses::setHouseholdIncome, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getMountlyOwnerCostAsPercentage()} method.
     */
    final ComparableField<Houses, Integer, Integer> MOUNTLY_OWNER_COST_AS_PERCENTAGE = new ComparableFieldImpl<>(Identifier.MOUNTLY_OWNER_COST_AS_PERCENTAGE, Houses::getMountlyOwnerCostAsPercentage, Houses::setMountlyOwnerCostAsPercentage, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getMounthlyOwnerCost()} method.
     */
    final ComparableField<Houses, Integer, Integer> MOUNTHLY_OWNER_COST = new ComparableFieldImpl<>(Identifier.MOUNTHLY_OWNER_COST, Houses::getMounthlyOwnerCost, Houses::setMounthlyOwnerCost, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Houses} field that can be obtained
     * using the {@link Houses#getPropertyTaxes()} method.
     */
    final StringField<Houses, String> PROPERTY_TAXES = new StringFieldImpl<>(Identifier.PROPERTY_TAXES, o -> o.getPropertyTaxes().orElse(null), Houses::setPropertyTaxes, new StringIdentityMapper(), false);
    
    /**
     * Returns the serial of this Houses. The serial field corresponds to the
     * database column test.test.houses.serial.
     * 
     * @return the serial of this Houses
     */
    Integer getSerial();
    
    /**
     * Returns the state of this Houses. The state field corresponds to the
     * database column test.test.houses.state.
     * 
     * @return the state of this Houses
     */
    String getState();
    
    /**
     * Returns the building of this Houses. The building field corresponds to the
     * database column test.test.houses.building.
     * 
     * @return the building of this Houses
     */
    Optional<String> getBuilding();
    
    /**
     * Returns the housingAdjustmentCode of this Houses. The
     * housingAdjustmentCode field corresponds to the database column
     * test.test.houses.housing_adjustment_code.
     * 
     * @return the housingAdjustmentCode of this Houses
     */
    Integer getHousingAdjustmentCode();
    
    /**
     * Returns the incomeAdjusmentCode of this Houses. The incomeAdjusmentCode
     * field corresponds to the database column
     * test.test.houses.income_adjusment_code.
     * 
     * @return the incomeAdjusmentCode of this Houses
     */
    Integer getIncomeAdjusmentCode();
    
    /**
     * Returns the condoFee of this Houses. The condoFee field corresponds to the
     * database column test.test.houses.condo_fee.
     * 
     * @return the condoFee of this Houses
     */
    Integer getCondoFee();
    
    /**
     * Returns the numberOfRooms of this Houses. The numberOfRooms field
     * corresponds to the database column test.test.houses.number_of_rooms.
     * 
     * @return the numberOfRooms of this Houses
     */
    Integer getNumberOfRooms();
    
    /**
     * Returns the mounthlyRent of this Houses. The mounthlyRent field
     * corresponds to the database column test.test.houses.mounthly_rent.
     * 
     * @return the mounthlyRent of this Houses
     */
    Integer getMounthlyRent();
    
    /**
     * Returns the propertyValue of this Houses. The propertyValue field
     * corresponds to the database column test.test.houses.property_value.
     * 
     * @return the propertyValue of this Houses
     */
    Integer getPropertyValue();
    
    /**
     * Returns the yearOfCreation of this Houses. The yearOfCreation field
     * corresponds to the database column test.test.houses.year_of_creation.
     * 
     * @return the yearOfCreation of this Houses
     */
    Optional<String> getYearOfCreation();
    
    /**
     * Returns the familyIncome of this Houses. The familyIncome field
     * corresponds to the database column test.test.houses.family_income.
     * 
     * @return the familyIncome of this Houses
     */
    Integer getFamilyIncome();
    
    /**
     * Returns the grossRent of this Houses. The grossRent field corresponds to
     * the database column test.test.houses.gross_rent.
     * 
     * @return the grossRent of this Houses
     */
    Integer getGrossRent();
    
    /**
     * Returns the grossRentAsPercentage of this Houses. The
     * grossRentAsPercentage field corresponds to the database column
     * test.test.houses.gross_rent_as_percentage.
     * 
     * @return the grossRentAsPercentage of this Houses
     */
    Integer getGrossRentAsPercentage();
    
    /**
     * Returns the householdIncome of this Houses. The householdIncome field
     * corresponds to the database column test.test.houses.household_income.
     * 
     * @return the householdIncome of this Houses
     */
    Integer getHouseholdIncome();
    
    /**
     * Returns the mountlyOwnerCostAsPercentage of this Houses. The
     * mountlyOwnerCostAsPercentage field corresponds to the database column
     * test.test.houses.mountly_owner_cost_as_percentage.
     * 
     * @return the mountlyOwnerCostAsPercentage of this Houses
     */
    Integer getMountlyOwnerCostAsPercentage();
    
    /**
     * Returns the mounthlyOwnerCost of this Houses. The mounthlyOwnerCost field
     * corresponds to the database column test.test.houses.mounthly_owner_cost.
     * 
     * @return the mounthlyOwnerCost of this Houses
     */
    Integer getMounthlyOwnerCost();
    
    /**
     * Returns the propertyTaxes of this Houses. The propertyTaxes field
     * corresponds to the database column test.test.houses.property_taxes.
     * 
     * @return the propertyTaxes of this Houses
     */
    Optional<String> getPropertyTaxes();
    
    /**
     * Sets the serial of this Houses. The serial field corresponds to the
     * database column test.test.houses.serial.
     * 
     * @param serial to set of this Houses
     * @return this Houses instance
     */
    Houses setSerial(Integer serial);
    
    /**
     * Sets the state of this Houses. The state field corresponds to the database
     * column test.test.houses.state.
     * 
     * @param state to set of this Houses
     * @return this Houses instance
     */
    Houses setState(String state);
    
    /**
     * Sets the building of this Houses. The building field corresponds to the
     * database column test.test.houses.building.
     * 
     * @param building to set of this Houses
     * @return this Houses instance
     */
    Houses setBuilding(String building);
    
    /**
     * Sets the housingAdjustmentCode of this Houses. The housingAdjustmentCode
     * field corresponds to the database column
     * test.test.houses.housing_adjustment_code.
     * 
     * @param housingAdjustmentCode to set of this Houses
     * @return this Houses instance
     */
    Houses setHousingAdjustmentCode(Integer housingAdjustmentCode);
    
    /**
     * Sets the incomeAdjusmentCode of this Houses. The incomeAdjusmentCode field
     * corresponds to the database column test.test.houses.income_adjusment_code.
     * 
     * @param incomeAdjusmentCode to set of this Houses
     * @return this Houses instance
     */
    Houses setIncomeAdjusmentCode(Integer incomeAdjusmentCode);
    
    /**
     * Sets the condoFee of this Houses. The condoFee field corresponds to the
     * database column test.test.houses.condo_fee.
     * 
     * @param condoFee to set of this Houses
     * @return this Houses instance
     */
    Houses setCondoFee(Integer condoFee);
    
    /**
     * Sets the numberOfRooms of this Houses. The numberOfRooms field corresponds
     * to the database column test.test.houses.number_of_rooms.
     * 
     * @param numberOfRooms to set of this Houses
     * @return this Houses instance
     */
    Houses setNumberOfRooms(Integer numberOfRooms);
    
    /**
     * Sets the mounthlyRent of this Houses. The mounthlyRent field corresponds
     * to the database column test.test.houses.mounthly_rent.
     * 
     * @param mounthlyRent to set of this Houses
     * @return this Houses instance
     */
    Houses setMounthlyRent(Integer mounthlyRent);
    
    /**
     * Sets the propertyValue of this Houses. The propertyValue field corresponds
     * to the database column test.test.houses.property_value.
     * 
     * @param propertyValue to set of this Houses
     * @return this Houses instance
     */
    Houses setPropertyValue(Integer propertyValue);
    
    /**
     * Sets the yearOfCreation of this Houses. The yearOfCreation field
     * corresponds to the database column test.test.houses.year_of_creation.
     * 
     * @param yearOfCreation to set of this Houses
     * @return this Houses instance
     */
    Houses setYearOfCreation(String yearOfCreation);
    
    /**
     * Sets the familyIncome of this Houses. The familyIncome field corresponds
     * to the database column test.test.houses.family_income.
     * 
     * @param familyIncome to set of this Houses
     * @return this Houses instance
     */
    Houses setFamilyIncome(Integer familyIncome);
    
    /**
     * Sets the grossRent of this Houses. The grossRent field corresponds to the
     * database column test.test.houses.gross_rent.
     * 
     * @param grossRent to set of this Houses
     * @return this Houses instance
     */
    Houses setGrossRent(Integer grossRent);
    
    /**
     * Sets the grossRentAsPercentage of this Houses. The grossRentAsPercentage
     * field corresponds to the database column
     * test.test.houses.gross_rent_as_percentage.
     * 
     * @param grossRentAsPercentage to set of this Houses
     * @return this Houses instance
     */
    Houses setGrossRentAsPercentage(Integer grossRentAsPercentage);
    
    /**
     * Sets the householdIncome of this Houses. The householdIncome field
     * corresponds to the database column test.test.houses.household_income.
     * 
     * @param householdIncome to set of this Houses
     * @return this Houses instance
     */
    Houses setHouseholdIncome(Integer householdIncome);
    
    /**
     * Sets the mountlyOwnerCostAsPercentage of this Houses. The
     * mountlyOwnerCostAsPercentage field corresponds to the database column
     * test.test.houses.mountly_owner_cost_as_percentage.
     * 
     * @param mountlyOwnerCostAsPercentage to set of this Houses
     * @return this Houses instance
     */
    Houses setMountlyOwnerCostAsPercentage(Integer mountlyOwnerCostAsPercentage);
    
    /**
     * Sets the mounthlyOwnerCost of this Houses. The mounthlyOwnerCost field
     * corresponds to the database column test.test.houses.mounthly_owner_cost.
     * 
     * @param mounthlyOwnerCost to set of this Houses
     * @return this Houses instance
     */
    Houses setMounthlyOwnerCost(Integer mounthlyOwnerCost);
    
    /**
     * Sets the propertyTaxes of this Houses. The propertyTaxes field corresponds
     * to the database column test.test.houses.property_taxes.
     * 
     * @param propertyTaxes to set of this Houses
     * @return this Houses instance
     */
    Houses setPropertyTaxes(String propertyTaxes);
    
    enum Identifier implements FieldIdentifier<Houses> {
        
        SERIAL ("serial"),
        STATE ("state"),
        BUILDING ("building"),
        HOUSING_ADJUSTMENT_CODE ("housing_adjustment_code"),
        INCOME_ADJUSMENT_CODE ("income_adjusment_code"),
        CONDO_FEE ("condo_fee"),
        NUMBER_OF_ROOMS ("number_of_rooms"),
        MOUNTHLY_RENT ("mounthly_rent"),
        PROPERTY_VALUE ("property_value"),
        YEAR_OF_CREATION ("year_of_creation"),
        FAMILY_INCOME ("family_income"),
        GROSS_RENT ("gross_rent"),
        GROSS_RENT_AS_PERCENTAGE ("gross_rent_as_percentage"),
        HOUSEHOLD_INCOME ("household_income"),
        MOUNTLY_OWNER_COST_AS_PERCENTAGE ("mountly_owner_cost_as_percentage"),
        MOUNTHLY_OWNER_COST ("mounthly_owner_cost"),
        PROPERTY_TAXES ("property_taxes");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "test";
        }
        
        @Override
        public String schemaName() {
            return "test";
        }
        
        @Override
        public String tableName() {
            return "houses";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}